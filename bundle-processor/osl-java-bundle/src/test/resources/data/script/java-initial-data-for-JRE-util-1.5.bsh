
// global variables to be reused for each type
import org.junit.Before;
import org.junit.Test;
import org.objectweb.asm.Opcodes;
import org.openspotlight.graph.SLGraph;
import org.openspotlight.graph.SLGraphFactory;
import org.openspotlight.graph.SLGraphFactoryImpl;
import org.openspotlight.graph.SLGraphSession;
import org.openspotlight.graph.SLNode;
import org.openspotlight.bundle.dap.language.java.metamodel.link.*;
import org.openspotlight.bundle.dap.language.java.metamodel.node.*;
import org.openspotlight.bundle.dap.language.java.support.JavaGraphNodeSupport;
import org.openspotlight.bundle.dap.language.java.Constants;
import java.util.Map;
import java.util.TreeMap;

SLGraphFactory factory = new SLGraphFactoryImpl();
SLGraph graph = factory.createTempGraph(true);
SLGraphSession session = graph.openSession();
SLNode currentContextRootNode = session.createContext("JRE-util-1.5").getRootNode();
SLNode abstractContextRootNode = session.createContext(Constants.ABSTRACT_CONTEXT).getRootNode();
JavaGraphNodeSupport helper = new JavaGraphNodeSupport(session, currentContextRootNode,abstractContextRootNode);
JavaType newType;
JavaMethod method;

newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractCollection",1057);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractList$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractList$Itr",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractList$ListItr",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractList",1057);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractMap$1$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractMap$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractMap$2$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractMap$2",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractMap$SimpleEntry",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractMap",1057);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractQueue",1057);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractSequentialList",1057);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractSet",1057);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "ArrayList",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Arrays$ArrayList",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Arrays",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "BitSet",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Calendar$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Calendar$CalendarAccessControlContext",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Calendar",1057);
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "Collection",1537);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CheckedCollection$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CheckedCollection",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CheckedList$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CheckedList",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CheckedMap$CheckedEntrySet$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CheckedMap$CheckedEntrySet$CheckedEntry",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CheckedMap$CheckedEntrySet",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CheckedMap",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CheckedRandomAccessList",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CheckedSet",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CheckedSortedMap",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CheckedSortedSet",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CopiesList",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$EmptyList",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$EmptyMap",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$EmptySet$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$EmptySet",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$ReverseComparator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$ReverseComparator2",32);
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "Collections$SelfComparable",1536);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$SingletonList",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$SingletonMap$ImmutableEntry",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$SingletonMap",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$SingletonSet$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$SingletonSet",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$SynchronizedCollection",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$SynchronizedList",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$SynchronizedMap",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$SynchronizedRandomAccessList",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$SynchronizedSet",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$SynchronizedSortedMap",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$SynchronizedSortedSet",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$UnmodifiableCollection$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$UnmodifiableCollection",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$UnmodifiableList$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$UnmodifiableList",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$UnmodifiableMap$UnmodifiableEntrySet$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$UnmodifiableMap$UnmodifiableEntrySet",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$UnmodifiableMap",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$UnmodifiableRandomAccessList",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$UnmodifiableSet",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$UnmodifiableSortedMap",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$UnmodifiableSortedSet",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections",33);
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "Comparator",1537);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "ConcurrentModificationException",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Currency$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Currency",49);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "CurrencyData",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Date",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Dictionary",1057);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "DuplicateFormatFlagsException",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EmptyStackException",33);
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "Enumeration",1537);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EnumMap$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EnumMap$EntryIterator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EnumMap$EntrySet",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EnumMap$EnumMapIterator",1056);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EnumMap$KeyIterator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EnumMap$KeySet",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EnumMap$ValueIterator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EnumMap$Values",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EnumMap",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EnumSet$SerializationProxy",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EnumSet",1057);
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "EventListener",1537);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EventListenerProxy",1057);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EventObject",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "FormatFlagsConversionMismatchException",33);
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "Formattable",1537);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "FormattableFlags",33);
newType = helper.addTypeOnCurrentContext(JavaTypeEnum.class,"java.util", "Formatter$BigDecimalLayoutForm",16433);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Formatter$Conversion",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Formatter$DateTime",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Formatter$FixedString",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Formatter$Flags",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Formatter$FormatSpecifier$BigDecimalLayout",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Formatter$FormatSpecifier",32);
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "Formatter$FormatString",1536);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Formatter",49);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "FormatterClosedException",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "GregorianCalendar",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "HashMap$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "HashMap$Entry",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "HashMap$EntryIterator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "HashMap$EntrySet",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "HashMap$HashIterator",1056);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "HashMap$KeyIterator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "HashMap$KeySet",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "HashMap$ValueIterator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "HashMap$Values",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "HashMap",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "HashSet",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Hashtable$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Hashtable$EmptyEnumerator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Hashtable$EmptyIterator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Hashtable$Entry",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Hashtable$EntrySet",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Hashtable$Enumerator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Hashtable$KeySet",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Hashtable$ValueCollection",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Hashtable",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IdentityHashMap$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IdentityHashMap$EntryIterator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IdentityHashMap$EntrySet",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IdentityHashMap$IdentityHashMapIterator",1056);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IdentityHashMap$KeyIterator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IdentityHashMap$KeySet",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IdentityHashMap$ValueIterator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IdentityHashMap$Values",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IdentityHashMap",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IllegalFormatCodePointException",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IllegalFormatConversionException",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IllegalFormatException",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IllegalFormatFlagsException",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IllegalFormatPrecisionException",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IllegalFormatWidthException",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "InputMismatchException",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "InvalidPropertiesFormatException",33);
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "Iterator",1537);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "JumboEnumSet$EnumSetIterator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "JumboEnumSet",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "LinkedHashMap$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "LinkedHashMap$Entry",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "LinkedHashMap$EntryIterator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "LinkedHashMap$KeyIterator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "LinkedHashMap$LinkedHashIterator",1056);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "LinkedHashMap$ValueIterator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "LinkedHashMap",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "LinkedHashSet",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "LinkedList$Entry",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "LinkedList$ListItr",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "LinkedList",33);
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "List",1537);
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "ListIterator",1537);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "ListResourceBundle",1057);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Locale",49);
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "Map$Entry",1537);
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "Map",1537);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "MissingFormatArgumentException",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "MissingFormatWidthException",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "MissingResourceException",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "NoSuchElementException",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Observable",33);
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "Observer",1537);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "PriorityQueue$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "PriorityQueue$Itr",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "PriorityQueue",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Properties$LineReader",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Properties",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "PropertyPermission",49);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "PropertyPermissionCollection",48);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "PropertyResourceBundle",33);
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "Queue",1537);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Random",33);
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "RandomAccess",1537);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "RandomAccessSubList",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "RegularEnumSet$EnumSetIterator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "RegularEnumSet",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "ResourceBundle$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "ResourceBundle$LoaderReference",48);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "ResourceBundle$ResourceCacheKey",48);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "ResourceBundle",1057);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "ResourceBundleEnumeration",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Scanner$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Scanner",49);
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "Set",1537);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "SimpleTimeZone",33);
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "SortedMap",1537);
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "SortedSet",1537);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Stack",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "StringTokenizer",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "SubList$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "SubList",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TaskQueue",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Timer$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Timer",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TimerTask",1057);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TimerThread",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TimeZone$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TimeZone$DisplayNames",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TimeZone",1057);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TooManyListenersException",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeMap$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeMap$2",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeMap$3",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeMap$Entry",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeMap$EntryIterator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeMap$KeyIterator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeMap$PrivateEntryIterator",1056);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeMap$SubMap$EntrySetView",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeMap$SubMap",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeMap$SubMapEntryIterator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeMap$ValueIterator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeMap",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeSet",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "UnknownFormatConversionException",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "UnknownFormatFlagsException",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "UUID",49);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Vector$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Vector",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "WeakHashMap$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "WeakHashMap$Entry",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "WeakHashMap$EntryIterator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "WeakHashMap$EntrySet",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "WeakHashMap$HashIterator",1056);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "WeakHashMap$KeyIterator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "WeakHashMap$KeySet",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "WeakHashMap$ValueIterator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "WeakHashMap$Values",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "WeakHashMap",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "XMLUtils$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "XMLUtils$EH",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "XMLUtils$Resolver",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "XMLUtils",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractCollection",1057);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractList$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractList$Itr",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractList$ListItr",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractList",1057);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractMap$1$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractMap$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractMap$2$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractMap$2",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractMap$SimpleEntry",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractMap",1057);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractQueue",1057);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractSequentialList",1057);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractSet",1057);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "ArrayList",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Arrays$ArrayList",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Arrays",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "BitSet",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Calendar$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Calendar$CalendarAccessControlContext",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Calendar",1057);
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "Collection",1537);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CheckedCollection$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CheckedCollection",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CheckedList$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CheckedList",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CheckedMap$CheckedEntrySet$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CheckedMap$CheckedEntrySet$CheckedEntry",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CheckedMap$CheckedEntrySet",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CheckedMap",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CheckedRandomAccessList",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CheckedSet",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CheckedSortedMap",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CheckedSortedSet",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CopiesList",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$EmptyList",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$EmptyMap",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$EmptySet$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$EmptySet",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$ReverseComparator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$ReverseComparator2",32);
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "Collections$SelfComparable",1536);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$SingletonList",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$SingletonMap$ImmutableEntry",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$SingletonMap",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$SingletonSet$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$SingletonSet",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$SynchronizedCollection",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$SynchronizedList",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$SynchronizedMap",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$SynchronizedRandomAccessList",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$SynchronizedSet",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$SynchronizedSortedMap",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$SynchronizedSortedSet",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$UnmodifiableCollection$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$UnmodifiableCollection",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$UnmodifiableList$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$UnmodifiableList",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$UnmodifiableMap$UnmodifiableEntrySet$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$UnmodifiableMap$UnmodifiableEntrySet",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$UnmodifiableMap",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$UnmodifiableRandomAccessList",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$UnmodifiableSet",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$UnmodifiableSortedMap",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$UnmodifiableSortedSet",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections",33);
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "Comparator",1537);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "ConcurrentModificationException",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Currency$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Currency",49);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "CurrencyData",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Date",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Dictionary",1057);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "DuplicateFormatFlagsException",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EmptyStackException",33);
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "Enumeration",1537);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EnumMap$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EnumMap$EntryIterator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EnumMap$EntrySet",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EnumMap$EnumMapIterator",1056);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EnumMap$KeyIterator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EnumMap$KeySet",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EnumMap$ValueIterator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EnumMap$Values",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EnumMap",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EnumSet$SerializationProxy",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EnumSet",1057);
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "EventListener",1537);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EventListenerProxy",1057);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EventObject",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "FormatFlagsConversionMismatchException",33);
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "Formattable",1537);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "FormattableFlags",33);
newType = helper.addTypeOnCurrentContext(JavaTypeEnum.class,"java.util", "Formatter$BigDecimalLayoutForm",16433);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Formatter$Conversion",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Formatter$DateTime",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Formatter$FixedString",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Formatter$Flags",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Formatter$FormatSpecifier$BigDecimalLayout",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Formatter$FormatSpecifier",32);
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "Formatter$FormatString",1536);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Formatter",49);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "FormatterClosedException",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "GregorianCalendar",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "HashMap$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "HashMap$Entry",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "HashMap$EntryIterator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "HashMap$EntrySet",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "HashMap$HashIterator",1056);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "HashMap$KeyIterator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "HashMap$KeySet",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "HashMap$ValueIterator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "HashMap$Values",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "HashMap",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "HashSet",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Hashtable$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Hashtable$EmptyEnumerator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Hashtable$EmptyIterator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Hashtable$Entry",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Hashtable$EntrySet",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Hashtable$Enumerator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Hashtable$KeySet",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Hashtable$ValueCollection",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Hashtable",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IdentityHashMap$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IdentityHashMap$EntryIterator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IdentityHashMap$EntrySet",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IdentityHashMap$IdentityHashMapIterator",1056);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IdentityHashMap$KeyIterator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IdentityHashMap$KeySet",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IdentityHashMap$ValueIterator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IdentityHashMap$Values",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IdentityHashMap",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IllegalFormatCodePointException",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IllegalFormatConversionException",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IllegalFormatException",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IllegalFormatFlagsException",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IllegalFormatPrecisionException",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IllegalFormatWidthException",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "InputMismatchException",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "InvalidPropertiesFormatException",33);
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "Iterator",1537);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "JumboEnumSet$EnumSetIterator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "JumboEnumSet",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "LinkedHashMap$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "LinkedHashMap$Entry",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "LinkedHashMap$EntryIterator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "LinkedHashMap$KeyIterator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "LinkedHashMap$LinkedHashIterator",1056);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "LinkedHashMap$ValueIterator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "LinkedHashMap",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "LinkedHashSet",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "LinkedList$Entry",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "LinkedList$ListItr",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "LinkedList",33);
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "List",1537);
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "ListIterator",1537);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "ListResourceBundle",1057);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Locale",49);
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "Map$Entry",1537);
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "Map",1537);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "MissingFormatArgumentException",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "MissingFormatWidthException",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "MissingResourceException",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "NoSuchElementException",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Observable",33);
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "Observer",1537);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "PriorityQueue$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "PriorityQueue$Itr",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "PriorityQueue",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Properties$LineReader",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Properties",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "PropertyPermission",49);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "PropertyPermissionCollection",48);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "PropertyResourceBundle",33);
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "Queue",1537);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Random",33);
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "RandomAccess",1537);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "RandomAccessSubList",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "RegularEnumSet$EnumSetIterator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "RegularEnumSet",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "ResourceBundle$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "ResourceBundle$LoaderReference",48);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "ResourceBundle$ResourceCacheKey",48);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "ResourceBundle",1057);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "ResourceBundleEnumeration",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Scanner$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Scanner",49);
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "Set",1537);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "SimpleTimeZone",33);
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "SortedMap",1537);
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "SortedSet",1537);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Stack",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "StringTokenizer",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "SubList$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "SubList",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TaskQueue",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Timer$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Timer",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TimerTask",1057);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TimerThread",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TimeZone$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TimeZone$DisplayNames",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TimeZone",1057);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TooManyListenersException",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeMap$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeMap$2",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeMap$3",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeMap$Entry",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeMap$EntryIterator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeMap$KeyIterator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeMap$PrivateEntryIterator",1056);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeMap$SubMap$EntrySetView",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeMap$SubMap",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeMap$SubMapEntryIterator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeMap$ValueIterator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeMap",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeSet",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "UnknownFormatConversionException",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "UnknownFormatFlagsException",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "UUID",49);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Vector$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Vector",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "WeakHashMap$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "WeakHashMap$Entry",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "WeakHashMap$EntryIterator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "WeakHashMap$EntrySet",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "WeakHashMap$HashIterator",1056);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "WeakHashMap$KeyIterator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "WeakHashMap$KeySet",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "WeakHashMap$ValueIterator",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "WeakHashMap$Values",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "WeakHashMap",33);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "XMLUtils$1",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "XMLUtils$EH",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "XMLUtils$Resolver",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "XMLUtils",32);
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractCollection",1057);
    helper.addExtendsLinks("java.util", "AbstractCollection","java.lang","Object");
    helper.addImplementsLinks("java.util", "AbstractCollection","java.util","Collection");
    method = helper.createMethod(newType,"AbstractCollection()","AbstractCollection",true,4);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"size()","size",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"toArray()","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"toArray(java.lang.Object[])","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsAll(java.util.Collection)","containsAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"addAll(java.util.Collection)","addAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"removeAll(java.util.Collection)","removeAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"retainAll(java.util.Collection)","retainAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractList$1",32);
    helper.addExtendsLinks("java.util", "AbstractList$1","java.lang","Object");
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractList$Itr",32);
    helper.addExtendsLinks("java.util", "AbstractList$Itr","java.lang","Object");
    helper.addImplementsLinks("java.util", "AbstractList$Itr","java.util","Iterator");
    helper.createField(newType,JavaTypePrimitive.class,"","int","cursor",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","lastRet",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","expectedModCount",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","AbstractList","this$0",4112,false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"checkForComodification()","checkForComodification",false,16);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"AbstractList$Itr(java.util.AbstractList, java.util.AbstractList$1)","AbstractList$Itr",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractList$ListItr",32);
    helper.addExtendsLinks("java.util", "AbstractList$ListItr","java.util","AbstractList$Itr");
    helper.addImplementsLinks("java.util", "AbstractList$ListItr","java.util","ListIterator");
	helper.createField(newType,JavaType.class,"java.util","AbstractList","this$0",4112,false,0);
    method = helper.createMethod(newType,"AbstractList$ListItr(java.util.AbstractList, int)","AbstractList$ListItr",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasPrevious()","hasPrevious",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"previous()","previous",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"nextIndex()","nextIndex",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"previousIndex()","previousIndex",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"set(java.lang.Object)","set",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractList",1057);
    helper.addExtendsLinks("java.util", "AbstractList","java.util","AbstractCollection");
    helper.addImplementsLinks("java.util", "AbstractList","java.util","List");
    helper.createField(newType,JavaTypePrimitive.class,"","int","modCount",132,false,0);
    method = helper.createMethod(newType,"AbstractList()","AbstractList",true,4);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"get(int)","get",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"set(int, java.lang.Object)","set",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"add(int, java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"remove(int)","remove",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"indexOf(java.lang.Object)","indexOf",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"lastIndexOf(java.lang.Object)","lastIndexOf",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"addAll(int, java.util.Collection)","addAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"listIterator()","listIterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","ListIterator",false,0);
    method = helper.createMethod(newType,"listIterator(int)","listIterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","ListIterator",false,0);
    method = helper.createMethod(newType,"subList(int, int)","subList",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","List",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"removeRange(int, int)","removeRange",false,4);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractMap$1$1",32);
    helper.addExtendsLinks("java.util", "AbstractMap$1$1","java.lang","Object");
    helper.addImplementsLinks("java.util", "AbstractMap$1$1","java.util","Iterator");
	helper.createField(newType,JavaType.class,"java.util","AbstractMap$1","this$1",4112,false,0);
    method = helper.createMethod(newType,"AbstractMap$1$1(java.util.AbstractMap$1)","AbstractMap$1$1",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractMap$1",32);
    helper.addExtendsLinks("java.util", "AbstractMap$1","java.util","AbstractSet");
	helper.createField(newType,JavaType.class,"java.util","AbstractMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"AbstractMap$1(java.util.AbstractMap)","AbstractMap$1",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractMap$2$1",32);
    helper.addExtendsLinks("java.util", "AbstractMap$2$1","java.lang","Object");
    helper.addImplementsLinks("java.util", "AbstractMap$2$1","java.util","Iterator");
	helper.createField(newType,JavaType.class,"java.util","AbstractMap$2","this$1",4112,false,0);
    method = helper.createMethod(newType,"AbstractMap$2$1(java.util.AbstractMap$2)","AbstractMap$2$1",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractMap$2",32);
    helper.addExtendsLinks("java.util", "AbstractMap$2","java.util","AbstractCollection");
	helper.createField(newType,JavaType.class,"java.util","AbstractMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"AbstractMap$2(java.util.AbstractMap)","AbstractMap$2",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractMap$SimpleEntry",32);
    helper.addExtendsLinks("java.util", "AbstractMap$SimpleEntry","java.lang","Object");
    helper.addImplementsLinks("java.util", "AbstractMap$SimpleEntry","java.util","Map$Entry");
	helper.createField(newType,JavaType.class,"java.lang","Object","key",0,false,0);
	helper.createField(newType,JavaType.class,"java.lang","Object","value",0,false,0);
    method = helper.createMethod(newType,"AbstractMap$SimpleEntry(java.lang.Object, java.lang.Object)","AbstractMap$SimpleEntry",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"AbstractMap$SimpleEntry(java.util.Map$Entry)","AbstractMap$SimpleEntry",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getKey()","getKey",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"getValue()","getValue",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"setValue(java.lang.Object)","setValue",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractMap",1057);
    helper.addExtendsLinks("java.util", "AbstractMap","java.lang","Object");
    helper.addImplementsLinks("java.util", "AbstractMap","java.util","Map");
	helper.createField(newType,JavaType.class,"java.util","Set","keySet",192,false,0);
	helper.createField(newType,JavaType.class,"java.util","Collection","values",192,false,0);
    method = helper.createMethod(newType,"AbstractMap()","AbstractMap",true,4);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsValue(java.lang.Object)","containsValue",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsKey(java.lang.Object)","containsKey",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"get(java.lang.Object)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"put(java.lang.Object, java.lang.Object)","put",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"putAll(java.util.Map)","putAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"keySet()","keySet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"values()","values",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Collection",false,0);
    method = helper.createMethod(newType,"entrySet()","entrySet",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,4);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
        helper.addThrowsOnMethod(method, "java.lang","CloneNotSupportedException");
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractQueue",1057);
    helper.addExtendsLinks("java.util", "AbstractQueue","java.util","AbstractCollection");
    helper.addImplementsLinks("java.util", "AbstractQueue","java.util","Queue");
    method = helper.createMethod(newType,"AbstractQueue()","AbstractQueue",true,4);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"element()","element",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"addAll(java.util.Collection)","addAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractSequentialList",1057);
    helper.addExtendsLinks("java.util", "AbstractSequentialList","java.util","AbstractList");
    method = helper.createMethod(newType,"AbstractSequentialList()","AbstractSequentialList",true,4);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"get(int)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"set(int, java.lang.Object)","set",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"add(int, java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"remove(int)","remove",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"addAll(int, java.util.Collection)","addAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"listIterator(int)","listIterator",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.util","ListIterator",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractSet",1057);
    helper.addExtendsLinks("java.util", "AbstractSet","java.util","AbstractCollection");
    helper.addImplementsLinks("java.util", "AbstractSet","java.util","Set");
    method = helper.createMethod(newType,"AbstractSet()","AbstractSet",true,4);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"removeAll(java.util.Collection)","removeAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "ArrayList",33);
    helper.addExtendsLinks("java.util", "ArrayList","java.util","AbstractList");
    helper.addImplementsLinks("java.util", "ArrayList","java.util","List");
    helper.addImplementsLinks("java.util", "ArrayList","java.util","RandomAccess");
    helper.addImplementsLinks("java.util", "ArrayList","java.lang","Cloneable");
    helper.addImplementsLinks("java.util", "ArrayList","java.io","Serializable");
    method = helper.createMethod(newType,"ArrayList(int)","ArrayList",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"ArrayList()","ArrayList",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"ArrayList(java.util.Collection)","ArrayList",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"trimToSize()","trimToSize",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"ensureCapacity(int)","ensureCapacity",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"indexOf(java.lang.Object)","indexOf",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"lastIndexOf(java.lang.Object)","lastIndexOf",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"toArray()","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"toArray(java.lang.Object[])","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"get(int)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"set(int, java.lang.Object)","set",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"add(int, java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"remove(int)","remove",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"addAll(java.util.Collection)","addAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"addAll(int, java.util.Collection)","addAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"removeRange(int, int)","removeRange",false,4);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Arrays$ArrayList",32);
    helper.addExtendsLinks("java.util", "Arrays$ArrayList","java.util","AbstractList");
    helper.addImplementsLinks("java.util", "Arrays$ArrayList","java.util","RandomAccess");
    helper.addImplementsLinks("java.util", "Arrays$ArrayList","java.io","Serializable");
    method = helper.createMethod(newType,"Arrays$ArrayList(java.lang.Object[])","Arrays$ArrayList",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"toArray()","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"get(int)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"set(int, java.lang.Object)","set",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"indexOf(java.lang.Object)","indexOf",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Arrays",33);
    helper.addExtendsLinks("java.util", "Arrays","java.lang","Object");
    method = helper.createMethod(newType,"sort(long[])","sort",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"sort(long[], int, int)","sort",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"sort(int[])","sort",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"sort(int[], int, int)","sort",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"sort(short[])","sort",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"sort(short[], int, int)","sort",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"sort(char[])","sort",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"sort(char[], int, int)","sort",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"sort(byte[])","sort",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"sort(byte[], int, int)","sort",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"sort(double[])","sort",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"sort(double[], int, int)","sort",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"sort(float[])","sort",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"sort(float[], int, int)","sort",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"sort(java.lang.Object[])","sort",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"sort(java.lang.Object[], int, int)","sort",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"sort(java.lang.Object[], java.util.Comparator)","sort",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"sort(java.lang.Object[], int, int, java.util.Comparator)","sort",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"binarySearch(long[], long)","binarySearch",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"binarySearch(int[], int)","binarySearch",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"binarySearch(short[], short)","binarySearch",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"binarySearch(char[], char)","binarySearch",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"binarySearch(byte[], byte)","binarySearch",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"binarySearch(double[], double)","binarySearch",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"binarySearch(float[], float)","binarySearch",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"binarySearch(java.lang.Object[], java.lang.Object)","binarySearch",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"binarySearch(java.lang.Object[], java.lang.Object, java.util.Comparator)","binarySearch",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"equals(long[], long[])","equals",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"equals(int[], int[])","equals",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"equals(short[], short[])","equals",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"equals(char[], char[])","equals",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"equals(byte[], byte[])","equals",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"equals(boolean[], boolean[])","equals",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"equals(double[], double[])","equals",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"equals(float[], float[])","equals",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object[], java.lang.Object[])","equals",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"fill(long[], long)","fill",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"fill(long[], int, int, long)","fill",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"fill(int[], int)","fill",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"fill(int[], int, int, int)","fill",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"fill(short[], short)","fill",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"fill(short[], int, int, short)","fill",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"fill(char[], char)","fill",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"fill(char[], int, int, char)","fill",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"fill(byte[], byte)","fill",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"fill(byte[], int, int, byte)","fill",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"fill(boolean[], boolean)","fill",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"fill(boolean[], int, int, boolean)","fill",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"fill(double[], double)","fill",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"fill(double[], int, int, double)","fill",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"fill(float[], float)","fill",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"fill(float[], int, int, float)","fill",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"fill(java.lang.Object[], java.lang.Object)","fill",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"fill(java.lang.Object[], int, int, java.lang.Object)","fill",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"asList(java.lang.Object[])","asList",false,137);
    helper.createMethodReturnType(method,JavaType.class,"java.util","List",false,0);
    method = helper.createMethod(newType,"hashCode(long[])","hashCode",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"hashCode(int[])","hashCode",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"hashCode(short[])","hashCode",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"hashCode(char[])","hashCode",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"hashCode(byte[])","hashCode",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"hashCode(boolean[])","hashCode",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"hashCode(float[])","hashCode",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"hashCode(double[])","hashCode",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"hashCode(java.lang.Object[])","hashCode",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"deepHashCode(java.lang.Object[])","deepHashCode",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"deepEquals(java.lang.Object[], java.lang.Object[])","deepEquals",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"toString(long[])","toString",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"toString(int[])","toString",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"toString(short[])","toString",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"toString(char[])","toString",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"toString(byte[])","toString",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"toString(boolean[])","toString",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"toString(float[])","toString",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"toString(double[])","toString",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"toString(java.lang.Object[])","toString",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"deepToString(java.lang.Object[])","deepToString",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "BitSet",33);
    helper.addExtendsLinks("java.util", "BitSet","java.lang","Object");
    helper.addImplementsLinks("java.util", "BitSet","java.lang","Cloneable");
    helper.addImplementsLinks("java.util", "BitSet","java.io","Serializable");
    method = helper.createMethod(newType,"BitSet()","BitSet",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"BitSet(int)","BitSet",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"flip(int)","flip",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"flip(int, int)","flip",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"set(int)","set",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"set(int, boolean)","set",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"set(int, int)","set",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"set(int, int, boolean)","set",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"clear(int)","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"clear(int, int)","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"get(int)","get",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"get(int, int)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","BitSet",false,0);
    method = helper.createMethod(newType,"nextSetBit(int)","nextSetBit",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"nextClearBit(int)","nextClearBit",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"length()","length",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"intersects(java.util.BitSet)","intersects",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"cardinality()","cardinality",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"and(java.util.BitSet)","and",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"or(java.util.BitSet)","or",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"xor(java.util.BitSet)","xor",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"andNot(java.util.BitSet)","andNot",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Calendar$1",32);
    helper.addExtendsLinks("java.util", "Calendar$1","java.lang","Object");
    helper.addImplementsLinks("java.util", "Calendar$1","java.security","PrivilegedExceptionAction");
	helper.createField(newType,JavaType.class,"java.io","ObjectInputStream","val$input",4112,false,0);
	helper.createField(newType,JavaType.class,"java.util","Calendar","this$0",4112,false,0);
    method = helper.createMethod(newType,"Calendar$1(java.util.Calendar, java.io.ObjectInputStream)","Calendar$1",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.lang","ClassNotFoundException");
        helper.addThrowsOnMethod(method, "java.io","IOException");
    method = helper.createMethod(newType,"run()","run",false,1);
    helper.createMethodReturnType(method,JavaType.class,"sun.util.calendar","ZoneInfo",false,0);
        helper.addThrowsOnMethod(method, "java.lang","Exception");
    method = helper.createMethod(newType,"run()","run",false,4161);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
        helper.addThrowsOnMethod(method, "java.lang","Exception");
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Calendar$CalendarAccessControlContext",32);
    helper.addExtendsLinks("java.util", "Calendar$CalendarAccessControlContext","java.lang","Object");
    method = helper.createMethod(newType,"access$000()","access$000",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.security","AccessControlContext",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Calendar",1057);
    helper.addExtendsLinks("java.util", "Calendar","java.lang","Object");
    helper.addImplementsLinks("java.util", "Calendar","java.io","Serializable");
    helper.addImplementsLinks("java.util", "Calendar","java.lang","Cloneable");
    helper.addImplementsLinks("java.util", "Calendar","java.lang","Comparable");
    helper.createField(newType,JavaTypePrimitive.class,"","int","ERA",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","YEAR",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","MONTH",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","WEEK_OF_YEAR",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","WEEK_OF_MONTH",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","DATE",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","DAY_OF_MONTH",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","DAY_OF_YEAR",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","DAY_OF_WEEK",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","DAY_OF_WEEK_IN_MONTH",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","AM_PM",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","HOUR",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","HOUR_OF_DAY",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","MINUTE",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","SECOND",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","MILLISECOND",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","ZONE_OFFSET",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","DST_OFFSET",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","FIELD_COUNT",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","SUNDAY",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","MONDAY",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","TUESDAY",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","WEDNESDAY",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","THURSDAY",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","FRIDAY",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","SATURDAY",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","JANUARY",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","FEBRUARY",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","MARCH",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","APRIL",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","MAY",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","JUNE",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","JULY",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","AUGUST",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","SEPTEMBER",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","OCTOBER",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","NOVEMBER",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","DECEMBER",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","UNDECIMBER",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","AM",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","PM",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","long","time",4,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","boolean","isTimeSet",4,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","boolean","areFieldsSet",4,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","boolean","areAllFieldsSet",128,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","ALL_FIELDS",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","currentSerialVersion",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","long","serialVersionUID",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","ERA_MASK",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","YEAR_MASK",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","MONTH_MASK",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","WEEK_OF_YEAR_MASK",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","WEEK_OF_MONTH_MASK",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","DAY_OF_MONTH_MASK",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","DATE_MASK",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","DAY_OF_YEAR_MASK",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","DAY_OF_WEEK_MASK",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","DAY_OF_WEEK_IN_MONTH_MASK",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","AM_PM_MASK",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","HOUR_MASK",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","HOUR_OF_DAY_MASK",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","MINUTE_MASK",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","SECOND_MASK",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","MILLISECOND_MASK",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","ZONE_OFFSET_MASK",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","DST_OFFSET_MASK",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","boolean","$assertionsDisabled",4120,false,0);
    method = helper.createMethod(newType,"Calendar()","Calendar",true,4);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Calendar(java.util.TimeZone, java.util.Locale)","Calendar",true,4);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getInstance()","getInstance",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Calendar",false,0);
    method = helper.createMethod(newType,"getInstance(java.util.TimeZone)","getInstance",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Calendar",false,0);
    method = helper.createMethod(newType,"getInstance(java.util.Locale)","getInstance",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Calendar",false,0);
    method = helper.createMethod(newType,"getInstance(java.util.TimeZone, java.util.Locale)","getInstance",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Calendar",false,0);
    method = helper.createMethod(newType,"getAvailableLocales()","getAvailableLocales",false,41);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.util","Locale",true,1);
    method = helper.createMethod(newType,"computeTime()","computeTime",false,1028);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"computeFields()","computeFields",false,1028);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getTime()","getTime",false,17);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Date",false,0);
    method = helper.createMethod(newType,"setTime(java.util.Date)","setTime",false,17);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getTimeInMillis()","getTimeInMillis",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "long",false,0);
    method = helper.createMethod(newType,"setTimeInMillis(long)","setTimeInMillis",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"get(int)","get",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"internalGet(int)","internalGet",false,20);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"internalSet(int, int)","internalSet",false,16);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"set(int, int)","set",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"set(int, int, int)","set",false,17);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"set(int, int, int, int, int)","set",false,17);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"set(int, int, int, int, int, int)","set",false,17);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,17);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"clear(int)","clear",false,17);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"isSet(int)","isSet",false,17);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"complete()","complete",false,4);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"isExternallySet(int)","isExternallySet",false,16);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"getSetStateFields()","getSetStateFields",false,16);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"setFieldsComputed(int)","setFieldsComputed",false,16);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"setFieldsNormalized(int)","setFieldsNormalized",false,16);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"isPartiallyNormalized()","isPartiallyNormalized",false,16);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"isFullyNormalized()","isFullyNormalized",false,16);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"setUnnormalized()","setUnnormalized",false,16);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"isFieldSet(int, int)","isFieldSet",false,24);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"selectFields()","selectFields",false,16);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"before(java.lang.Object)","before",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"after(java.lang.Object)","after",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"compareTo(java.util.Calendar)","compareTo",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"add(int, int)","add",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"roll(int, boolean)","roll",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"roll(int, int)","roll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"setTimeZone(java.util.TimeZone)","setTimeZone",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getTimeZone()","getTimeZone",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","TimeZone",false,0);
    method = helper.createMethod(newType,"getZone()","getZone",false,0);
    helper.createMethodReturnType(method,JavaType.class,"java.util","TimeZone",false,0);
    method = helper.createMethod(newType,"setZoneShared(boolean)","setZoneShared",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"setLenient(boolean)","setLenient",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"isLenient()","isLenient",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"setFirstDayOfWeek(int)","setFirstDayOfWeek",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getFirstDayOfWeek()","getFirstDayOfWeek",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"setMinimalDaysInFirstWeek(int)","setMinimalDaysInFirstWeek",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getMinimalDaysInFirstWeek()","getMinimalDaysInFirstWeek",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"getMinimum(int)","getMinimum",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"getMaximum(int)","getMaximum",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"getGreatestMinimum(int)","getGreatestMinimum",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"getLeastMaximum(int)","getLeastMaximum",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"getActualMinimum(int)","getActualMinimum",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"getActualMaximum(int)","getActualMaximum",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"getFieldName(int)","getFieldName",false,24);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"compareTo(java.lang.Object)","compareTo",false,4161);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "Collection",1537);
    helper.addExtendsLinks("java.util", "Collection","java.lang","Object");
    helper.addImplementsLinks("java.util", "Collection","java.lang","Iterable");
    method = helper.createMethod(newType,"size()","size",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"toArray()","toArray",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"toArray(java.lang.Object[])","toArray",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsAll(java.util.Collection)","containsAll",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"addAll(java.util.Collection)","addAll",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"removeAll(java.util.Collection)","removeAll",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"retainAll(java.util.Collection)","retainAll",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$1",32);
    helper.addExtendsLinks("java.util", "Collections$1","java.lang","Object");
    helper.addImplementsLinks("java.util", "Collections$1","java.util","Enumeration");
	helper.createField(newType,JavaType.class,"java.util","Iterator","i",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","Collection","val$c",4112,false,0);
    method = helper.createMethod(newType,"Collections$1(java.util.Collection)","Collections$1",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasMoreElements()","hasMoreElements",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"nextElement()","nextElement",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CheckedCollection$1",32);
    helper.addExtendsLinks("java.util", "Collections$CheckedCollection$1","java.lang","Object");
    helper.addImplementsLinks("java.util", "Collections$CheckedCollection$1","java.util","Iterator");
	helper.createField(newType,JavaType.class,"java.util","Collections$CheckedCollection","this$0",4112,false,0);
    method = helper.createMethod(newType,"Collections$CheckedCollection$1(java.util.Collections$CheckedCollection)","Collections$CheckedCollection$1",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CheckedCollection",32);
    helper.addExtendsLinks("java.util", "Collections$CheckedCollection","java.lang","Object");
    helper.addImplementsLinks("java.util", "Collections$CheckedCollection","java.util","Collection");
    helper.addImplementsLinks("java.util", "Collections$CheckedCollection","java.io","Serializable");
	helper.createField(newType,JavaType.class,"java.util","Collection","c",16,false,0);
	helper.createField(newType,JavaType.class,"java.lang","Class","type",16,false,0);
    method = helper.createMethod(newType,"typeCheck(java.lang.Object)","typeCheck",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Collections$CheckedCollection(java.util.Collection, java.lang.Class)","Collections$CheckedCollection",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"toArray()","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"toArray(java.lang.Object[])","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsAll(java.util.Collection)","containsAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"removeAll(java.util.Collection)","removeAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"retainAll(java.util.Collection)","retainAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"addAll(java.util.Collection)","addAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"zeroLengthElementArray()","zeroLengthElementArray",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CheckedList$1",32);
    helper.addExtendsLinks("java.util", "Collections$CheckedList$1","java.lang","Object");
    helper.addImplementsLinks("java.util", "Collections$CheckedList$1","java.util","ListIterator");
	helper.createField(newType,JavaType.class,"java.util","ListIterator","i",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","val$index",4112,false,0);
	helper.createField(newType,JavaType.class,"java.util","Collections$CheckedList","this$0",4112,false,0);
    method = helper.createMethod(newType,"Collections$CheckedList$1(java.util.Collections$CheckedList, int)","Collections$CheckedList$1",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"hasPrevious()","hasPrevious",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"previous()","previous",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"nextIndex()","nextIndex",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"previousIndex()","previousIndex",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"set(java.lang.Object)","set",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CheckedList",32);
    helper.addExtendsLinks("java.util", "Collections$CheckedList","java.util","Collections$CheckedCollection");
    helper.addImplementsLinks("java.util", "Collections$CheckedList","java.util","List");
    helper.createField(newType,JavaTypePrimitive.class,"","long","serialVersionUID",24,false,0);
	helper.createField(newType,JavaType.class,"java.util","List","list",16,false,0);
    method = helper.createMethod(newType,"Collections$CheckedList(java.util.List, java.lang.Class)","Collections$CheckedList",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"get(int)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"remove(int)","remove",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"indexOf(java.lang.Object)","indexOf",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"lastIndexOf(java.lang.Object)","lastIndexOf",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"set(int, java.lang.Object)","set",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"add(int, java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"addAll(int, java.util.Collection)","addAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"listIterator()","listIterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","ListIterator",false,0);
    method = helper.createMethod(newType,"listIterator(int)","listIterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","ListIterator",false,0);
    method = helper.createMethod(newType,"subList(int, int)","subList",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","List",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CheckedMap$CheckedEntrySet$1",32);
    helper.addExtendsLinks("java.util", "Collections$CheckedMap$CheckedEntrySet$1","java.lang","Object");
    helper.addImplementsLinks("java.util", "Collections$CheckedMap$CheckedEntrySet$1","java.util","Iterator");
	helper.createField(newType,JavaType.class,"java.util","Iterator","i",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","Collections$CheckedMap$CheckedEntrySet","this$0",4112,false,0);
    method = helper.createMethod(newType,"Collections$CheckedMap$CheckedEntrySet$1(java.util.Collections$CheckedMap$CheckedEntrySet)","Collections$CheckedMap$CheckedEntrySet$1",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Map$Entry",false,0);
    method = helper.createMethod(newType,"next()","next",false,4161);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CheckedMap$CheckedEntrySet$CheckedEntry",32);
    helper.addExtendsLinks("java.util", "Collections$CheckedMap$CheckedEntrySet$CheckedEntry","java.lang","Object");
    helper.addImplementsLinks("java.util", "Collections$CheckedMap$CheckedEntrySet$CheckedEntry","java.util","Map$Entry");
    method = helper.createMethod(newType,"Collections$CheckedMap$CheckedEntrySet$CheckedEntry(java.util.Map$Entry, java.lang.Class)","Collections$CheckedMap$CheckedEntrySet$CheckedEntry",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getKey()","getKey",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"getValue()","getValue",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"setValue(java.lang.Object)","setValue",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CheckedMap$CheckedEntrySet",32);
    helper.addExtendsLinks("java.util", "Collections$CheckedMap$CheckedEntrySet","java.lang","Object");
    helper.addImplementsLinks("java.util", "Collections$CheckedMap$CheckedEntrySet","java.util","Set");
	helper.createField(newType,JavaType.class,"java.util","Set","s",0,false,0);
	helper.createField(newType,JavaType.class,"java.lang","Class","valueType",0,false,0);
    method = helper.createMethod(newType,"Collections$CheckedMap$CheckedEntrySet(java.util.Set, java.lang.Class)","Collections$CheckedMap$CheckedEntrySet",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"removeAll(java.util.Collection)","removeAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"retainAll(java.util.Collection)","retainAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"add(java.util.Map$Entry)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"addAll(java.util.Collection)","addAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"toArray()","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"toArray(java.lang.Object[])","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsAll(java.util.Collection)","containsAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,4161);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CheckedMap",32);
    helper.addExtendsLinks("java.util", "Collections$CheckedMap","java.lang","Object");
    helper.addImplementsLinks("java.util", "Collections$CheckedMap","java.util","Map");
    helper.addImplementsLinks("java.util", "Collections$CheckedMap","java.io","Serializable");
	helper.createField(newType,JavaType.class,"java.lang","Class","keyType",16,false,0);
	helper.createField(newType,JavaType.class,"java.lang","Class","valueType",16,false,0);
    method = helper.createMethod(newType,"Collections$CheckedMap(java.util.Map, java.lang.Class, java.lang.Class)","Collections$CheckedMap",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsKey(java.lang.Object)","containsKey",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsValue(java.lang.Object)","containsValue",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"get(java.lang.Object)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"keySet()","keySet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"values()","values",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Collection",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"put(java.lang.Object, java.lang.Object)","put",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"putAll(java.util.Map)","putAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"entrySet()","entrySet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CheckedRandomAccessList",32);
    helper.addExtendsLinks("java.util", "Collections$CheckedRandomAccessList","java.util","Collections$CheckedList");
    helper.addImplementsLinks("java.util", "Collections$CheckedRandomAccessList","java.util","RandomAccess");
    method = helper.createMethod(newType,"Collections$CheckedRandomAccessList(java.util.List, java.lang.Class)","Collections$CheckedRandomAccessList",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"subList(int, int)","subList",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","List",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CheckedSet",32);
    helper.addExtendsLinks("java.util", "Collections$CheckedSet","java.util","Collections$CheckedCollection");
    helper.addImplementsLinks("java.util", "Collections$CheckedSet","java.util","Set");
    helper.addImplementsLinks("java.util", "Collections$CheckedSet","java.io","Serializable");
    method = helper.createMethod(newType,"Collections$CheckedSet(java.util.Set, java.lang.Class)","Collections$CheckedSet",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CheckedSortedMap",32);
    helper.addExtendsLinks("java.util", "Collections$CheckedSortedMap","java.util","Collections$CheckedMap");
    helper.addImplementsLinks("java.util", "Collections$CheckedSortedMap","java.util","SortedMap");
    helper.addImplementsLinks("java.util", "Collections$CheckedSortedMap","java.io","Serializable");
    method = helper.createMethod(newType,"Collections$CheckedSortedMap(java.util.SortedMap, java.lang.Class, java.lang.Class)","Collections$CheckedSortedMap",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"comparator()","comparator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Comparator",false,0);
    method = helper.createMethod(newType,"firstKey()","firstKey",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"lastKey()","lastKey",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"subMap(java.lang.Object, java.lang.Object)","subMap",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedMap",false,0);
    method = helper.createMethod(newType,"headMap(java.lang.Object)","headMap",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedMap",false,0);
    method = helper.createMethod(newType,"tailMap(java.lang.Object)","tailMap",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedMap",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CheckedSortedSet",32);
    helper.addExtendsLinks("java.util", "Collections$CheckedSortedSet","java.util","Collections$CheckedSet");
    helper.addImplementsLinks("java.util", "Collections$CheckedSortedSet","java.util","SortedSet");
    helper.addImplementsLinks("java.util", "Collections$CheckedSortedSet","java.io","Serializable");
    method = helper.createMethod(newType,"Collections$CheckedSortedSet(java.util.SortedSet, java.lang.Class)","Collections$CheckedSortedSet",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"comparator()","comparator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Comparator",false,0);
    method = helper.createMethod(newType,"first()","first",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"last()","last",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"subSet(java.lang.Object, java.lang.Object)","subSet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedSet",false,0);
    method = helper.createMethod(newType,"headSet(java.lang.Object)","headSet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedSet",false,0);
    method = helper.createMethod(newType,"tailSet(java.lang.Object)","tailSet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedSet",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CopiesList",32);
    helper.addExtendsLinks("java.util", "Collections$CopiesList","java.util","AbstractList");
    helper.addImplementsLinks("java.util", "Collections$CopiesList","java.util","RandomAccess");
    helper.addImplementsLinks("java.util", "Collections$CopiesList","java.io","Serializable");
    helper.createField(newType,JavaTypePrimitive.class,"","long","serialVersionUID",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","n",0,false,0);
	helper.createField(newType,JavaType.class,"java.lang","Object","element",0,false,0);
    method = helper.createMethod(newType,"Collections$CopiesList(int, java.lang.Object)","Collections$CopiesList",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"get(int)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$EmptyList",32);
    helper.addExtendsLinks("java.util", "Collections$EmptyList","java.util","AbstractList");
    helper.addImplementsLinks("java.util", "Collections$EmptyList","java.util","RandomAccess");
    helper.addImplementsLinks("java.util", "Collections$EmptyList","java.io","Serializable");
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"get(int)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"Collections$EmptyList(java.util.Collections$1)","Collections$EmptyList",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$EmptyMap",32);
    helper.addExtendsLinks("java.util", "Collections$EmptyMap","java.util","AbstractMap");
    helper.addImplementsLinks("java.util", "Collections$EmptyMap","java.io","Serializable");
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsKey(java.lang.Object)","containsKey",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsValue(java.lang.Object)","containsValue",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"get(java.lang.Object)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"keySet()","keySet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"values()","values",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Collection",false,0);
    method = helper.createMethod(newType,"entrySet()","entrySet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"Collections$EmptyMap(java.util.Collections$1)","Collections$EmptyMap",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$EmptySet$1",32);
    helper.addExtendsLinks("java.util", "Collections$EmptySet$1","java.lang","Object");
    helper.addImplementsLinks("java.util", "Collections$EmptySet$1","java.util","Iterator");
	helper.createField(newType,JavaType.class,"java.util","Collections$EmptySet","this$0",4112,false,0);
    method = helper.createMethod(newType,"Collections$EmptySet$1(java.util.Collections$EmptySet)","Collections$EmptySet$1",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$EmptySet",32);
    helper.addExtendsLinks("java.util", "Collections$EmptySet","java.util","AbstractSet");
    helper.addImplementsLinks("java.util", "Collections$EmptySet","java.io","Serializable");
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"Collections$EmptySet(java.util.Collections$1)","Collections$EmptySet",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$ReverseComparator",32);
    helper.addExtendsLinks("java.util", "Collections$ReverseComparator","java.lang","Object");
    helper.addImplementsLinks("java.util", "Collections$ReverseComparator","java.util","Comparator");
    helper.addImplementsLinks("java.util", "Collections$ReverseComparator","java.io","Serializable");
    method = helper.createMethod(newType,"compare(java.lang.Comparable, java.lang.Comparable)","compare",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"compare(java.lang.Object, java.lang.Object)","compare",false,4161);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"Collections$ReverseComparator(java.util.Collections$1)","Collections$ReverseComparator",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$ReverseComparator2",32);
    helper.addExtendsLinks("java.util", "Collections$ReverseComparator2","java.lang","Object");
    helper.addImplementsLinks("java.util", "Collections$ReverseComparator2","java.util","Comparator");
    helper.addImplementsLinks("java.util", "Collections$ReverseComparator2","java.io","Serializable");
    helper.createField(newType,JavaTypePrimitive.class,"","boolean","$assertionsDisabled",4120,false,0);
    method = helper.createMethod(newType,"Collections$ReverseComparator2(java.util.Comparator)","Collections$ReverseComparator2",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"compare(java.lang.Object, java.lang.Object)","compare",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "Collections$SelfComparable",1536);
    helper.addExtendsLinks("java.util", "Collections$SelfComparable","java.lang","Object");
    helper.addImplementsLinks("java.util", "Collections$SelfComparable","java.lang","Comparable");
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$SingletonList",32);
    helper.addExtendsLinks("java.util", "Collections$SingletonList","java.util","AbstractList");
    helper.addImplementsLinks("java.util", "Collections$SingletonList","java.util","RandomAccess");
    helper.addImplementsLinks("java.util", "Collections$SingletonList","java.io","Serializable");
    helper.createField(newType,JavaTypePrimitive.class,"","long","serialVersionUID",24,false,0);
    method = helper.createMethod(newType,"Collections$SingletonList(java.lang.Object)","Collections$SingletonList",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"get(int)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$SingletonMap$ImmutableEntry",32);
    helper.addExtendsLinks("java.util", "Collections$SingletonMap$ImmutableEntry","java.lang","Object");
    helper.addImplementsLinks("java.util", "Collections$SingletonMap$ImmutableEntry","java.util","Map$Entry");
	helper.createField(newType,JavaType.class,"java.lang","Object","k",16,false,0);
	helper.createField(newType,JavaType.class,"java.lang","Object","v",16,false,0);
    method = helper.createMethod(newType,"Collections$SingletonMap$ImmutableEntry(java.lang.Object, java.lang.Object)","Collections$SingletonMap$ImmutableEntry",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getKey()","getKey",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"getValue()","getValue",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"setValue(java.lang.Object)","setValue",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$SingletonMap",32);
    helper.addExtendsLinks("java.util", "Collections$SingletonMap","java.util","AbstractMap");
    helper.addImplementsLinks("java.util", "Collections$SingletonMap","java.io","Serializable");
    method = helper.createMethod(newType,"Collections$SingletonMap(java.lang.Object, java.lang.Object)","Collections$SingletonMap",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsKey(java.lang.Object)","containsKey",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsValue(java.lang.Object)","containsValue",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"get(java.lang.Object)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"keySet()","keySet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"entrySet()","entrySet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"values()","values",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Collection",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$SingletonSet$1",32);
    helper.addExtendsLinks("java.util", "Collections$SingletonSet$1","java.lang","Object");
    helper.addImplementsLinks("java.util", "Collections$SingletonSet$1","java.util","Iterator");
	helper.createField(newType,JavaType.class,"java.util","Collections$SingletonSet","this$0",4112,false,0);
    method = helper.createMethod(newType,"Collections$SingletonSet$1(java.util.Collections$SingletonSet)","Collections$SingletonSet$1",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$SingletonSet",32);
    helper.addExtendsLinks("java.util", "Collections$SingletonSet","java.util","AbstractSet");
    helper.addImplementsLinks("java.util", "Collections$SingletonSet","java.io","Serializable");
    method = helper.createMethod(newType,"Collections$SingletonSet(java.lang.Object)","Collections$SingletonSet",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"access$400(java.util.Collections$SingletonSet)","access$400",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$SynchronizedCollection",32);
    helper.addExtendsLinks("java.util", "Collections$SynchronizedCollection","java.lang","Object");
    helper.addImplementsLinks("java.util", "Collections$SynchronizedCollection","java.util","Collection");
    helper.addImplementsLinks("java.util", "Collections$SynchronizedCollection","java.io","Serializable");
	helper.createField(newType,JavaType.class,"java.util","Collection","c",0,false,0);
	helper.createField(newType,JavaType.class,"java.lang","Object","mutex",0,false,0);
    method = helper.createMethod(newType,"Collections$SynchronizedCollection(java.util.Collection)","Collections$SynchronizedCollection",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Collections$SynchronizedCollection(java.util.Collection, java.lang.Object)","Collections$SynchronizedCollection",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"toArray()","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"toArray(java.lang.Object[])","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsAll(java.util.Collection)","containsAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"addAll(java.util.Collection)","addAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"removeAll(java.util.Collection)","removeAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"retainAll(java.util.Collection)","retainAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$SynchronizedList",32);
    helper.addExtendsLinks("java.util", "Collections$SynchronizedList","java.util","Collections$SynchronizedCollection");
    helper.addImplementsLinks("java.util", "Collections$SynchronizedList","java.util","List");
    helper.createField(newType,JavaTypePrimitive.class,"","long","serialVersionUID",24,false,0);
	helper.createField(newType,JavaType.class,"java.util","List","list",0,false,0);
    method = helper.createMethod(newType,"Collections$SynchronizedList(java.util.List)","Collections$SynchronizedList",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Collections$SynchronizedList(java.util.List, java.lang.Object)","Collections$SynchronizedList",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"get(int)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"set(int, java.lang.Object)","set",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"add(int, java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"remove(int)","remove",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"indexOf(java.lang.Object)","indexOf",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"lastIndexOf(java.lang.Object)","lastIndexOf",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"addAll(int, java.util.Collection)","addAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"listIterator()","listIterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","ListIterator",false,0);
    method = helper.createMethod(newType,"listIterator(int)","listIterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","ListIterator",false,0);
    method = helper.createMethod(newType,"subList(int, int)","subList",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","List",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$SynchronizedMap",32);
    helper.addExtendsLinks("java.util", "Collections$SynchronizedMap","java.lang","Object");
    helper.addImplementsLinks("java.util", "Collections$SynchronizedMap","java.util","Map");
    helper.addImplementsLinks("java.util", "Collections$SynchronizedMap","java.io","Serializable");
	helper.createField(newType,JavaType.class,"java.lang","Object","mutex",0,false,0);
    method = helper.createMethod(newType,"Collections$SynchronizedMap(java.util.Map)","Collections$SynchronizedMap",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Collections$SynchronizedMap(java.util.Map, java.lang.Object)","Collections$SynchronizedMap",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsKey(java.lang.Object)","containsKey",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsValue(java.lang.Object)","containsValue",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"get(java.lang.Object)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"put(java.lang.Object, java.lang.Object)","put",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"putAll(java.util.Map)","putAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"keySet()","keySet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"entrySet()","entrySet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"values()","values",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Collection",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$SynchronizedRandomAccessList",32);
    helper.addExtendsLinks("java.util", "Collections$SynchronizedRandomAccessList","java.util","Collections$SynchronizedList");
    helper.addImplementsLinks("java.util", "Collections$SynchronizedRandomAccessList","java.util","RandomAccess");
    helper.createField(newType,JavaTypePrimitive.class,"","long","serialVersionUID",24,false,0);
    method = helper.createMethod(newType,"Collections$SynchronizedRandomAccessList(java.util.List)","Collections$SynchronizedRandomAccessList",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Collections$SynchronizedRandomAccessList(java.util.List, java.lang.Object)","Collections$SynchronizedRandomAccessList",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"subList(int, int)","subList",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","List",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$SynchronizedSet",32);
    helper.addExtendsLinks("java.util", "Collections$SynchronizedSet","java.util","Collections$SynchronizedCollection");
    helper.addImplementsLinks("java.util", "Collections$SynchronizedSet","java.util","Set");
    method = helper.createMethod(newType,"Collections$SynchronizedSet(java.util.Set)","Collections$SynchronizedSet",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Collections$SynchronizedSet(java.util.Set, java.lang.Object)","Collections$SynchronizedSet",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$SynchronizedSortedMap",32);
    helper.addExtendsLinks("java.util", "Collections$SynchronizedSortedMap","java.util","Collections$SynchronizedMap");
    helper.addImplementsLinks("java.util", "Collections$SynchronizedSortedMap","java.util","SortedMap");
    method = helper.createMethod(newType,"Collections$SynchronizedSortedMap(java.util.SortedMap)","Collections$SynchronizedSortedMap",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Collections$SynchronizedSortedMap(java.util.SortedMap, java.lang.Object)","Collections$SynchronizedSortedMap",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"comparator()","comparator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Comparator",false,0);
    method = helper.createMethod(newType,"subMap(java.lang.Object, java.lang.Object)","subMap",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedMap",false,0);
    method = helper.createMethod(newType,"headMap(java.lang.Object)","headMap",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedMap",false,0);
    method = helper.createMethod(newType,"tailMap(java.lang.Object)","tailMap",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedMap",false,0);
    method = helper.createMethod(newType,"firstKey()","firstKey",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"lastKey()","lastKey",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$SynchronizedSortedSet",32);
    helper.addExtendsLinks("java.util", "Collections$SynchronizedSortedSet","java.util","Collections$SynchronizedSet");
    helper.addImplementsLinks("java.util", "Collections$SynchronizedSortedSet","java.util","SortedSet");
    method = helper.createMethod(newType,"Collections$SynchronizedSortedSet(java.util.SortedSet)","Collections$SynchronizedSortedSet",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Collections$SynchronizedSortedSet(java.util.SortedSet, java.lang.Object)","Collections$SynchronizedSortedSet",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"comparator()","comparator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Comparator",false,0);
    method = helper.createMethod(newType,"subSet(java.lang.Object, java.lang.Object)","subSet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedSet",false,0);
    method = helper.createMethod(newType,"headSet(java.lang.Object)","headSet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedSet",false,0);
    method = helper.createMethod(newType,"tailSet(java.lang.Object)","tailSet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedSet",false,0);
    method = helper.createMethod(newType,"first()","first",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"last()","last",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$UnmodifiableCollection$1",32);
    helper.addExtendsLinks("java.util", "Collections$UnmodifiableCollection$1","java.lang","Object");
    helper.addImplementsLinks("java.util", "Collections$UnmodifiableCollection$1","java.util","Iterator");
	helper.createField(newType,JavaType.class,"java.util","Iterator","i",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","Collections$UnmodifiableCollection","this$0",4112,false,0);
    method = helper.createMethod(newType,"Collections$UnmodifiableCollection$1(java.util.Collections$UnmodifiableCollection)","Collections$UnmodifiableCollection$1",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$UnmodifiableCollection",32);
    helper.addExtendsLinks("java.util", "Collections$UnmodifiableCollection","java.lang","Object");
    helper.addImplementsLinks("java.util", "Collections$UnmodifiableCollection","java.util","Collection");
    helper.addImplementsLinks("java.util", "Collections$UnmodifiableCollection","java.io","Serializable");
	helper.createField(newType,JavaType.class,"java.util","Collection","c",0,false,0);
    method = helper.createMethod(newType,"Collections$UnmodifiableCollection(java.util.Collection)","Collections$UnmodifiableCollection",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"toArray()","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"toArray(java.lang.Object[])","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsAll(java.util.Collection)","containsAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"addAll(java.util.Collection)","addAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"removeAll(java.util.Collection)","removeAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"retainAll(java.util.Collection)","retainAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$UnmodifiableList$1",32);
    helper.addExtendsLinks("java.util", "Collections$UnmodifiableList$1","java.lang","Object");
    helper.addImplementsLinks("java.util", "Collections$UnmodifiableList$1","java.util","ListIterator");
	helper.createField(newType,JavaType.class,"java.util","ListIterator","i",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","val$index",4112,false,0);
	helper.createField(newType,JavaType.class,"java.util","Collections$UnmodifiableList","this$0",4112,false,0);
    method = helper.createMethod(newType,"Collections$UnmodifiableList$1(java.util.Collections$UnmodifiableList, int)","Collections$UnmodifiableList$1",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"hasPrevious()","hasPrevious",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"previous()","previous",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"nextIndex()","nextIndex",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"previousIndex()","previousIndex",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"set(java.lang.Object)","set",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$UnmodifiableList",32);
    helper.addExtendsLinks("java.util", "Collections$UnmodifiableList","java.util","Collections$UnmodifiableCollection");
    helper.addImplementsLinks("java.util", "Collections$UnmodifiableList","java.util","List");
    helper.createField(newType,JavaTypePrimitive.class,"","long","serialVersionUID",24,false,0);
	helper.createField(newType,JavaType.class,"java.util","List","list",0,false,0);
    method = helper.createMethod(newType,"Collections$UnmodifiableList(java.util.List)","Collections$UnmodifiableList",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"get(int)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"set(int, java.lang.Object)","set",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"add(int, java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"remove(int)","remove",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"indexOf(java.lang.Object)","indexOf",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"lastIndexOf(java.lang.Object)","lastIndexOf",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"addAll(int, java.util.Collection)","addAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"listIterator()","listIterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","ListIterator",false,0);
    method = helper.createMethod(newType,"listIterator(int)","listIterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","ListIterator",false,0);
    method = helper.createMethod(newType,"subList(int, int)","subList",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","List",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$UnmodifiableMap$UnmodifiableEntrySet$1",32);
    helper.addExtendsLinks("java.util", "Collections$UnmodifiableMap$UnmodifiableEntrySet$1","java.lang","Object");
    helper.addImplementsLinks("java.util", "Collections$UnmodifiableMap$UnmodifiableEntrySet$1","java.util","Iterator");
	helper.createField(newType,JavaType.class,"java.util","Iterator","i",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","Collections$UnmodifiableMap$UnmodifiableEntrySet","this$0",4112,false,0);
    method = helper.createMethod(newType,"Collections$UnmodifiableMap$UnmodifiableEntrySet$1(java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet)","Collections$UnmodifiableMap$UnmodifiableEntrySet$1",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Map$Entry",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"next()","next",false,4161);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry",32);
    helper.addExtendsLinks("java.util", "Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry","java.lang","Object");
    helper.addImplementsLinks("java.util", "Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry","java.util","Map$Entry");
    method = helper.createMethod(newType,"Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry(java.util.Map$Entry)","Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getKey()","getKey",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"getValue()","getValue",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"setValue(java.lang.Object)","setValue",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$UnmodifiableMap$UnmodifiableEntrySet",32);
    helper.addExtendsLinks("java.util", "Collections$UnmodifiableMap$UnmodifiableEntrySet","java.util","Collections$UnmodifiableSet");
    method = helper.createMethod(newType,"Collections$UnmodifiableMap$UnmodifiableEntrySet(java.util.Set)","Collections$UnmodifiableMap$UnmodifiableEntrySet",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"toArray()","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"toArray(java.lang.Object[])","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsAll(java.util.Collection)","containsAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$UnmodifiableMap",32);
    helper.addExtendsLinks("java.util", "Collections$UnmodifiableMap","java.lang","Object");
    helper.addImplementsLinks("java.util", "Collections$UnmodifiableMap","java.util","Map");
    helper.addImplementsLinks("java.util", "Collections$UnmodifiableMap","java.io","Serializable");
    method = helper.createMethod(newType,"Collections$UnmodifiableMap(java.util.Map)","Collections$UnmodifiableMap",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsKey(java.lang.Object)","containsKey",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsValue(java.lang.Object)","containsValue",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"get(java.lang.Object)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"put(java.lang.Object, java.lang.Object)","put",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"putAll(java.util.Map)","putAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"keySet()","keySet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"entrySet()","entrySet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"values()","values",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Collection",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$UnmodifiableRandomAccessList",32);
    helper.addExtendsLinks("java.util", "Collections$UnmodifiableRandomAccessList","java.util","Collections$UnmodifiableList");
    helper.addImplementsLinks("java.util", "Collections$UnmodifiableRandomAccessList","java.util","RandomAccess");
    method = helper.createMethod(newType,"Collections$UnmodifiableRandomAccessList(java.util.List)","Collections$UnmodifiableRandomAccessList",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"subList(int, int)","subList",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","List",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$UnmodifiableSet",32);
    helper.addExtendsLinks("java.util", "Collections$UnmodifiableSet","java.util","Collections$UnmodifiableCollection");
    helper.addImplementsLinks("java.util", "Collections$UnmodifiableSet","java.util","Set");
    helper.addImplementsLinks("java.util", "Collections$UnmodifiableSet","java.io","Serializable");
    method = helper.createMethod(newType,"Collections$UnmodifiableSet(java.util.Set)","Collections$UnmodifiableSet",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$UnmodifiableSortedMap",32);
    helper.addExtendsLinks("java.util", "Collections$UnmodifiableSortedMap","java.util","Collections$UnmodifiableMap");
    helper.addImplementsLinks("java.util", "Collections$UnmodifiableSortedMap","java.util","SortedMap");
    helper.addImplementsLinks("java.util", "Collections$UnmodifiableSortedMap","java.io","Serializable");
    method = helper.createMethod(newType,"Collections$UnmodifiableSortedMap(java.util.SortedMap)","Collections$UnmodifiableSortedMap",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"comparator()","comparator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Comparator",false,0);
    method = helper.createMethod(newType,"subMap(java.lang.Object, java.lang.Object)","subMap",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedMap",false,0);
    method = helper.createMethod(newType,"headMap(java.lang.Object)","headMap",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedMap",false,0);
    method = helper.createMethod(newType,"tailMap(java.lang.Object)","tailMap",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedMap",false,0);
    method = helper.createMethod(newType,"firstKey()","firstKey",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"lastKey()","lastKey",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$UnmodifiableSortedSet",32);
    helper.addExtendsLinks("java.util", "Collections$UnmodifiableSortedSet","java.util","Collections$UnmodifiableSet");
    helper.addImplementsLinks("java.util", "Collections$UnmodifiableSortedSet","java.util","SortedSet");
    helper.addImplementsLinks("java.util", "Collections$UnmodifiableSortedSet","java.io","Serializable");
    method = helper.createMethod(newType,"Collections$UnmodifiableSortedSet(java.util.SortedSet)","Collections$UnmodifiableSortedSet",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"comparator()","comparator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Comparator",false,0);
    method = helper.createMethod(newType,"subSet(java.lang.Object, java.lang.Object)","subSet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedSet",false,0);
    method = helper.createMethod(newType,"headSet(java.lang.Object)","headSet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedSet",false,0);
    method = helper.createMethod(newType,"tailSet(java.lang.Object)","tailSet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedSet",false,0);
    method = helper.createMethod(newType,"first()","first",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"last()","last",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections",33);
    helper.addExtendsLinks("java.util", "Collections","java.lang","Object");
	helper.createField(newType,JavaType.class,"java.util","Set","EMPTY_SET",25,false,0);
	helper.createField(newType,JavaType.class,"java.util","List","EMPTY_LIST",25,false,0);
	helper.createField(newType,JavaType.class,"java.util","Map","EMPTY_MAP",25,false,0);
    method = helper.createMethod(newType,"sort(java.util.List)","sort",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"sort(java.util.List, java.util.Comparator)","sort",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"binarySearch(java.util.List, java.lang.Object)","binarySearch",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"binarySearch(java.util.List, java.lang.Object, java.util.Comparator)","binarySearch",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"reverse(java.util.List)","reverse",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"shuffle(java.util.List)","shuffle",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"shuffle(java.util.List, java.util.Random)","shuffle",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"swap(java.util.List, int, int)","swap",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"fill(java.util.List, java.lang.Object)","fill",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"copy(java.util.List, java.util.List)","copy",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"min(java.util.Collection)","min",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"min(java.util.Collection, java.util.Comparator)","min",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"max(java.util.Collection)","max",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"max(java.util.Collection, java.util.Comparator)","max",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"rotate(java.util.List, int)","rotate",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"replaceAll(java.util.List, java.lang.Object, java.lang.Object)","replaceAll",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"indexOfSubList(java.util.List, java.util.List)","indexOfSubList",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"lastIndexOfSubList(java.util.List, java.util.List)","lastIndexOfSubList",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"unmodifiableCollection(java.util.Collection)","unmodifiableCollection",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Collection",false,0);
    method = helper.createMethod(newType,"unmodifiableSet(java.util.Set)","unmodifiableSet",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"unmodifiableSortedSet(java.util.SortedSet)","unmodifiableSortedSet",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedSet",false,0);
    method = helper.createMethod(newType,"unmodifiableList(java.util.List)","unmodifiableList",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","List",false,0);
    method = helper.createMethod(newType,"unmodifiableMap(java.util.Map)","unmodifiableMap",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Map",false,0);
    method = helper.createMethod(newType,"unmodifiableSortedMap(java.util.SortedMap)","unmodifiableSortedMap",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedMap",false,0);
    method = helper.createMethod(newType,"synchronizedCollection(java.util.Collection)","synchronizedCollection",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Collection",false,0);
    method = helper.createMethod(newType,"synchronizedCollection(java.util.Collection, java.lang.Object)","synchronizedCollection",false,8);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Collection",false,0);
    method = helper.createMethod(newType,"synchronizedSet(java.util.Set)","synchronizedSet",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"synchronizedSet(java.util.Set, java.lang.Object)","synchronizedSet",false,8);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"synchronizedSortedSet(java.util.SortedSet)","synchronizedSortedSet",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedSet",false,0);
    method = helper.createMethod(newType,"synchronizedList(java.util.List)","synchronizedList",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","List",false,0);
    method = helper.createMethod(newType,"synchronizedList(java.util.List, java.lang.Object)","synchronizedList",false,8);
    helper.createMethodReturnType(method,JavaType.class,"java.util","List",false,0);
    method = helper.createMethod(newType,"synchronizedMap(java.util.Map)","synchronizedMap",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Map",false,0);
    method = helper.createMethod(newType,"synchronizedSortedMap(java.util.SortedMap)","synchronizedSortedMap",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedMap",false,0);
    method = helper.createMethod(newType,"checkedCollection(java.util.Collection, java.lang.Class)","checkedCollection",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Collection",false,0);
    method = helper.createMethod(newType,"checkedSet(java.util.Set, java.lang.Class)","checkedSet",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"checkedSortedSet(java.util.SortedSet, java.lang.Class)","checkedSortedSet",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedSet",false,0);
    method = helper.createMethod(newType,"checkedList(java.util.List, java.lang.Class)","checkedList",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","List",false,0);
    method = helper.createMethod(newType,"checkedMap(java.util.Map, java.lang.Class, java.lang.Class)","checkedMap",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Map",false,0);
    method = helper.createMethod(newType,"checkedSortedMap(java.util.SortedMap, java.lang.Class, java.lang.Class)","checkedSortedMap",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedMap",false,0);
    method = helper.createMethod(newType,"emptySet()","emptySet",false,25);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"emptyList()","emptyList",false,25);
    helper.createMethodReturnType(method,JavaType.class,"java.util","List",false,0);
    method = helper.createMethod(newType,"emptyMap()","emptyMap",false,25);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Map",false,0);
    method = helper.createMethod(newType,"singleton(java.lang.Object)","singleton",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"singletonList(java.lang.Object)","singletonList",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","List",false,0);
    method = helper.createMethod(newType,"singletonMap(java.lang.Object, java.lang.Object)","singletonMap",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Map",false,0);
    method = helper.createMethod(newType,"nCopies(int, java.lang.Object)","nCopies",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","List",false,0);
    method = helper.createMethod(newType,"reverseOrder()","reverseOrder",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Comparator",false,0);
    method = helper.createMethod(newType,"reverseOrder(java.util.Comparator)","reverseOrder",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Comparator",false,0);
    method = helper.createMethod(newType,"enumeration(java.util.Collection)","enumeration",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Enumeration",false,0);
    method = helper.createMethod(newType,"list(java.util.Enumeration)","list",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","ArrayList",false,0);
    method = helper.createMethod(newType,"frequency(java.util.Collection, java.lang.Object)","frequency",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"disjoint(java.util.Collection, java.util.Collection)","disjoint",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"addAll(java.util.Collection, java.lang.Object[])","addAll",false,137);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"access$000(java.lang.Object, java.lang.Object)","access$000",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "Comparator",1537);
    helper.addExtendsLinks("java.util", "Comparator","java.lang","Object");
    method = helper.createMethod(newType,"compare(java.lang.Object, java.lang.Object)","compare",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "ConcurrentModificationException",33);
    helper.addExtendsLinks("java.util", "ConcurrentModificationException","java.lang","RuntimeException");
    method = helper.createMethod(newType,"ConcurrentModificationException()","ConcurrentModificationException",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"ConcurrentModificationException(java.lang.String)","ConcurrentModificationException",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Currency$1",32);
    helper.addExtendsLinks("java.util", "Currency$1","java.lang","Object");
    helper.addImplementsLinks("java.util", "Currency$1","java.security","PrivilegedAction");
    method = helper.createMethod(newType,"Currency$1()","Currency$1",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"run()","run",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Currency",49);
    helper.addExtendsLinks("java.util", "Currency","java.lang","Object");
    helper.addImplementsLinks("java.util", "Currency","java.io","Serializable");
	helper.createField(newType,JavaType.class,"java.lang","String","mainTable",8,false,0);
	helper.createField(newType,JavaType.class,"java.lang","String","otherCurrencies",8,false,0);
    method = helper.createMethod(newType,"getInstance(java.lang.String)","getInstance",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Currency",false,0);
    method = helper.createMethod(newType,"getInstance(java.util.Locale)","getInstance",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Currency",false,0);
    method = helper.createMethod(newType,"getCurrencyCode()","getCurrencyCode",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getSymbol()","getSymbol",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getSymbol(java.util.Locale)","getSymbol",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getDefaultFractionDigits()","getDefaultFractionDigits",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "CurrencyData",32);
    helper.addExtendsLinks("java.util", "CurrencyData","java.lang","Object");
	helper.createField(newType,JavaType.class,"java.lang","String","mainTable",24,false,0);
	helper.createField(newType,JavaType.class,"java.lang","String","otherCurrencies",24,false,0);
    method = helper.createMethod(newType,"CurrencyData()","CurrencyData",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Date",33);
    helper.addExtendsLinks("java.util", "Date","java.lang","Object");
    helper.addImplementsLinks("java.util", "Date","java.io","Serializable");
    helper.addImplementsLinks("java.util", "Date","java.lang","Cloneable");
    helper.addImplementsLinks("java.util", "Date","java.lang","Comparable");
    method = helper.createMethod(newType,"Date()","Date",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Date(long)","Date",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Date(int, int, int)","Date",true,131073);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Date(int, int, int, int, int)","Date",true,131073);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Date(int, int, int, int, int, int)","Date",true,131073);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Date(java.lang.String)","Date",true,131073);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"UTC(int, int, int, int, int, int)","UTC",false,131081);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "long",false,0);
    method = helper.createMethod(newType,"parse(java.lang.String)","parse",false,131081);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "long",false,0);
    method = helper.createMethod(newType,"getYear()","getYear",false,131073);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"setYear(int)","setYear",false,131073);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getMonth()","getMonth",false,131073);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"setMonth(int)","setMonth",false,131073);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getDate()","getDate",false,131073);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"setDate(int)","setDate",false,131073);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getDay()","getDay",false,131073);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"getHours()","getHours",false,131073);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"setHours(int)","setHours",false,131073);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getMinutes()","getMinutes",false,131073);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"setMinutes(int)","setMinutes",false,131073);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getSeconds()","getSeconds",false,131073);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"setSeconds(int)","setSeconds",false,131073);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getTime()","getTime",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "long",false,0);
    method = helper.createMethod(newType,"setTime(long)","setTime",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"before(java.util.Date)","before",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"after(java.util.Date)","after",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"getMillisOf(java.util.Date)","getMillisOf",false,24);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "long",false,0);
    method = helper.createMethod(newType,"compareTo(java.util.Date)","compareTo",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"toLocaleString()","toLocaleString",false,131073);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"toGMTString()","toGMTString",false,131073);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getTimezoneOffset()","getTimezoneOffset",false,131073);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"compareTo(java.lang.Object)","compareTo",false,4161);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Dictionary",1057);
    helper.addExtendsLinks("java.util", "Dictionary","java.lang","Object");
    method = helper.createMethod(newType,"Dictionary()","Dictionary",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"size()","size",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"keys()","keys",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Enumeration",false,0);
    method = helper.createMethod(newType,"elements()","elements",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Enumeration",false,0);
    method = helper.createMethod(newType,"get(java.lang.Object)","get",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"put(java.lang.Object, java.lang.Object)","put",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "DuplicateFormatFlagsException",33);
    helper.addExtendsLinks("java.util", "DuplicateFormatFlagsException","java.util","IllegalFormatException");
    method = helper.createMethod(newType,"DuplicateFormatFlagsException(java.lang.String)","DuplicateFormatFlagsException",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getFlags()","getFlags",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getMessage()","getMessage",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EmptyStackException",33);
    helper.addExtendsLinks("java.util", "EmptyStackException","java.lang","RuntimeException");
    method = helper.createMethod(newType,"EmptyStackException()","EmptyStackException",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "Enumeration",1537);
    helper.addExtendsLinks("java.util", "Enumeration","java.lang","Object");
    method = helper.createMethod(newType,"hasMoreElements()","hasMoreElements",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"nextElement()","nextElement",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EnumMap$1",32);
    helper.addExtendsLinks("java.util", "EnumMap$1","java.lang","Object");
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EnumMap$EntryIterator",32);
    helper.addExtendsLinks("java.util", "EnumMap$EntryIterator","java.util","EnumMap$EnumMapIterator");
    helper.addImplementsLinks("java.util", "EnumMap$EntryIterator","java.util","Map$Entry");
	helper.createField(newType,JavaType.class,"java.util","EnumMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Map$Entry",false,0);
    method = helper.createMethod(newType,"getKey()","getKey",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Enum",false,0);
    method = helper.createMethod(newType,"getValue()","getValue",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"setValue(java.lang.Object)","setValue",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"next()","next",false,4161);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"getKey()","getKey",false,4161);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"EnumMap$EntryIterator(java.util.EnumMap, java.util.EnumMap$1)","EnumMap$EntryIterator",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EnumMap$EntrySet",32);
    helper.addExtendsLinks("java.util", "EnumMap$EntrySet","java.util","AbstractSet");
	helper.createField(newType,JavaType.class,"java.util","EnumMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"toArray()","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"toArray(java.lang.Object[])","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"EnumMap$EntrySet(java.util.EnumMap, java.util.EnumMap$1)","EnumMap$EntrySet",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EnumMap$EnumMapIterator",1056);
    helper.addExtendsLinks("java.util", "EnumMap$EnumMapIterator","java.lang","Object");
    helper.addImplementsLinks("java.util", "EnumMap$EnumMapIterator","java.util","Iterator");
    helper.createField(newType,JavaTypePrimitive.class,"","int","index",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","lastReturnedIndex",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","EnumMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"EnumMap$EnumMapIterator(java.util.EnumMap, java.util.EnumMap$1)","EnumMap$EnumMapIterator",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EnumMap$KeyIterator",32);
    helper.addExtendsLinks("java.util", "EnumMap$KeyIterator","java.util","EnumMap$EnumMapIterator");
	helper.createField(newType,JavaType.class,"java.util","EnumMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Enum",false,0);
    method = helper.createMethod(newType,"next()","next",false,4161);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"EnumMap$KeyIterator(java.util.EnumMap, java.util.EnumMap$1)","EnumMap$KeyIterator",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EnumMap$KeySet",32);
    helper.addExtendsLinks("java.util", "EnumMap$KeySet","java.util","AbstractSet");
	helper.createField(newType,JavaType.class,"java.util","EnumMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"EnumMap$KeySet(java.util.EnumMap, java.util.EnumMap$1)","EnumMap$KeySet",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EnumMap$ValueIterator",32);
    helper.addExtendsLinks("java.util", "EnumMap$ValueIterator","java.util","EnumMap$EnumMapIterator");
	helper.createField(newType,JavaType.class,"java.util","EnumMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"EnumMap$ValueIterator(java.util.EnumMap, java.util.EnumMap$1)","EnumMap$ValueIterator",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EnumMap$Values",32);
    helper.addExtendsLinks("java.util", "EnumMap$Values","java.util","AbstractCollection");
	helper.createField(newType,JavaType.class,"java.util","EnumMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"EnumMap$Values(java.util.EnumMap, java.util.EnumMap$1)","EnumMap$Values",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EnumMap",33);
    helper.addExtendsLinks("java.util", "EnumMap","java.util","AbstractMap");
    helper.addImplementsLinks("java.util", "EnumMap","java.io","Serializable");
    helper.addImplementsLinks("java.util", "EnumMap","java.lang","Cloneable");
    method = helper.createMethod(newType,"EnumMap(java.lang.Class)","EnumMap",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"EnumMap(java.util.EnumMap)","EnumMap",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"EnumMap(java.util.Map)","EnumMap",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"containsValue(java.lang.Object)","containsValue",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsKey(java.lang.Object)","containsKey",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"get(java.lang.Object)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"put(java.lang.Enum, java.lang.Object)","put",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"putAll(java.util.Map)","putAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"keySet()","keySet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"values()","values",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Collection",false,0);
    method = helper.createMethod(newType,"entrySet()","entrySet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","EnumMap",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,4161);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
        helper.addThrowsOnMethod(method, "java.lang","CloneNotSupportedException");
    method = helper.createMethod(newType,"put(java.lang.Object, java.lang.Object)","put",false,4161);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"access$200(java.util.EnumMap)","access$200",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"access$500(java.util.EnumMap, java.lang.Object)","access$500",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"access$600(java.util.EnumMap)","access$600",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"access$210(java.util.EnumMap)","access$210",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"access$900(java.util.EnumMap, java.lang.Object, java.lang.Object)","access$900",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"access$1000(java.util.EnumMap, java.lang.Object, java.lang.Object)","access$1000",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"access$1100(java.util.EnumMap)","access$1100",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Enum",true,1);
    method = helper.createMethod(newType,"access$1200(java.util.EnumMap, java.lang.Object)","access$1200",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"access$1400()","access$1400",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EnumSet$SerializationProxy",32);
    helper.addExtendsLinks("java.util", "EnumSet$SerializationProxy","java.lang","Object");
    helper.addImplementsLinks("java.util", "EnumSet$SerializationProxy","java.io","Serializable");
    method = helper.createMethod(newType,"EnumSet$SerializationProxy(java.util.EnumSet)","EnumSet$SerializationProxy",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EnumSet",1057);
    helper.addExtendsLinks("java.util", "EnumSet","java.util","AbstractSet");
    helper.addImplementsLinks("java.util", "EnumSet","java.lang","Cloneable");
    helper.addImplementsLinks("java.util", "EnumSet","java.io","Serializable");
	helper.createField(newType,JavaType.class,"java.lang","Class","elementType",16,false,0);
    method = helper.createMethod(newType,"EnumSet(java.lang.Class, java.lang.Enum[])","EnumSet",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"noneOf(java.lang.Class)","noneOf",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","EnumSet",false,0);
    method = helper.createMethod(newType,"allOf(java.lang.Class)","allOf",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","EnumSet",false,0);
    method = helper.createMethod(newType,"addAll()","addAll",false,1024);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"copyOf(java.util.EnumSet)","copyOf",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","EnumSet",false,0);
    method = helper.createMethod(newType,"copyOf(java.util.Collection)","copyOf",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","EnumSet",false,0);
    method = helper.createMethod(newType,"complementOf(java.util.EnumSet)","complementOf",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","EnumSet",false,0);
    method = helper.createMethod(newType,"of(java.lang.Enum)","of",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","EnumSet",false,0);
    method = helper.createMethod(newType,"of(java.lang.Enum, java.lang.Enum)","of",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","EnumSet",false,0);
    method = helper.createMethod(newType,"of(java.lang.Enum, java.lang.Enum, java.lang.Enum)","of",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","EnumSet",false,0);
    method = helper.createMethod(newType,"of(java.lang.Enum, java.lang.Enum, java.lang.Enum, java.lang.Enum)","of",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","EnumSet",false,0);
    method = helper.createMethod(newType,"of(java.lang.Enum, java.lang.Enum, java.lang.Enum, java.lang.Enum, java.lang.Enum)","of",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","EnumSet",false,0);
    method = helper.createMethod(newType,"of(java.lang.Enum, java.lang.Enum[])","of",false,137);
    helper.createMethodReturnType(method,JavaType.class,"java.util","EnumSet",false,0);
    method = helper.createMethod(newType,"range(java.lang.Enum, java.lang.Enum)","range",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","EnumSet",false,0);
    method = helper.createMethod(newType,"addRange(java.lang.Enum, java.lang.Enum)","addRange",false,1024);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","EnumSet",false,0);
    method = helper.createMethod(newType,"complement()","complement",false,1024);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"typeCheck(java.lang.Enum)","typeCheck",false,16);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"writeReplace()","writeReplace",false,0);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,4161);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
        helper.addThrowsOnMethod(method, "java.lang","CloneNotSupportedException");
    method = helper.createMethod(newType,"access$000()","access$000",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Enum",true,1);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "EventListener",1537);
    helper.addExtendsLinks("java.util", "EventListener","java.lang","Object");
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EventListenerProxy",1057);
    helper.addExtendsLinks("java.util", "EventListenerProxy","java.lang","Object");
    helper.addImplementsLinks("java.util", "EventListenerProxy","java.util","EventListener");
    method = helper.createMethod(newType,"EventListenerProxy(java.util.EventListener)","EventListenerProxy",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getListener()","getListener",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","EventListener",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EventObject",33);
    helper.addExtendsLinks("java.util", "EventObject","java.lang","Object");
    helper.addImplementsLinks("java.util", "EventObject","java.io","Serializable");
	helper.createField(newType,JavaType.class,"java.lang","Object","source",132,false,0);
    method = helper.createMethod(newType,"EventObject(java.lang.Object)","EventObject",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getSource()","getSource",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "FormatFlagsConversionMismatchException",33);
    helper.addExtendsLinks("java.util", "FormatFlagsConversionMismatchException","java.util","IllegalFormatException");
    method = helper.createMethod(newType,"FormatFlagsConversionMismatchException(java.lang.String, char)","FormatFlagsConversionMismatchException",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getFlags()","getFlags",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getConversion()","getConversion",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "char",false,0);
    method = helper.createMethod(newType,"getMessage()","getMessage",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "Formattable",1537);
    helper.addExtendsLinks("java.util", "Formattable","java.lang","Object");
    method = helper.createMethod(newType,"formatTo(java.util.Formatter, int, int, int)","formatTo",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "FormattableFlags",33);
    helper.addExtendsLinks("java.util", "FormattableFlags","java.lang","Object");
    helper.createField(newType,JavaTypePrimitive.class,"","int","LEFT_JUSTIFY",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","UPPERCASE",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","ALTERNATE",25,false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeEnum.class,"java.util", "Formatter$BigDecimalLayoutForm",16433);
    helper.addExtendsLinks("java.util", "Formatter$BigDecimalLayoutForm","java.lang","Enum");
	helper.createField(newType,JavaType.class,"java.util","Formatter$BigDecimalLayoutForm","SCIENTIFIC",16409,false,0);
	helper.createField(newType,JavaType.class,"java.util","Formatter$BigDecimalLayoutForm","DECIMAL_FLOAT",16409,false,0);
    method = helper.createMethod(newType,"values()","values",false,25);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.util","Formatter$BigDecimalLayoutForm",true,1);
    method = helper.createMethod(newType,"valueOf(java.lang.String)","valueOf",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Formatter$BigDecimalLayoutForm",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Formatter$Conversion",32);
    helper.addExtendsLinks("java.util", "Formatter$Conversion","java.lang","Object");
    helper.createField(newType,JavaTypePrimitive.class,"","char","DECIMAL_INTEGER",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","OCTAL_INTEGER",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","HEXADECIMAL_INTEGER",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","HEXADECIMAL_INTEGER_UPPER",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","SCIENTIFIC",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","SCIENTIFIC_UPPER",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","GENERAL",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","GENERAL_UPPER",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","DECIMAL_FLOAT",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","HEXADECIMAL_FLOAT",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","HEXADECIMAL_FLOAT_UPPER",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","CHARACTER",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","CHARACTER_UPPER",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","DATE_TIME",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","DATE_TIME_UPPER",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","BOOLEAN",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","BOOLEAN_UPPER",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","STRING",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","STRING_UPPER",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","HASHCODE",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","HASHCODE_UPPER",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","LINE_SEPARATOR",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","PERCENT_SIGN",24,false,0);
    method = helper.createMethod(newType,"isValid(char)","isValid",false,8);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"isGeneral(char)","isGeneral",false,8);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"isInteger(char)","isInteger",false,8);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"isFloat(char)","isFloat",false,8);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"isText(char)","isText",false,8);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Formatter$DateTime",32);
    helper.addExtendsLinks("java.util", "Formatter$DateTime","java.lang","Object");
    helper.createField(newType,JavaTypePrimitive.class,"","char","HOUR_OF_DAY_0",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","HOUR_0",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","HOUR_OF_DAY",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","HOUR",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","MINUTE",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","NANOSECOND",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","MILLISECOND",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","MILLISECOND_SINCE_EPOCH",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","AM_PM",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","SECONDS_SINCE_EPOCH",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","SECOND",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","TIME",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","ZONE_NUMERIC",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","ZONE",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","NAME_OF_DAY_ABBREV",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","NAME_OF_DAY",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","NAME_OF_MONTH_ABBREV",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","NAME_OF_MONTH",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","CENTURY",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","DAY_OF_MONTH_0",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","DAY_OF_MONTH",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","NAME_OF_MONTH_ABBREV_X",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","DAY_OF_YEAR",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","MONTH",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","YEAR_2",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","YEAR_4",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","TIME_12_HOUR",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","TIME_24_HOUR",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","DATE_TIME",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","DATE",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","ISO_STANDARD_DATE",24,false,0);
    method = helper.createMethod(newType,"isValid(char)","isValid",false,8);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Formatter$FixedString",32);
    helper.addExtendsLinks("java.util", "Formatter$FixedString","java.lang","Object");
    helper.addImplementsLinks("java.util", "Formatter$FixedString","java.util","Formatter$FormatString");
	helper.createField(newType,JavaType.class,"java.util","Formatter","this$0",4112,false,0);
    method = helper.createMethod(newType,"Formatter$FixedString(java.util.Formatter, java.lang.String)","Formatter$FixedString",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"index()","index",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"print(java.lang.Object, java.util.Locale)","print",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.io","IOException");
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Formatter$Flags",32);
    helper.addExtendsLinks("java.util", "Formatter$Flags","java.lang","Object");
	helper.createField(newType,JavaType.class,"java.util","Formatter$Flags","NONE",24,false,0);
	helper.createField(newType,JavaType.class,"java.util","Formatter$Flags","LEFT_JUSTIFY",24,false,0);
	helper.createField(newType,JavaType.class,"java.util","Formatter$Flags","UPPERCASE",24,false,0);
	helper.createField(newType,JavaType.class,"java.util","Formatter$Flags","ALTERNATE",24,false,0);
	helper.createField(newType,JavaType.class,"java.util","Formatter$Flags","PLUS",24,false,0);
	helper.createField(newType,JavaType.class,"java.util","Formatter$Flags","LEADING_SPACE",24,false,0);
	helper.createField(newType,JavaType.class,"java.util","Formatter$Flags","ZERO_PAD",24,false,0);
	helper.createField(newType,JavaType.class,"java.util","Formatter$Flags","GROUP",24,false,0);
	helper.createField(newType,JavaType.class,"java.util","Formatter$Flags","PARENTHESES",24,false,0);
	helper.createField(newType,JavaType.class,"java.util","Formatter$Flags","PREVIOUS",24,false,0);
    method = helper.createMethod(newType,"valueOf()","valueOf",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"contains(java.util.Formatter$Flags)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"dup()","dup",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Formatter$Flags",false,0);
    method = helper.createMethod(newType,"remove(java.util.Formatter$Flags)","remove",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Formatter$Flags",false,0);
    method = helper.createMethod(newType,"parse(java.lang.String)","parse",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Formatter$Flags",false,0);
    method = helper.createMethod(newType,"toString(java.util.Formatter$Flags)","toString",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"access$100(java.util.Formatter$Flags, java.util.Formatter$Flags)","access$100",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Formatter$Flags",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Formatter$FormatSpecifier$BigDecimalLayout",32);
    helper.addExtendsLinks("java.util", "Formatter$FormatSpecifier$BigDecimalLayout","java.lang","Object");
	helper.createField(newType,JavaType.class,"java.util","Formatter$FormatSpecifier","this$1",4112,false,0);
    method = helper.createMethod(newType,"Formatter$FormatSpecifier$BigDecimalLayout(java.util.Formatter$FormatSpecifier, java.math.BigInteger, int, java.util.Formatter$BigDecimalLayoutForm)","Formatter$FormatSpecifier$BigDecimalLayout",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasDot()","hasDot",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"layoutChars()","layoutChars",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "char",true,1);
    method = helper.createMethod(newType,"mantissa()","mantissa",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "char",true,1);
    method = helper.createMethod(newType,"exponent()","exponent",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "char",true,1);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Formatter$FormatSpecifier",32);
    helper.addExtendsLinks("java.util", "Formatter$FormatSpecifier","java.lang","Object");
    helper.addImplementsLinks("java.util", "Formatter$FormatSpecifier","java.util","Formatter$FormatString");
    helper.createField(newType,JavaTypePrimitive.class,"","boolean","$assertionsDisabled",4120,false,0);
	helper.createField(newType,JavaType.class,"java.util","Formatter","this$0",4112,false,0);
    method = helper.createMethod(newType,"index()","index",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"flags()","flags",false,0);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Formatter$Flags",false,0);
    method = helper.createMethod(newType,"width()","width",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"precision()","precision",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"Formatter$FormatSpecifier(java.util.Formatter, java.util.Formatter, java.lang.String[])","Formatter$FormatSpecifier",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"print(java.lang.Object, java.util.Locale)","print",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.io","IOException");
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "Formatter$FormatString",1536);
    helper.addExtendsLinks("java.util", "Formatter$FormatString","java.lang","Object");
    method = helper.createMethod(newType,"index()","index",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"print(java.lang.Object, java.util.Locale)","print",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.io","IOException");
    method = helper.createMethod(newType,"toString()","toString",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Formatter",49);
    helper.addExtendsLinks("java.util", "Formatter","java.lang","Object");
    helper.addImplementsLinks("java.util", "Formatter","java.io","Closeable");
    helper.addImplementsLinks("java.util", "Formatter","java.io","Flushable");
    method = helper.createMethod(newType,"Formatter()","Formatter",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Formatter(java.lang.Appendable)","Formatter",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Formatter(java.util.Locale)","Formatter",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Formatter(java.lang.Appendable, java.util.Locale)","Formatter",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Formatter(java.lang.String)","Formatter",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.io","FileNotFoundException");
    method = helper.createMethod(newType,"Formatter(java.lang.String, java.lang.String)","Formatter",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.io","FileNotFoundException");
        helper.addThrowsOnMethod(method, "java.io","UnsupportedEncodingException");
    method = helper.createMethod(newType,"Formatter(java.lang.String, java.lang.String, java.util.Locale)","Formatter",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.io","FileNotFoundException");
        helper.addThrowsOnMethod(method, "java.io","UnsupportedEncodingException");
    method = helper.createMethod(newType,"Formatter(java.io.File)","Formatter",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.io","FileNotFoundException");
    method = helper.createMethod(newType,"Formatter(java.io.File, java.lang.String)","Formatter",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.io","FileNotFoundException");
        helper.addThrowsOnMethod(method, "java.io","UnsupportedEncodingException");
    method = helper.createMethod(newType,"Formatter(java.io.File, java.lang.String, java.util.Locale)","Formatter",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.io","FileNotFoundException");
        helper.addThrowsOnMethod(method, "java.io","UnsupportedEncodingException");
    method = helper.createMethod(newType,"Formatter(java.io.PrintStream)","Formatter",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Formatter(java.io.OutputStream)","Formatter",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Formatter(java.io.OutputStream, java.lang.String)","Formatter",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.io","UnsupportedEncodingException");
    method = helper.createMethod(newType,"Formatter(java.io.OutputStream, java.lang.String, java.util.Locale)","Formatter",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.io","UnsupportedEncodingException");
    method = helper.createMethod(newType,"locale()","locale",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Locale",false,0);
    method = helper.createMethod(newType,"out()","out",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Appendable",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"flush()","flush",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"close()","close",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"ioException()","ioException",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.io","IOException",false,0);
    method = helper.createMethod(newType,"format(java.lang.String, java.lang.Object[])","format",false,129);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Formatter",false,0);
    method = helper.createMethod(newType,"format(java.util.Locale, java.lang.String, java.lang.Object[])","format",false,129);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Formatter",false,0);
    method = helper.createMethod(newType,"access$000(java.util.Formatter)","access$000",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Appendable",false,0);
    method = helper.createMethod(newType,"access$202(double)","access$202",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "double",false,0);
    method = helper.createMethod(newType,"access$200()","access$200",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "double",false,0);
    method = helper.createMethod(newType,"access$300(java.util.Formatter)","access$300",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "char",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "FormatterClosedException",33);
    helper.addExtendsLinks("java.util", "FormatterClosedException","java.lang","IllegalStateException");
    method = helper.createMethod(newType,"FormatterClosedException()","FormatterClosedException",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "GregorianCalendar",33);
    helper.addExtendsLinks("java.util", "GregorianCalendar","java.util","Calendar");
    helper.createField(newType,JavaTypePrimitive.class,"","int","BC",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","BCE",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","AD",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","CE",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","long","serialVersionUID",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","long","DEFAULT_GREGORIAN_CUTOVER",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","boolean","$assertionsDisabled",4120,false,0);
    method = helper.createMethod(newType,"GregorianCalendar()","GregorianCalendar",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"GregorianCalendar(java.util.TimeZone)","GregorianCalendar",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"GregorianCalendar(java.util.Locale)","GregorianCalendar",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"GregorianCalendar(java.util.TimeZone, java.util.Locale)","GregorianCalendar",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"GregorianCalendar(int, int, int)","GregorianCalendar",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"GregorianCalendar(int, int, int, int, int)","GregorianCalendar",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"GregorianCalendar(int, int, int, int, int, int)","GregorianCalendar",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"GregorianCalendar(int, int, int, int, int, int, int)","GregorianCalendar",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"setGregorianChange(java.util.Date)","setGregorianChange",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getGregorianChange()","getGregorianChange",false,17);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Date",false,0);
    method = helper.createMethod(newType,"isLeapYear(int)","isLeapYear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"add(int, int)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"roll(int, boolean)","roll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"roll(int, int)","roll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getMinimum(int)","getMinimum",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"getMaximum(int)","getMaximum",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"getGreatestMinimum(int)","getGreatestMinimum",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"getLeastMaximum(int)","getLeastMaximum",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"getActualMinimum(int)","getActualMinimum",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"getActualMaximum(int)","getActualMaximum",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"getTimeZone()","getTimeZone",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","TimeZone",false,0);
    method = helper.createMethod(newType,"setTimeZone(java.util.TimeZone)","setTimeZone",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"computeFields()","computeFields",false,4);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"computeTime()","computeTime",false,4);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "HashMap$1",32);
    helper.addExtendsLinks("java.util", "HashMap$1","java.lang","Object");
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "HashMap$Entry",32);
    helper.addExtendsLinks("java.util", "HashMap$Entry","java.lang","Object");
    helper.addImplementsLinks("java.util", "HashMap$Entry","java.util","Map$Entry");
	helper.createField(newType,JavaType.class,"java.lang","Object","key",16,false,0);
	helper.createField(newType,JavaType.class,"java.lang","Object","value",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","hash",16,false,0);
	helper.createField(newType,JavaType.class,"java.util","HashMap$Entry","next",0,false,0);
    method = helper.createMethod(newType,"HashMap$Entry(int, java.lang.Object, java.lang.Object, java.util.HashMap$Entry)","HashMap$Entry",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getKey()","getKey",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"getValue()","getValue",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"setValue(java.lang.Object)","setValue",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"recordAccess(java.util.HashMap)","recordAccess",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"recordRemoval(java.util.HashMap)","recordRemoval",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "HashMap$EntryIterator",32);
    helper.addExtendsLinks("java.util", "HashMap$EntryIterator","java.util","HashMap$HashIterator");
	helper.createField(newType,JavaType.class,"java.util","HashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Map$Entry",false,0);
    method = helper.createMethod(newType,"next()","next",false,4161);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"HashMap$EntryIterator(java.util.HashMap, java.util.HashMap$1)","HashMap$EntryIterator",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "HashMap$EntrySet",32);
    helper.addExtendsLinks("java.util", "HashMap$EntrySet","java.util","AbstractSet");
	helper.createField(newType,JavaType.class,"java.util","HashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"HashMap$EntrySet(java.util.HashMap, java.util.HashMap$1)","HashMap$EntrySet",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "HashMap$HashIterator",1056);
    helper.addExtendsLinks("java.util", "HashMap$HashIterator","java.lang","Object");
    helper.addImplementsLinks("java.util", "HashMap$HashIterator","java.util","Iterator");
	helper.createField(newType,JavaType.class,"java.util","HashMap$Entry","next",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","expectedModCount",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","index",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","HashMap$Entry","current",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","HashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"HashMap$HashIterator(java.util.HashMap)","HashMap$HashIterator",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"nextEntry()","nextEntry",false,0);
    helper.createMethodReturnType(method,JavaType.class,"java.util","HashMap$Entry",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "HashMap$KeyIterator",32);
    helper.addExtendsLinks("java.util", "HashMap$KeyIterator","java.util","HashMap$HashIterator");
	helper.createField(newType,JavaType.class,"java.util","HashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"HashMap$KeyIterator(java.util.HashMap, java.util.HashMap$1)","HashMap$KeyIterator",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "HashMap$KeySet",32);
    helper.addExtendsLinks("java.util", "HashMap$KeySet","java.util","AbstractSet");
	helper.createField(newType,JavaType.class,"java.util","HashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"HashMap$KeySet(java.util.HashMap, java.util.HashMap$1)","HashMap$KeySet",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "HashMap$ValueIterator",32);
    helper.addExtendsLinks("java.util", "HashMap$ValueIterator","java.util","HashMap$HashIterator");
	helper.createField(newType,JavaType.class,"java.util","HashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"HashMap$ValueIterator(java.util.HashMap, java.util.HashMap$1)","HashMap$ValueIterator",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "HashMap$Values",32);
    helper.addExtendsLinks("java.util", "HashMap$Values","java.util","AbstractCollection");
	helper.createField(newType,JavaType.class,"java.util","HashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"HashMap$Values(java.util.HashMap, java.util.HashMap$1)","HashMap$Values",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "HashMap",33);
    helper.addExtendsLinks("java.util", "HashMap","java.util","AbstractMap");
    helper.addImplementsLinks("java.util", "HashMap","java.util","Map");
    helper.addImplementsLinks("java.util", "HashMap","java.lang","Cloneable");
    helper.addImplementsLinks("java.util", "HashMap","java.io","Serializable");
    helper.createField(newType,JavaTypePrimitive.class,"","int","DEFAULT_INITIAL_CAPACITY",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","MAXIMUM_CAPACITY",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","float","DEFAULT_LOAD_FACTOR",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","size",128,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","threshold",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","float","loadFactor",16,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","modCount",192,false,0);
	helper.createField(newType,JavaType.class,"java.lang","Object","NULL_KEY",24,false,0);
    method = helper.createMethod(newType,"HashMap(int, float)","HashMap",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"HashMap(int)","HashMap",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"HashMap()","HashMap",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"HashMap(java.util.Map)","HashMap",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"init()","init",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"maskNull(java.lang.Object)","maskNull",false,8);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"unmaskNull(java.lang.Object)","unmaskNull",false,8);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"hash(int)","hash",false,8);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"hash(java.lang.Object)","hash",false,8);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"eq(java.lang.Object, java.lang.Object)","eq",false,8);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"indexFor(int, int)","indexFor",false,8);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"get(java.lang.Object)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"containsKey(java.lang.Object)","containsKey",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"getEntry(java.lang.Object)","getEntry",false,0);
    helper.createMethodReturnType(method,JavaType.class,"java.util","HashMap$Entry",false,0);
    method = helper.createMethod(newType,"put(java.lang.Object, java.lang.Object)","put",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"putAllForCreate(java.util.Map)","putAllForCreate",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"resize(int)","resize",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"transfer(java.util.HashMap$Entry[])","transfer",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"putAll(java.util.Map)","putAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"removeEntryForKey(java.lang.Object)","removeEntryForKey",false,0);
    helper.createMethodReturnType(method,JavaType.class,"java.util","HashMap$Entry",false,0);
    method = helper.createMethod(newType,"removeMapping(java.lang.Object)","removeMapping",false,0);
    helper.createMethodReturnType(method,JavaType.class,"java.util","HashMap$Entry",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"containsValue(java.lang.Object)","containsValue",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"addEntry(int, java.lang.Object, java.lang.Object, int)","addEntry",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"createEntry(int, java.lang.Object, java.lang.Object, int)","createEntry",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"newKeyIterator()","newKeyIterator",false,0);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"newValueIterator()","newValueIterator",false,0);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"newEntryIterator()","newEntryIterator",false,0);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"keySet()","keySet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"values()","values",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Collection",false,0);
    method = helper.createMethod(newType,"entrySet()","entrySet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"capacity()","capacity",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"loadFactor()","loadFactor",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "float",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "HashSet",33);
    helper.addExtendsLinks("java.util", "HashSet","java.util","AbstractSet");
    helper.addImplementsLinks("java.util", "HashSet","java.util","Set");
    helper.addImplementsLinks("java.util", "HashSet","java.lang","Cloneable");
    helper.addImplementsLinks("java.util", "HashSet","java.io","Serializable");
    helper.createField(newType,JavaTypePrimitive.class,"","long","serialVersionUID",24,false,0);
    method = helper.createMethod(newType,"HashSet()","HashSet",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"HashSet(java.util.Collection)","HashSet",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"HashSet(int, float)","HashSet",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"HashSet(int)","HashSet",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"HashSet(int, float, boolean)","HashSet",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Hashtable$1",32);
    helper.addExtendsLinks("java.util", "Hashtable$1","java.lang","Object");
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Hashtable$EmptyEnumerator",32);
    helper.addExtendsLinks("java.util", "Hashtable$EmptyEnumerator","java.lang","Object");
    helper.addImplementsLinks("java.util", "Hashtable$EmptyEnumerator","java.util","Enumeration");
    method = helper.createMethod(newType,"Hashtable$EmptyEnumerator()","Hashtable$EmptyEnumerator",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasMoreElements()","hasMoreElements",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"nextElement()","nextElement",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Hashtable$EmptyIterator",32);
    helper.addExtendsLinks("java.util", "Hashtable$EmptyIterator","java.lang","Object");
    helper.addImplementsLinks("java.util", "Hashtable$EmptyIterator","java.util","Iterator");
    method = helper.createMethod(newType,"Hashtable$EmptyIterator()","Hashtable$EmptyIterator",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Hashtable$Entry",32);
    helper.addExtendsLinks("java.util", "Hashtable$Entry","java.lang","Object");
    helper.addImplementsLinks("java.util", "Hashtable$Entry","java.util","Map$Entry");
    helper.createField(newType,JavaTypePrimitive.class,"","int","hash",0,false,0);
	helper.createField(newType,JavaType.class,"java.lang","Object","key",0,false,0);
	helper.createField(newType,JavaType.class,"java.lang","Object","value",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","Hashtable$Entry","next",0,false,0);
    method = helper.createMethod(newType,"Hashtable$Entry(int, java.lang.Object, java.lang.Object, java.util.Hashtable$Entry)","Hashtable$Entry",true,4);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,4);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"getKey()","getKey",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"getValue()","getValue",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"setValue(java.lang.Object)","setValue",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Hashtable$EntrySet",32);
    helper.addExtendsLinks("java.util", "Hashtable$EntrySet","java.util","AbstractSet");
	helper.createField(newType,JavaType.class,"java.util","Hashtable","this$0",4112,false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Hashtable$EntrySet(java.util.Hashtable, java.util.Hashtable$1)","Hashtable$EntrySet",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Hashtable$Enumerator",32);
    helper.addExtendsLinks("java.util", "Hashtable$Enumerator","java.lang","Object");
    helper.addImplementsLinks("java.util", "Hashtable$Enumerator","java.util","Enumeration");
    helper.addImplementsLinks("java.util", "Hashtable$Enumerator","java.util","Iterator");
    helper.createField(newType,JavaTypePrimitive.class,"","int","index",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","Hashtable$Entry","entry",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","Hashtable$Entry","lastReturned",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","type",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","boolean","iterator",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","expectedModCount",4,false,0);
	helper.createField(newType,JavaType.class,"java.util","Hashtable","this$0",4112,false,0);
    method = helper.createMethod(newType,"Hashtable$Enumerator(java.util.Hashtable, int, boolean)","Hashtable$Enumerator",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasMoreElements()","hasMoreElements",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"nextElement()","nextElement",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Hashtable$KeySet",32);
    helper.addExtendsLinks("java.util", "Hashtable$KeySet","java.util","AbstractSet");
	helper.createField(newType,JavaType.class,"java.util","Hashtable","this$0",4112,false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Hashtable$KeySet(java.util.Hashtable, java.util.Hashtable$1)","Hashtable$KeySet",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Hashtable$ValueCollection",32);
    helper.addExtendsLinks("java.util", "Hashtable$ValueCollection","java.util","AbstractCollection");
	helper.createField(newType,JavaType.class,"java.util","Hashtable","this$0",4112,false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Hashtable$ValueCollection(java.util.Hashtable, java.util.Hashtable$1)","Hashtable$ValueCollection",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Hashtable",33);
    helper.addExtendsLinks("java.util", "Hashtable","java.util","Dictionary");
    helper.addImplementsLinks("java.util", "Hashtable","java.util","Map");
    helper.addImplementsLinks("java.util", "Hashtable","java.lang","Cloneable");
    helper.addImplementsLinks("java.util", "Hashtable","java.io","Serializable");
    method = helper.createMethod(newType,"Hashtable(int, float)","Hashtable",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Hashtable(int)","Hashtable",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Hashtable()","Hashtable",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Hashtable(java.util.Map)","Hashtable",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"size()","size",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"keys()","keys",false,33);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Enumeration",false,0);
    method = helper.createMethod(newType,"elements()","elements",false,33);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Enumeration",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsValue(java.lang.Object)","containsValue",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsKey(java.lang.Object)","containsKey",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"get(java.lang.Object)","get",false,33);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"rehash()","rehash",false,4);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"put(java.lang.Object, java.lang.Object)","put",false,33);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,33);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"putAll(java.util.Map)","putAll",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,33);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,33);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"keySet()","keySet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"entrySet()","entrySet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"values()","values",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Collection",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"access$100(java.util.Hashtable, int)","access$100",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"access$200(java.util.Hashtable)","access$200",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"access$400(java.util.Hashtable)","access$400",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.util","Hashtable$Entry",true,1);
    method = helper.createMethod(newType,"access$508(java.util.Hashtable)","access$508",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"access$210(java.util.Hashtable)","access$210",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"access$500(java.util.Hashtable)","access$500",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IdentityHashMap$1",32);
    helper.addExtendsLinks("java.util", "IdentityHashMap$1","java.lang","Object");
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IdentityHashMap$EntryIterator",32);
    helper.addExtendsLinks("java.util", "IdentityHashMap$EntryIterator","java.util","IdentityHashMap$IdentityHashMapIterator");
    helper.addImplementsLinks("java.util", "IdentityHashMap$EntryIterator","java.util","Map$Entry");
	helper.createField(newType,JavaType.class,"java.util","IdentityHashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Map$Entry",false,0);
    method = helper.createMethod(newType,"getKey()","getKey",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"getValue()","getValue",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"setValue(java.lang.Object)","setValue",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"next()","next",false,4161);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"IdentityHashMap$EntryIterator(java.util.IdentityHashMap, java.util.IdentityHashMap$1)","IdentityHashMap$EntryIterator",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IdentityHashMap$EntrySet",32);
    helper.addExtendsLinks("java.util", "IdentityHashMap$EntrySet","java.util","AbstractSet");
	helper.createField(newType,JavaType.class,"java.util","IdentityHashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"removeAll(java.util.Collection)","removeAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"toArray()","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"toArray(java.lang.Object[])","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"IdentityHashMap$EntrySet(java.util.IdentityHashMap, java.util.IdentityHashMap$1)","IdentityHashMap$EntrySet",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IdentityHashMap$IdentityHashMapIterator",1056);
    helper.addExtendsLinks("java.util", "IdentityHashMap$IdentityHashMapIterator","java.lang","Object");
    helper.addImplementsLinks("java.util", "IdentityHashMap$IdentityHashMapIterator","java.util","Iterator");
    helper.createField(newType,JavaTypePrimitive.class,"","int","index",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","expectedModCount",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","lastReturnedIndex",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","boolean","indexValid",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","IdentityHashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"nextIndex()","nextIndex",false,4);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"IdentityHashMap$IdentityHashMapIterator(java.util.IdentityHashMap, java.util.IdentityHashMap$1)","IdentityHashMap$IdentityHashMapIterator",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IdentityHashMap$KeyIterator",32);
    helper.addExtendsLinks("java.util", "IdentityHashMap$KeyIterator","java.util","IdentityHashMap$IdentityHashMapIterator");
	helper.createField(newType,JavaType.class,"java.util","IdentityHashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"IdentityHashMap$KeyIterator(java.util.IdentityHashMap, java.util.IdentityHashMap$1)","IdentityHashMap$KeyIterator",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IdentityHashMap$KeySet",32);
    helper.addExtendsLinks("java.util", "IdentityHashMap$KeySet","java.util","AbstractSet");
	helper.createField(newType,JavaType.class,"java.util","IdentityHashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"removeAll(java.util.Collection)","removeAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"IdentityHashMap$KeySet(java.util.IdentityHashMap, java.util.IdentityHashMap$1)","IdentityHashMap$KeySet",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IdentityHashMap$ValueIterator",32);
    helper.addExtendsLinks("java.util", "IdentityHashMap$ValueIterator","java.util","IdentityHashMap$IdentityHashMapIterator");
	helper.createField(newType,JavaType.class,"java.util","IdentityHashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"IdentityHashMap$ValueIterator(java.util.IdentityHashMap, java.util.IdentityHashMap$1)","IdentityHashMap$ValueIterator",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IdentityHashMap$Values",32);
    helper.addExtendsLinks("java.util", "IdentityHashMap$Values","java.util","AbstractCollection");
	helper.createField(newType,JavaType.class,"java.util","IdentityHashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"IdentityHashMap$Values(java.util.IdentityHashMap, java.util.IdentityHashMap$1)","IdentityHashMap$Values",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IdentityHashMap",33);
    helper.addExtendsLinks("java.util", "IdentityHashMap","java.util","AbstractMap");
    helper.addImplementsLinks("java.util", "IdentityHashMap","java.util","Map");
    helper.addImplementsLinks("java.util", "IdentityHashMap","java.io","Serializable");
    helper.addImplementsLinks("java.util", "IdentityHashMap","java.lang","Cloneable");
    method = helper.createMethod(newType,"IdentityHashMap()","IdentityHashMap",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"IdentityHashMap(int)","IdentityHashMap",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"IdentityHashMap(java.util.Map)","IdentityHashMap",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"get(java.lang.Object)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"containsKey(java.lang.Object)","containsKey",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsValue(java.lang.Object)","containsValue",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"put(java.lang.Object, java.lang.Object)","put",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"putAll(java.util.Map)","putAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"keySet()","keySet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"values()","values",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Collection",false,0);
    method = helper.createMethod(newType,"entrySet()","entrySet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"access$000(java.util.IdentityHashMap)","access$000",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"access$100(java.util.IdentityHashMap)","access$100",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"access$200(java.util.IdentityHashMap)","access$200",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"access$204(java.util.IdentityHashMap)","access$204",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"access$010(java.util.IdentityHashMap)","access$010",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"access$300(int, int)","access$300",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"access$400(java.lang.Object, int)","access$400",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"access$600(java.lang.Object)","access$600",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"access$1300(java.util.IdentityHashMap, java.lang.Object, java.lang.Object)","access$1300",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"access$1400(java.util.IdentityHashMap, java.lang.Object, java.lang.Object)","access$1400",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IllegalFormatCodePointException",33);
    helper.addExtendsLinks("java.util", "IllegalFormatCodePointException","java.util","IllegalFormatException");
    method = helper.createMethod(newType,"IllegalFormatCodePointException(int)","IllegalFormatCodePointException",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getCodePoint()","getCodePoint",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"getMessage()","getMessage",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IllegalFormatConversionException",33);
    helper.addExtendsLinks("java.util", "IllegalFormatConversionException","java.util","IllegalFormatException");
    method = helper.createMethod(newType,"IllegalFormatConversionException(char, java.lang.Class)","IllegalFormatConversionException",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getConversion()","getConversion",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "char",false,0);
    method = helper.createMethod(newType,"getArgumentClass()","getArgumentClass",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Class",false,0);
    method = helper.createMethod(newType,"getMessage()","getMessage",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IllegalFormatException",33);
    helper.addExtendsLinks("java.util", "IllegalFormatException","java.lang","IllegalArgumentException");
    method = helper.createMethod(newType,"IllegalFormatException()","IllegalFormatException",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IllegalFormatFlagsException",33);
    helper.addExtendsLinks("java.util", "IllegalFormatFlagsException","java.util","IllegalFormatException");
    method = helper.createMethod(newType,"IllegalFormatFlagsException(java.lang.String)","IllegalFormatFlagsException",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getFlags()","getFlags",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getMessage()","getMessage",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IllegalFormatPrecisionException",33);
    helper.addExtendsLinks("java.util", "IllegalFormatPrecisionException","java.util","IllegalFormatException");
    method = helper.createMethod(newType,"IllegalFormatPrecisionException(int)","IllegalFormatPrecisionException",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getPrecision()","getPrecision",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"getMessage()","getMessage",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IllegalFormatWidthException",33);
    helper.addExtendsLinks("java.util", "IllegalFormatWidthException","java.util","IllegalFormatException");
    method = helper.createMethod(newType,"IllegalFormatWidthException(int)","IllegalFormatWidthException",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getWidth()","getWidth",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"getMessage()","getMessage",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "InputMismatchException",33);
    helper.addExtendsLinks("java.util", "InputMismatchException","java.util","NoSuchElementException");
    method = helper.createMethod(newType,"InputMismatchException()","InputMismatchException",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"InputMismatchException(java.lang.String)","InputMismatchException",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "InvalidPropertiesFormatException",33);
    helper.addExtendsLinks("java.util", "InvalidPropertiesFormatException","java.io","IOException");
    method = helper.createMethod(newType,"InvalidPropertiesFormatException(java.lang.Throwable)","InvalidPropertiesFormatException",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"InvalidPropertiesFormatException(java.lang.String)","InvalidPropertiesFormatException",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "Iterator",1537);
    helper.addExtendsLinks("java.util", "Iterator","java.lang","Object");
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"next()","next",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "JumboEnumSet$EnumSetIterator",32);
    helper.addExtendsLinks("java.util", "JumboEnumSet$EnumSetIterator","java.lang","Object");
    helper.addImplementsLinks("java.util", "JumboEnumSet$EnumSetIterator","java.util","Iterator");
    helper.createField(newType,JavaTypePrimitive.class,"","long","unseen",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","unseenIndex",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","long","lastReturned",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","lastReturnedIndex",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","JumboEnumSet","this$0",4112,false,0);
    method = helper.createMethod(newType,"JumboEnumSet$EnumSetIterator(java.util.JumboEnumSet)","JumboEnumSet$EnumSetIterator",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Enum",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"next()","next",false,4161);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "JumboEnumSet",32);
    helper.addExtendsLinks("java.util", "JumboEnumSet","java.util","EnumSet");
    method = helper.createMethod(newType,"JumboEnumSet(java.lang.Class, java.lang.Enum[])","JumboEnumSet",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"addRange(java.lang.Enum, java.lang.Enum)","addRange",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"addAll()","addAll",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"complement()","complement",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"add(java.lang.Enum)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsAll(java.util.Collection)","containsAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"addAll(java.util.Collection)","addAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"removeAll(java.util.Collection)","removeAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"retainAll(java.util.Collection)","retainAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","EnumSet",false,0);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,4161);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,4161);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
        helper.addThrowsOnMethod(method, "java.lang","CloneNotSupportedException");
    method = helper.createMethod(newType,"access$000(java.util.JumboEnumSet)","access$000",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "long",true,1);
    method = helper.createMethod(newType,"access$110(java.util.JumboEnumSet)","access$110",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "LinkedHashMap$1",32);
    helper.addExtendsLinks("java.util", "LinkedHashMap$1","java.lang","Object");
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "LinkedHashMap$Entry",32);
    helper.addExtendsLinks("java.util", "LinkedHashMap$Entry","java.util","HashMap$Entry");
	helper.createField(newType,JavaType.class,"java.util","LinkedHashMap$Entry","before",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","LinkedHashMap$Entry","after",0,false,0);
    method = helper.createMethod(newType,"LinkedHashMap$Entry(int, java.lang.Object, java.lang.Object, java.util.HashMap$Entry)","LinkedHashMap$Entry",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"recordAccess(java.util.HashMap)","recordAccess",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"recordRemoval(java.util.HashMap)","recordRemoval",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"access$600(java.util.LinkedHashMap$Entry, java.util.LinkedHashMap$Entry)","access$600",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "LinkedHashMap$EntryIterator",32);
    helper.addExtendsLinks("java.util", "LinkedHashMap$EntryIterator","java.util","LinkedHashMap$LinkedHashIterator");
	helper.createField(newType,JavaType.class,"java.util","LinkedHashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Map$Entry",false,0);
    method = helper.createMethod(newType,"next()","next",false,4161);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"LinkedHashMap$EntryIterator(java.util.LinkedHashMap, java.util.LinkedHashMap$1)","LinkedHashMap$EntryIterator",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "LinkedHashMap$KeyIterator",32);
    helper.addExtendsLinks("java.util", "LinkedHashMap$KeyIterator","java.util","LinkedHashMap$LinkedHashIterator");
	helper.createField(newType,JavaType.class,"java.util","LinkedHashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"LinkedHashMap$KeyIterator(java.util.LinkedHashMap, java.util.LinkedHashMap$1)","LinkedHashMap$KeyIterator",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "LinkedHashMap$LinkedHashIterator",1056);
    helper.addExtendsLinks("java.util", "LinkedHashMap$LinkedHashIterator","java.lang","Object");
    helper.addImplementsLinks("java.util", "LinkedHashMap$LinkedHashIterator","java.util","Iterator");
	helper.createField(newType,JavaType.class,"java.util","LinkedHashMap$Entry","nextEntry",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","LinkedHashMap$Entry","lastReturned",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","expectedModCount",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","LinkedHashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"nextEntry()","nextEntry",false,0);
    helper.createMethodReturnType(method,JavaType.class,"java.util","LinkedHashMap$Entry",false,0);
    method = helper.createMethod(newType,"LinkedHashMap$LinkedHashIterator(java.util.LinkedHashMap, java.util.LinkedHashMap$1)","LinkedHashMap$LinkedHashIterator",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "LinkedHashMap$ValueIterator",32);
    helper.addExtendsLinks("java.util", "LinkedHashMap$ValueIterator","java.util","LinkedHashMap$LinkedHashIterator");
	helper.createField(newType,JavaType.class,"java.util","LinkedHashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"LinkedHashMap$ValueIterator(java.util.LinkedHashMap, java.util.LinkedHashMap$1)","LinkedHashMap$ValueIterator",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "LinkedHashMap",33);
    helper.addExtendsLinks("java.util", "LinkedHashMap","java.util","HashMap");
    helper.addImplementsLinks("java.util", "LinkedHashMap","java.util","Map");
    method = helper.createMethod(newType,"LinkedHashMap(int, float)","LinkedHashMap",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"LinkedHashMap(int)","LinkedHashMap",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"LinkedHashMap()","LinkedHashMap",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"LinkedHashMap(java.util.Map)","LinkedHashMap",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"LinkedHashMap(int, float, boolean)","LinkedHashMap",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"init()","init",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"transfer(java.util.HashMap$Entry[])","transfer",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"containsValue(java.lang.Object)","containsValue",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"get(java.lang.Object)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"newKeyIterator()","newKeyIterator",false,0);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"newValueIterator()","newValueIterator",false,0);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"newEntryIterator()","newEntryIterator",false,0);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"addEntry(int, java.lang.Object, java.lang.Object, int)","addEntry",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"createEntry(int, java.lang.Object, java.lang.Object, int)","createEntry",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"removeEldestEntry(java.util.Map$Entry)","removeEldestEntry",false,4);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"access$000(java.util.LinkedHashMap)","access$000",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"access$100(java.util.LinkedHashMap)","access$100",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.util","LinkedHashMap$Entry",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "LinkedHashSet",33);
    helper.addExtendsLinks("java.util", "LinkedHashSet","java.util","HashSet");
    helper.addImplementsLinks("java.util", "LinkedHashSet","java.util","Set");
    helper.addImplementsLinks("java.util", "LinkedHashSet","java.lang","Cloneable");
    helper.addImplementsLinks("java.util", "LinkedHashSet","java.io","Serializable");
    method = helper.createMethod(newType,"LinkedHashSet(int, float)","LinkedHashSet",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"LinkedHashSet(int)","LinkedHashSet",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"LinkedHashSet()","LinkedHashSet",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"LinkedHashSet(java.util.Collection)","LinkedHashSet",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "LinkedList$Entry",32);
    helper.addExtendsLinks("java.util", "LinkedList$Entry","java.lang","Object");
	helper.createField(newType,JavaType.class,"java.lang","Object","element",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","LinkedList$Entry","next",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","LinkedList$Entry","previous",0,false,0);
    method = helper.createMethod(newType,"LinkedList$Entry(java.lang.Object, java.util.LinkedList$Entry, java.util.LinkedList$Entry)","LinkedList$Entry",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "LinkedList$ListItr",32);
    helper.addExtendsLinks("java.util", "LinkedList$ListItr","java.lang","Object");
    helper.addImplementsLinks("java.util", "LinkedList$ListItr","java.util","ListIterator");
	helper.createField(newType,JavaType.class,"java.util","LinkedList","this$0",4112,false,0);
    method = helper.createMethod(newType,"LinkedList$ListItr(java.util.LinkedList, int)","LinkedList$ListItr",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"hasPrevious()","hasPrevious",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"previous()","previous",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"nextIndex()","nextIndex",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"previousIndex()","previousIndex",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"set(java.lang.Object)","set",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"checkForComodification()","checkForComodification",false,16);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "LinkedList",33);
    helper.addExtendsLinks("java.util", "LinkedList","java.util","AbstractSequentialList");
    helper.addImplementsLinks("java.util", "LinkedList","java.util","List");
    helper.addImplementsLinks("java.util", "LinkedList","java.util","Queue");
    helper.addImplementsLinks("java.util", "LinkedList","java.lang","Cloneable");
    helper.addImplementsLinks("java.util", "LinkedList","java.io","Serializable");
    method = helper.createMethod(newType,"LinkedList()","LinkedList",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"LinkedList(java.util.Collection)","LinkedList",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getFirst()","getFirst",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"getLast()","getLast",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"removeFirst()","removeFirst",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"removeLast()","removeLast",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"addFirst(java.lang.Object)","addFirst",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"addLast(java.lang.Object)","addLast",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"addAll(java.util.Collection)","addAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"addAll(int, java.util.Collection)","addAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"get(int)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"set(int, java.lang.Object)","set",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"add(int, java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"remove(int)","remove",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"indexOf(java.lang.Object)","indexOf",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"lastIndexOf(java.lang.Object)","lastIndexOf",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"peek()","peek",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"element()","element",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"poll()","poll",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"offer(java.lang.Object)","offer",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"listIterator(int)","listIterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","ListIterator",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"toArray()","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"toArray(java.lang.Object[])","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"access$000(java.util.LinkedList)","access$000",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.util","LinkedList$Entry",false,0);
    method = helper.createMethod(newType,"access$100(java.util.LinkedList)","access$100",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"access$200(java.util.LinkedList, java.util.LinkedList$Entry)","access$200",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"access$300(java.util.LinkedList, java.lang.Object, java.util.LinkedList$Entry)","access$300",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.util","LinkedList$Entry",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "List",1537);
    helper.addExtendsLinks("java.util", "List","java.lang","Object");
    helper.addImplementsLinks("java.util", "List","java.util","Collection");
    method = helper.createMethod(newType,"size()","size",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"toArray()","toArray",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"toArray(java.lang.Object[])","toArray",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsAll(java.util.Collection)","containsAll",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"addAll(java.util.Collection)","addAll",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"addAll(int, java.util.Collection)","addAll",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"removeAll(java.util.Collection)","removeAll",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"retainAll(java.util.Collection)","retainAll",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"get(int)","get",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"set(int, java.lang.Object)","set",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"add(int, java.lang.Object)","add",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"remove(int)","remove",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"indexOf(java.lang.Object)","indexOf",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"lastIndexOf(java.lang.Object)","lastIndexOf",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"listIterator()","listIterator",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.util","ListIterator",false,0);
    method = helper.createMethod(newType,"listIterator(int)","listIterator",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.util","ListIterator",false,0);
    method = helper.createMethod(newType,"subList(int, int)","subList",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.util","List",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "ListIterator",1537);
    helper.addExtendsLinks("java.util", "ListIterator","java.lang","Object");
    helper.addImplementsLinks("java.util", "ListIterator","java.util","Iterator");
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"next()","next",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"hasPrevious()","hasPrevious",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"previous()","previous",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"nextIndex()","nextIndex",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"previousIndex()","previousIndex",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"set(java.lang.Object)","set",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "ListResourceBundle",1057);
    helper.addExtendsLinks("java.util", "ListResourceBundle","java.util","ResourceBundle");
    method = helper.createMethod(newType,"ListResourceBundle()","ListResourceBundle",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"handleGetObject(java.lang.String)","handleGetObject",false,17);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"getKeys()","getKeys",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Enumeration",false,0);
    method = helper.createMethod(newType,"getContents()","getContents",false,1028);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,2);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Locale",49);
    helper.addExtendsLinks("java.util", "Locale","java.lang","Object");
    helper.addImplementsLinks("java.util", "Locale","java.lang","Cloneable");
    helper.addImplementsLinks("java.util", "Locale","java.io","Serializable");
	helper.createField(newType,JavaType.class,"java.util","Locale","ENGLISH",25,false,0);
	helper.createField(newType,JavaType.class,"java.util","Locale","FRENCH",25,false,0);
	helper.createField(newType,JavaType.class,"java.util","Locale","GERMAN",25,false,0);
	helper.createField(newType,JavaType.class,"java.util","Locale","ITALIAN",25,false,0);
	helper.createField(newType,JavaType.class,"java.util","Locale","JAPANESE",25,false,0);
	helper.createField(newType,JavaType.class,"java.util","Locale","KOREAN",25,false,0);
	helper.createField(newType,JavaType.class,"java.util","Locale","CHINESE",25,false,0);
	helper.createField(newType,JavaType.class,"java.util","Locale","SIMPLIFIED_CHINESE",25,false,0);
	helper.createField(newType,JavaType.class,"java.util","Locale","TRADITIONAL_CHINESE",25,false,0);
	helper.createField(newType,JavaType.class,"java.util","Locale","FRANCE",25,false,0);
	helper.createField(newType,JavaType.class,"java.util","Locale","GERMANY",25,false,0);
	helper.createField(newType,JavaType.class,"java.util","Locale","ITALY",25,false,0);
	helper.createField(newType,JavaType.class,"java.util","Locale","JAPAN",25,false,0);
	helper.createField(newType,JavaType.class,"java.util","Locale","KOREA",25,false,0);
	helper.createField(newType,JavaType.class,"java.util","Locale","CHINA",25,false,0);
	helper.createField(newType,JavaType.class,"java.util","Locale","PRC",25,false,0);
	helper.createField(newType,JavaType.class,"java.util","Locale","TAIWAN",25,false,0);
	helper.createField(newType,JavaType.class,"java.util","Locale","UK",25,false,0);
	helper.createField(newType,JavaType.class,"java.util","Locale","US",25,false,0);
	helper.createField(newType,JavaType.class,"java.util","Locale","CANADA",25,false,0);
	helper.createField(newType,JavaType.class,"java.util","Locale","CANADA_FRENCH",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","long","serialVersionUID",24,false,0);
    method = helper.createMethod(newType,"Locale(java.lang.String, java.lang.String, java.lang.String)","Locale",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Locale(java.lang.String, java.lang.String)","Locale",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Locale(java.lang.String)","Locale",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getDefault()","getDefault",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Locale",false,0);
    method = helper.createMethod(newType,"setDefault(java.util.Locale)","setDefault",false,41);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getAvailableLocales()","getAvailableLocales",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.util","Locale",true,1);
    method = helper.createMethod(newType,"getISOCountries()","getISOCountries",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","String",true,1);
    method = helper.createMethod(newType,"getISOLanguages()","getISOLanguages",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","String",true,1);
    method = helper.createMethod(newType,"getLanguage()","getLanguage",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getCountry()","getCountry",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getVariant()","getVariant",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,17);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getISO3Language()","getISO3Language",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
        helper.addThrowsOnMethod(method, "java.util","MissingResourceException");
    method = helper.createMethod(newType,"getISO3Country()","getISO3Country",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
        helper.addThrowsOnMethod(method, "java.util","MissingResourceException");
    method = helper.createMethod(newType,"getDisplayLanguage()","getDisplayLanguage",false,17);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getDisplayLanguage(java.util.Locale)","getDisplayLanguage",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getDisplayCountry()","getDisplayCountry",false,17);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getDisplayCountry(java.util.Locale)","getDisplayCountry",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getDisplayVariant()","getDisplayVariant",false,17);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getDisplayVariant(java.util.Locale)","getDisplayVariant",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getDisplayName()","getDisplayName",false,17);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getDisplayName(java.util.Locale)","getDisplayName",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "Map$Entry",1537);
    helper.addExtendsLinks("java.util", "Map$Entry","java.lang","Object");
    method = helper.createMethod(newType,"getKey()","getKey",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"getValue()","getValue",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"setValue(java.lang.Object)","setValue",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "Map",1537);
    helper.addExtendsLinks("java.util", "Map","java.lang","Object");
    method = helper.createMethod(newType,"size()","size",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsKey(java.lang.Object)","containsKey",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsValue(java.lang.Object)","containsValue",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"get(java.lang.Object)","get",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"put(java.lang.Object, java.lang.Object)","put",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"putAll(java.util.Map)","putAll",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"keySet()","keySet",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"values()","values",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Collection",false,0);
    method = helper.createMethod(newType,"entrySet()","entrySet",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "MissingFormatArgumentException",33);
    helper.addExtendsLinks("java.util", "MissingFormatArgumentException","java.util","IllegalFormatException");
    method = helper.createMethod(newType,"MissingFormatArgumentException(java.lang.String)","MissingFormatArgumentException",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getFormatSpecifier()","getFormatSpecifier",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getMessage()","getMessage",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "MissingFormatWidthException",33);
    helper.addExtendsLinks("java.util", "MissingFormatWidthException","java.util","IllegalFormatException");
    method = helper.createMethod(newType,"MissingFormatWidthException(java.lang.String)","MissingFormatWidthException",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getFormatSpecifier()","getFormatSpecifier",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getMessage()","getMessage",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "MissingResourceException",33);
    helper.addExtendsLinks("java.util", "MissingResourceException","java.lang","RuntimeException");
    method = helper.createMethod(newType,"MissingResourceException(java.lang.String, java.lang.String, java.lang.String)","MissingResourceException",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getClassName()","getClassName",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getKey()","getKey",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "NoSuchElementException",33);
    helper.addExtendsLinks("java.util", "NoSuchElementException","java.lang","RuntimeException");
    method = helper.createMethod(newType,"NoSuchElementException()","NoSuchElementException",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"NoSuchElementException(java.lang.String)","NoSuchElementException",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Observable",33);
    helper.addExtendsLinks("java.util", "Observable","java.lang","Object");
    method = helper.createMethod(newType,"Observable()","Observable",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"addObserver(java.util.Observer)","addObserver",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"deleteObserver(java.util.Observer)","deleteObserver",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"notifyObservers()","notifyObservers",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"notifyObservers(java.lang.Object)","notifyObservers",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"deleteObservers()","deleteObservers",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"setChanged()","setChanged",false,36);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"clearChanged()","clearChanged",false,36);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasChanged()","hasChanged",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"countObservers()","countObservers",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "Observer",1537);
    helper.addExtendsLinks("java.util", "Observer","java.lang","Object");
    method = helper.createMethod(newType,"update(java.util.Observable, java.lang.Object)","update",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "PriorityQueue$1",32);
    helper.addExtendsLinks("java.util", "PriorityQueue$1","java.lang","Object");
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "PriorityQueue$Itr",32);
    helper.addExtendsLinks("java.util", "PriorityQueue$Itr","java.lang","Object");
    helper.addImplementsLinks("java.util", "PriorityQueue$Itr","java.util","Iterator");
	helper.createField(newType,JavaType.class,"java.util","PriorityQueue","this$0",4112,false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"checkForComodification()","checkForComodification",false,16);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"PriorityQueue$Itr(java.util.PriorityQueue, java.util.PriorityQueue$1)","PriorityQueue$Itr",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "PriorityQueue",33);
    helper.addExtendsLinks("java.util", "PriorityQueue","java.util","AbstractQueue");
    helper.addImplementsLinks("java.util", "PriorityQueue","java.io","Serializable");
    helper.createField(newType,JavaTypePrimitive.class,"","boolean","$assertionsDisabled",4120,false,0);
    method = helper.createMethod(newType,"PriorityQueue()","PriorityQueue",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"PriorityQueue(int)","PriorityQueue",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"PriorityQueue(int, java.util.Comparator)","PriorityQueue",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"PriorityQueue(java.util.Collection)","PriorityQueue",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"PriorityQueue(java.util.PriorityQueue)","PriorityQueue",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"PriorityQueue(java.util.SortedSet)","PriorityQueue",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"offer(java.lang.Object)","offer",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"peek()","peek",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"poll()","poll",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"comparator()","comparator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Comparator",false,0);
    method = helper.createMethod(newType,"access$100(java.util.PriorityQueue)","access$100",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"access$200(java.util.PriorityQueue)","access$200",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"access$300(java.util.PriorityQueue)","access$300",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"access$400(java.util.PriorityQueue, int)","access$400",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Properties$LineReader",32);
    helper.addExtendsLinks("java.util", "Properties$LineReader","java.lang","Object");
    helper.createField(newType,JavaTypePrimitive.class,"","int","inLimit",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","inOff",0,false,0);
	helper.createField(newType,JavaType.class,"java.io","InputStream","inStream",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","Properties","this$0",4112,false,0);
    method = helper.createMethod(newType,"Properties$LineReader(java.util.Properties, java.io.InputStream)","Properties$LineReader",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"readLine()","readLine",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
        helper.addThrowsOnMethod(method, "java.io","IOException");
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Properties",33);
    helper.addExtendsLinks("java.util", "Properties","java.util","Hashtable");
	helper.createField(newType,JavaType.class,"java.util","Properties","defaults",4,false,0);
    method = helper.createMethod(newType,"Properties()","Properties",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Properties(java.util.Properties)","Properties",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"setProperty(java.lang.String, java.lang.String)","setProperty",false,33);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"load(java.io.InputStream)","load",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.io","IOException");
    method = helper.createMethod(newType,"save(java.io.OutputStream, java.lang.String)","save",false,131105);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"store(java.io.OutputStream, java.lang.String)","store",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.io","IOException");
    method = helper.createMethod(newType,"loadFromXML(java.io.InputStream)","loadFromXML",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.io","IOException");
        helper.addThrowsOnMethod(method, "java.util","InvalidPropertiesFormatException");
    method = helper.createMethod(newType,"storeToXML(java.io.OutputStream, java.lang.String)","storeToXML",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.io","IOException");
    method = helper.createMethod(newType,"storeToXML(java.io.OutputStream, java.lang.String, java.lang.String)","storeToXML",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.io","IOException");
    method = helper.createMethod(newType,"getProperty(java.lang.String)","getProperty",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getProperty(java.lang.String, java.lang.String)","getProperty",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"propertyNames()","propertyNames",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Enumeration",false,0);
    method = helper.createMethod(newType,"list(java.io.PrintStream)","list",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"list(java.io.PrintWriter)","list",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "PropertyPermission",49);
    helper.addExtendsLinks("java.util", "PropertyPermission","java.security","BasicPermission");
    method = helper.createMethod(newType,"PropertyPermission(java.lang.String, java.lang.String)","PropertyPermission",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"implies(java.security.Permission)","implies",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"getActions(int)","getActions",false,8);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getActions()","getActions",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getMask()","getMask",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"newPermissionCollection()","newPermissionCollection",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.security","PermissionCollection",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "PropertyPermissionCollection",48);
    helper.addExtendsLinks("java.util", "PropertyPermissionCollection","java.security","PermissionCollection");
    helper.addImplementsLinks("java.util", "PropertyPermissionCollection","java.io","Serializable");
    method = helper.createMethod(newType,"PropertyPermissionCollection()","PropertyPermissionCollection",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"add(java.security.Permission)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"implies(java.security.Permission)","implies",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"elements()","elements",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Enumeration",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "PropertyResourceBundle",33);
    helper.addExtendsLinks("java.util", "PropertyResourceBundle","java.util","ResourceBundle");
    method = helper.createMethod(newType,"PropertyResourceBundle(java.io.InputStream)","PropertyResourceBundle",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.io","IOException");
    method = helper.createMethod(newType,"handleGetObject(java.lang.String)","handleGetObject",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"getKeys()","getKeys",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Enumeration",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "Queue",1537);
    helper.addExtendsLinks("java.util", "Queue","java.lang","Object");
    helper.addImplementsLinks("java.util", "Queue","java.util","Collection");
    method = helper.createMethod(newType,"offer(java.lang.Object)","offer",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"poll()","poll",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"peek()","peek",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"element()","element",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Random",33);
    helper.addExtendsLinks("java.util", "Random","java.lang","Object");
    helper.addImplementsLinks("java.util", "Random","java.io","Serializable");
    helper.createField(newType,JavaTypePrimitive.class,"","long","serialVersionUID",24,false,0);
    method = helper.createMethod(newType,"Random()","Random",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Random(long)","Random",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"setSeed(long)","setSeed",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"next(int)","next",false,4);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"nextBytes(byte[])","nextBytes",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"nextInt()","nextInt",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"nextInt(int)","nextInt",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"nextLong()","nextLong",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "long",false,0);
    method = helper.createMethod(newType,"nextBoolean()","nextBoolean",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"nextFloat()","nextFloat",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "float",false,0);
    method = helper.createMethod(newType,"nextDouble()","nextDouble",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "double",false,0);
    method = helper.createMethod(newType,"nextGaussian()","nextGaussian",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "double",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "RandomAccess",1537);
    helper.addExtendsLinks("java.util", "RandomAccess","java.lang","Object");
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "RandomAccessSubList",32);
    helper.addExtendsLinks("java.util", "RandomAccessSubList","java.util","SubList");
    helper.addImplementsLinks("java.util", "RandomAccessSubList","java.util","RandomAccess");
    method = helper.createMethod(newType,"RandomAccessSubList(java.util.AbstractList, int, int)","RandomAccessSubList",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"subList(int, int)","subList",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","List",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "RegularEnumSet$EnumSetIterator",32);
    helper.addExtendsLinks("java.util", "RegularEnumSet$EnumSetIterator","java.lang","Object");
    helper.addImplementsLinks("java.util", "RegularEnumSet$EnumSetIterator","java.util","Iterator");
    helper.createField(newType,JavaTypePrimitive.class,"","long","unseen",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","long","lastReturned",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","RegularEnumSet","this$0",4112,false,0);
    method = helper.createMethod(newType,"RegularEnumSet$EnumSetIterator(java.util.RegularEnumSet)","RegularEnumSet$EnumSetIterator",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Enum",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"next()","next",false,4161);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "RegularEnumSet",32);
    helper.addExtendsLinks("java.util", "RegularEnumSet","java.util","EnumSet");
    method = helper.createMethod(newType,"RegularEnumSet(java.lang.Class, java.lang.Enum[])","RegularEnumSet",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"addRange(java.lang.Enum, java.lang.Enum)","addRange",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"addAll()","addAll",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"complement()","complement",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"add(java.lang.Enum)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsAll(java.util.Collection)","containsAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"addAll(java.util.Collection)","addAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"removeAll(java.util.Collection)","removeAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"retainAll(java.util.Collection)","retainAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,4161);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"access$000(java.util.RegularEnumSet)","access$000",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "long",false,0);
    method = helper.createMethod(newType,"access$022(java.util.RegularEnumSet, long)","access$022",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "long",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "ResourceBundle$1",32);
    helper.addExtendsLinks("java.util", "ResourceBundle$1","java.lang","Object");
    helper.addImplementsLinks("java.util", "ResourceBundle$1","java.security","PrivilegedAction");
	helper.createField(newType,JavaType.class,"java.lang","ClassLoader","val$loader",4112,false,0);
	helper.createField(newType,JavaType.class,"java.lang","String","val$resName",4112,false,0);
    method = helper.createMethod(newType,"ResourceBundle$1(java.lang.ClassLoader, java.lang.String)","ResourceBundle$1",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"run()","run",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "ResourceBundle$LoaderReference",48);
    helper.addExtendsLinks("java.util", "ResourceBundle$LoaderReference","java.lang.ref","WeakReference");
    method = helper.createMethod(newType,"ResourceBundle$LoaderReference(java.lang.Object, java.lang.ref.ReferenceQueue, java.util.ResourceBundle$ResourceCacheKey)","ResourceBundle$LoaderReference",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getCacheKey()","getCacheKey",false,0);
    helper.createMethodReturnType(method,JavaType.class,"java.util","ResourceBundle$ResourceCacheKey",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "ResourceBundle$ResourceCacheKey",48);
    helper.addExtendsLinks("java.util", "ResourceBundle$ResourceCacheKey","java.lang","Object");
    helper.addImplementsLinks("java.util", "ResourceBundle$ResourceCacheKey","java.lang","Cloneable");
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"setKeyValues(java.lang.ClassLoader, java.lang.String, java.util.Locale)","setKeyValues",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"ResourceBundle$ResourceCacheKey(java.util.ResourceBundle$1)","ResourceBundle$ResourceCacheKey",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "ResourceBundle",1057);
    helper.addExtendsLinks("java.util", "ResourceBundle","java.lang","Object");
	helper.createField(newType,JavaType.class,"java.util","ResourceBundle","parent",4,false,0);
    method = helper.createMethod(newType,"ResourceBundle()","ResourceBundle",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getString(java.lang.String)","getString",false,17);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getStringArray(java.lang.String)","getStringArray",false,17);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","String",true,1);
    method = helper.createMethod(newType,"getObject(java.lang.String)","getObject",false,17);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"getLocale()","getLocale",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Locale",false,0);
    method = helper.createMethod(newType,"setParent(java.util.ResourceBundle)","setParent",false,4);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getBundle(java.lang.String)","getBundle",false,25);
    helper.createMethodReturnType(method,JavaType.class,"java.util","ResourceBundle",false,0);
    method = helper.createMethod(newType,"getBundle(java.lang.String, java.util.Locale)","getBundle",false,25);
    helper.createMethodReturnType(method,JavaType.class,"java.util","ResourceBundle",false,0);
    method = helper.createMethod(newType,"getBundle(java.lang.String, java.util.Locale, java.lang.ClassLoader)","getBundle",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","ResourceBundle",false,0);
    method = helper.createMethod(newType,"handleGetObject(java.lang.String)","handleGetObject",false,1028);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"getKeys()","getKeys",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Enumeration",false,0);
    method = helper.createMethod(newType,"access$100()","access$100",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.lang.ref","ReferenceQueue",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "ResourceBundleEnumeration",32);
    helper.addExtendsLinks("java.util", "ResourceBundleEnumeration","java.lang","Object");
    helper.addImplementsLinks("java.util", "ResourceBundleEnumeration","java.util","Enumeration");
	helper.createField(newType,JavaType.class,"java.util","Set","set",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","Iterator","iterator",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","Enumeration","enumeration",0,false,0);
	helper.createField(newType,JavaType.class,"java.lang","String","next",0,false,0);
    method = helper.createMethod(newType,"ResourceBundleEnumeration(java.util.Set, java.util.Enumeration)","ResourceBundleEnumeration",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasMoreElements()","hasMoreElements",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"nextElement()","nextElement",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"nextElement()","nextElement",false,4161);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Scanner$1",32);
    helper.addExtendsLinks("java.util", "Scanner$1","sun.misc","LRUCache");
	helper.createField(newType,JavaType.class,"java.util","Scanner","this$0",4112,false,0);
    method = helper.createMethod(newType,"Scanner$1(java.util.Scanner, int)","Scanner$1",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"create(java.lang.String)","create",false,4);
    helper.createMethodReturnType(method,JavaType.class,"java.util.regex","Pattern",false,0);
    method = helper.createMethod(newType,"hasName(java.util.regex.Pattern, java.lang.String)","hasName",false,4);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hasName(java.lang.Object, java.lang.Object)","hasName",false,4164);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"create(java.lang.Object)","create",false,4164);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Scanner",49);
    helper.addExtendsLinks("java.util", "Scanner","java.lang","Object");
    helper.addImplementsLinks("java.util", "Scanner","java.util","Iterator");
    method = helper.createMethod(newType,"Scanner(java.lang.Readable)","Scanner",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Scanner(java.io.InputStream)","Scanner",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Scanner(java.io.InputStream, java.lang.String)","Scanner",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Scanner(java.io.File)","Scanner",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.io","FileNotFoundException");
    method = helper.createMethod(newType,"Scanner(java.io.File, java.lang.String)","Scanner",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.io","FileNotFoundException");
    method = helper.createMethod(newType,"Scanner(java.lang.String)","Scanner",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Scanner(java.nio.channels.ReadableByteChannel)","Scanner",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Scanner(java.nio.channels.ReadableByteChannel, java.lang.String)","Scanner",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"close()","close",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"ioException()","ioException",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.io","IOException",false,0);
    method = helper.createMethod(newType,"delimiter()","delimiter",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util.regex","Pattern",false,0);
    method = helper.createMethod(newType,"useDelimiter(java.util.regex.Pattern)","useDelimiter",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Scanner",false,0);
    method = helper.createMethod(newType,"useDelimiter(java.lang.String)","useDelimiter",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Scanner",false,0);
    method = helper.createMethod(newType,"locale()","locale",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Locale",false,0);
    method = helper.createMethod(newType,"useLocale(java.util.Locale)","useLocale",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Scanner",false,0);
    method = helper.createMethod(newType,"radix()","radix",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"useRadix(int)","useRadix",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Scanner",false,0);
    method = helper.createMethod(newType,"match()","match",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util.regex","MatchResult",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasNext(java.lang.String)","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"next(java.lang.String)","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"hasNext(java.util.regex.Pattern)","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"next(java.util.regex.Pattern)","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"hasNextLine()","hasNextLine",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"nextLine()","nextLine",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"findInLine(java.lang.String)","findInLine",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"findInLine(java.util.regex.Pattern)","findInLine",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"findWithinHorizon(java.lang.String, int)","findWithinHorizon",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"findWithinHorizon(java.util.regex.Pattern, int)","findWithinHorizon",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"skip(java.util.regex.Pattern)","skip",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Scanner",false,0);
    method = helper.createMethod(newType,"skip(java.lang.String)","skip",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Scanner",false,0);
    method = helper.createMethod(newType,"hasNextBoolean()","hasNextBoolean",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"nextBoolean()","nextBoolean",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hasNextByte()","hasNextByte",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hasNextByte(int)","hasNextByte",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"nextByte()","nextByte",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "byte",false,0);
    method = helper.createMethod(newType,"nextByte(int)","nextByte",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "byte",false,0);
    method = helper.createMethod(newType,"hasNextShort()","hasNextShort",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hasNextShort(int)","hasNextShort",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"nextShort()","nextShort",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "short",false,0);
    method = helper.createMethod(newType,"nextShort(int)","nextShort",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "short",false,0);
    method = helper.createMethod(newType,"hasNextInt()","hasNextInt",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hasNextInt(int)","hasNextInt",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"nextInt()","nextInt",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"nextInt(int)","nextInt",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"hasNextLong()","hasNextLong",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hasNextLong(int)","hasNextLong",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"nextLong()","nextLong",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "long",false,0);
    method = helper.createMethod(newType,"nextLong(int)","nextLong",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "long",false,0);
    method = helper.createMethod(newType,"hasNextFloat()","hasNextFloat",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"nextFloat()","nextFloat",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "float",false,0);
    method = helper.createMethod(newType,"hasNextDouble()","hasNextDouble",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"nextDouble()","nextDouble",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "double",false,0);
    method = helper.createMethod(newType,"hasNextBigInteger()","hasNextBigInteger",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hasNextBigInteger(int)","hasNextBigInteger",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"nextBigInteger()","nextBigInteger",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.math","BigInteger",false,0);
    method = helper.createMethod(newType,"nextBigInteger(int)","nextBigInteger",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.math","BigInteger",false,0);
    method = helper.createMethod(newType,"hasNextBigDecimal()","hasNextBigDecimal",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"nextBigDecimal()","nextBigDecimal",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.math","BigDecimal",false,0);
    method = helper.createMethod(newType,"next()","next",false,4161);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "Set",1537);
    helper.addExtendsLinks("java.util", "Set","java.lang","Object");
    helper.addImplementsLinks("java.util", "Set","java.util","Collection");
    method = helper.createMethod(newType,"size()","size",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"toArray()","toArray",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"toArray(java.lang.Object[])","toArray",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsAll(java.util.Collection)","containsAll",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"addAll(java.util.Collection)","addAll",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"retainAll(java.util.Collection)","retainAll",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"removeAll(java.util.Collection)","removeAll",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "SimpleTimeZone",33);
    helper.addExtendsLinks("java.util", "SimpleTimeZone","java.util","TimeZone");
    helper.createField(newType,JavaTypePrimitive.class,"","int","WALL_TIME",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","STANDARD_TIME",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","UTC_TIME",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","long","serialVersionUID",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","currentSerialVersion",24,false,0);
    method = helper.createMethod(newType,"SimpleTimeZone(int, java.lang.String)","SimpleTimeZone",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"SimpleTimeZone(int, java.lang.String, int, int, int, int, int, int, int, int)","SimpleTimeZone",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"SimpleTimeZone(int, java.lang.String, int, int, int, int, int, int, int, int, int)","SimpleTimeZone",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"SimpleTimeZone(int, java.lang.String, int, int, int, int, int, int, int, int, int, int, int)","SimpleTimeZone",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"setStartYear(int)","setStartYear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"setStartRule(int, int, int, int)","setStartRule",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"setStartRule(int, int, int)","setStartRule",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"setStartRule(int, int, int, int, boolean)","setStartRule",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"setEndRule(int, int, int, int)","setEndRule",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"setEndRule(int, int, int)","setEndRule",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"setEndRule(int, int, int, int, boolean)","setEndRule",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getOffset(long)","getOffset",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"getOffsets(long, int[])","getOffsets",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"getOffset(int, int, int, int, int, int)","getOffset",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"getRawOffset()","getRawOffset",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"setRawOffset(int)","setRawOffset",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"setDSTSavings(int)","setDSTSavings",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getDSTSavings()","getDSTSavings",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"useDaylightTime()","useDaylightTime",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"inDaylightTime(java.util.Date)","inDaylightTime",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hasSameRules(java.util.TimeZone)","hasSameRules",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "SortedMap",1537);
    helper.addExtendsLinks("java.util", "SortedMap","java.lang","Object");
    helper.addImplementsLinks("java.util", "SortedMap","java.util","Map");
    method = helper.createMethod(newType,"comparator()","comparator",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Comparator",false,0);
    method = helper.createMethod(newType,"subMap(java.lang.Object, java.lang.Object)","subMap",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedMap",false,0);
    method = helper.createMethod(newType,"headMap(java.lang.Object)","headMap",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedMap",false,0);
    method = helper.createMethod(newType,"tailMap(java.lang.Object)","tailMap",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedMap",false,0);
    method = helper.createMethod(newType,"firstKey()","firstKey",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"lastKey()","lastKey",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "SortedSet",1537);
    helper.addExtendsLinks("java.util", "SortedSet","java.lang","Object");
    helper.addImplementsLinks("java.util", "SortedSet","java.util","Set");
    method = helper.createMethod(newType,"comparator()","comparator",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Comparator",false,0);
    method = helper.createMethod(newType,"subSet(java.lang.Object, java.lang.Object)","subSet",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedSet",false,0);
    method = helper.createMethod(newType,"headSet(java.lang.Object)","headSet",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedSet",false,0);
    method = helper.createMethod(newType,"tailSet(java.lang.Object)","tailSet",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedSet",false,0);
    method = helper.createMethod(newType,"first()","first",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"last()","last",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Stack",33);
    helper.addExtendsLinks("java.util", "Stack","java.util","Vector");
    method = helper.createMethod(newType,"Stack()","Stack",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"push(java.lang.Object)","push",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"pop()","pop",false,33);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"peek()","peek",false,33);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"empty()","empty",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"search(java.lang.Object)","search",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "StringTokenizer",33);
    helper.addExtendsLinks("java.util", "StringTokenizer","java.lang","Object");
    helper.addImplementsLinks("java.util", "StringTokenizer","java.util","Enumeration");
    method = helper.createMethod(newType,"StringTokenizer(java.lang.String, java.lang.String, boolean)","StringTokenizer",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"StringTokenizer(java.lang.String, java.lang.String)","StringTokenizer",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"StringTokenizer(java.lang.String)","StringTokenizer",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasMoreTokens()","hasMoreTokens",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"nextToken()","nextToken",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"nextToken(java.lang.String)","nextToken",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"hasMoreElements()","hasMoreElements",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"nextElement()","nextElement",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"countTokens()","countTokens",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "SubList$1",32);
    helper.addExtendsLinks("java.util", "SubList$1","java.lang","Object");
    helper.addImplementsLinks("java.util", "SubList$1","java.util","ListIterator");
    helper.createField(newType,JavaTypePrimitive.class,"","int","val$index",4112,false,0);
	helper.createField(newType,JavaType.class,"java.util","SubList","this$0",4112,false,0);
    method = helper.createMethod(newType,"SubList$1(java.util.SubList, int)","SubList$1",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"hasPrevious()","hasPrevious",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"previous()","previous",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"nextIndex()","nextIndex",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"previousIndex()","previousIndex",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"set(java.lang.Object)","set",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "SubList",32);
    helper.addExtendsLinks("java.util", "SubList","java.util","AbstractList");
    method = helper.createMethod(newType,"SubList(java.util.AbstractList, int, int)","SubList",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"set(int, java.lang.Object)","set",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"get(int)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"add(int, java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"remove(int)","remove",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"removeRange(int, int)","removeRange",false,4);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"addAll(java.util.Collection)","addAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"addAll(int, java.util.Collection)","addAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"listIterator(int)","listIterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","ListIterator",false,0);
    method = helper.createMethod(newType,"subList(int, int)","subList",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","List",false,0);
    method = helper.createMethod(newType,"access$000(java.util.SubList)","access$000",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"access$100(java.util.SubList)","access$100",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.util","AbstractList",false,0);
    method = helper.createMethod(newType,"access$200(java.util.SubList)","access$200",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"access$302(java.util.SubList, int)","access$302",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"access$210(java.util.SubList)","access$210",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"access$208(java.util.SubList)","access$208",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TaskQueue",32);
    helper.addExtendsLinks("java.util", "TaskQueue","java.lang","Object");
    helper.createField(newType,JavaTypePrimitive.class,"","boolean","$assertionsDisabled",4120,false,0);
    method = helper.createMethod(newType,"TaskQueue()","TaskQueue",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"size()","size",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"add(java.util.TimerTask)","add",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getMin()","getMin",false,0);
    helper.createMethodReturnType(method,JavaType.class,"java.util","TimerTask",false,0);
    method = helper.createMethod(newType,"get(int)","get",false,0);
    helper.createMethodReturnType(method,JavaType.class,"java.util","TimerTask",false,0);
    method = helper.createMethod(newType,"removeMin()","removeMin",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"quickRemove(int)","quickRemove",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"rescheduleMin(long)","rescheduleMin",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"heapify()","heapify",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Timer$1",32);
    helper.addExtendsLinks("java.util", "Timer$1","java.lang","Object");
	helper.createField(newType,JavaType.class,"java.util","Timer","this$0",4112,false,0);
    method = helper.createMethod(newType,"Timer$1(java.util.Timer)","Timer$1",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"finalize()","finalize",false,4);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.lang","Throwable");
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Timer",33);
    helper.addExtendsLinks("java.util", "Timer","java.lang","Object");
    method = helper.createMethod(newType,"Timer()","Timer",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Timer(boolean)","Timer",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Timer(java.lang.String)","Timer",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Timer(java.lang.String, boolean)","Timer",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"schedule(java.util.TimerTask, long)","schedule",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"schedule(java.util.TimerTask, java.util.Date)","schedule",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"schedule(java.util.TimerTask, long, long)","schedule",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"schedule(java.util.TimerTask, java.util.Date, long)","schedule",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"scheduleAtFixedRate(java.util.TimerTask, long, long)","scheduleAtFixedRate",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"scheduleAtFixedRate(java.util.TimerTask, java.util.Date, long)","scheduleAtFixedRate",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"cancel()","cancel",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"purge()","purge",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"access$000(java.util.Timer)","access$000",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.util","TaskQueue",false,0);
    method = helper.createMethod(newType,"access$100(java.util.Timer)","access$100",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.util","TimerThread",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TimerTask",1057);
    helper.addExtendsLinks("java.util", "TimerTask","java.lang","Object");
    helper.addImplementsLinks("java.util", "TimerTask","java.lang","Runnable");
	helper.createField(newType,JavaType.class,"java.lang","Object","lock",16,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","state",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","VIRGIN",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","SCHEDULED",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","EXECUTED",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","CANCELLED",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","long","nextExecutionTime",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","long","period",0,false,0);
    method = helper.createMethod(newType,"TimerTask()","TimerTask",true,4);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"run()","run",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"cancel()","cancel",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"scheduledExecutionTime()","scheduledExecutionTime",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "long",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TimerThread",32);
    helper.addExtendsLinks("java.util", "TimerThread","java.lang","Thread");
    helper.createField(newType,JavaTypePrimitive.class,"","boolean","newTasksMayBeScheduled",0,false,0);
    method = helper.createMethod(newType,"TimerThread(java.util.TaskQueue)","TimerThread",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"run()","run",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TimeZone$1",32);
    helper.addExtendsLinks("java.util", "TimeZone$1","java.lang","Object");
    helper.addImplementsLinks("java.util", "TimeZone$1","java.security","PrivilegedAction");
	helper.createField(newType,JavaType.class,"java.lang","String","val$id",4112,false,0);
    method = helper.createMethod(newType,"TimeZone$1(java.lang.String)","TimeZone$1",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"run()","run",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TimeZone$DisplayNames",32);
    helper.addExtendsLinks("java.util", "TimeZone$DisplayNames","java.lang","Object");
    method = helper.createMethod(newType,"access$000()","access$000",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Map",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TimeZone",1057);
    helper.addExtendsLinks("java.util", "TimeZone","java.lang","Object");
    helper.addImplementsLinks("java.util", "TimeZone","java.io","Serializable");
    helper.addImplementsLinks("java.util", "TimeZone","java.lang","Cloneable");
    helper.createField(newType,JavaTypePrimitive.class,"","int","SHORT",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","LONG",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","long","serialVersionUID",24,false,0);
	helper.createField(newType,JavaType.class,"java.util","TimeZone","NO_TIMEZONE",24,false,0);
	helper.createField(newType,JavaType.class,"java.lang","String","GMT_ID",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","boolean","$assertionsDisabled",4120,false,0);
    method = helper.createMethod(newType,"TimeZone()","TimeZone",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getOffset(int, int, int, int, int, int)","getOffset",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"getOffset(long)","getOffset",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"getOffsets(long, int[])","getOffsets",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"setRawOffset(int)","setRawOffset",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getRawOffset()","getRawOffset",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"getID()","getID",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"setID(java.lang.String)","setID",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getDisplayName()","getDisplayName",false,17);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getDisplayName(java.util.Locale)","getDisplayName",false,17);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getDisplayName(boolean, int)","getDisplayName",false,17);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getDisplayName(boolean, int, java.util.Locale)","getDisplayName",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getDSTSavings()","getDSTSavings",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"useDaylightTime()","useDaylightTime",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"inDaylightTime(java.util.Date)","inDaylightTime",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"getTimeZone(java.lang.String)","getTimeZone",false,41);
    helper.createMethodReturnType(method,JavaType.class,"java.util","TimeZone",false,0);
    method = helper.createMethod(newType,"getAvailableIDs(int)","getAvailableIDs",false,41);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","String",true,1);
    method = helper.createMethod(newType,"getAvailableIDs()","getAvailableIDs",false,41);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","String",true,1);
    method = helper.createMethod(newType,"getDefault()","getDefault",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","TimeZone",false,0);
    method = helper.createMethod(newType,"getDefaultRef()","getDefaultRef",false,8);
    helper.createMethodReturnType(method,JavaType.class,"java.util","TimeZone",false,0);
    method = helper.createMethod(newType,"setDefault(java.util.TimeZone)","setDefault",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasSameRules(java.util.TimeZone)","hasSameRules",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TooManyListenersException",33);
    helper.addExtendsLinks("java.util", "TooManyListenersException","java.lang","Exception");
    method = helper.createMethod(newType,"TooManyListenersException()","TooManyListenersException",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"TooManyListenersException(java.lang.String)","TooManyListenersException",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeMap$1",32);
    helper.addExtendsLinks("java.util", "TreeMap$1","java.util","AbstractSet");
	helper.createField(newType,JavaType.class,"java.util","TreeMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"TreeMap$1(java.util.TreeMap)","TreeMap$1",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeMap$2",32);
    helper.addExtendsLinks("java.util", "TreeMap$2","java.util","AbstractCollection");
	helper.createField(newType,JavaType.class,"java.util","TreeMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"TreeMap$2(java.util.TreeMap)","TreeMap$2",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeMap$3",32);
    helper.addExtendsLinks("java.util", "TreeMap$3","java.util","AbstractSet");
	helper.createField(newType,JavaType.class,"java.util","TreeMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"TreeMap$3(java.util.TreeMap)","TreeMap$3",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeMap$Entry",32);
    helper.addExtendsLinks("java.util", "TreeMap$Entry","java.lang","Object");
    helper.addImplementsLinks("java.util", "TreeMap$Entry","java.util","Map$Entry");
	helper.createField(newType,JavaType.class,"java.lang","Object","key",0,false,0);
	helper.createField(newType,JavaType.class,"java.lang","Object","value",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","TreeMap$Entry","left",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","TreeMap$Entry","right",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","TreeMap$Entry","parent",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","boolean","color",0,false,0);
    method = helper.createMethod(newType,"TreeMap$Entry(java.lang.Object, java.lang.Object, java.util.TreeMap$Entry)","TreeMap$Entry",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getKey()","getKey",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"getValue()","getValue",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"setValue(java.lang.Object)","setValue",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeMap$EntryIterator",32);
    helper.addExtendsLinks("java.util", "TreeMap$EntryIterator","java.util","TreeMap$PrivateEntryIterator");
	helper.createField(newType,JavaType.class,"java.util","TreeMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Map$Entry",false,0);
    method = helper.createMethod(newType,"next()","next",false,4161);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"TreeMap$EntryIterator(java.util.TreeMap, java.util.TreeMap$1)","TreeMap$EntryIterator",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeMap$KeyIterator",32);
    helper.addExtendsLinks("java.util", "TreeMap$KeyIterator","java.util","TreeMap$PrivateEntryIterator");
	helper.createField(newType,JavaType.class,"java.util","TreeMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"TreeMap$KeyIterator(java.util.TreeMap, java.util.TreeMap$1)","TreeMap$KeyIterator",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeMap$PrivateEntryIterator",1056);
    helper.addExtendsLinks("java.util", "TreeMap$PrivateEntryIterator","java.lang","Object");
    helper.addImplementsLinks("java.util", "TreeMap$PrivateEntryIterator","java.util","Iterator");
	helper.createField(newType,JavaType.class,"java.util","TreeMap$Entry","next",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","TreeMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"TreeMap$PrivateEntryIterator(java.util.TreeMap)","TreeMap$PrivateEntryIterator",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"TreeMap$PrivateEntryIterator(java.util.TreeMap, java.util.TreeMap$Entry)","TreeMap$PrivateEntryIterator",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"nextEntry()","nextEntry",false,16);
    helper.createMethodReturnType(method,JavaType.class,"java.util","TreeMap$Entry",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeMap$SubMap$EntrySetView",32);
    helper.addExtendsLinks("java.util", "TreeMap$SubMap$EntrySetView","java.util","AbstractSet");
	helper.createField(newType,JavaType.class,"java.util","TreeMap$SubMap","this$1",4112,false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"TreeMap$SubMap$EntrySetView(java.util.TreeMap$SubMap, java.util.TreeMap$1)","TreeMap$SubMap$EntrySetView",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeMap$SubMap",32);
    helper.addExtendsLinks("java.util", "TreeMap$SubMap","java.util","AbstractMap");
    helper.addImplementsLinks("java.util", "TreeMap$SubMap","java.util","SortedMap");
    helper.addImplementsLinks("java.util", "TreeMap$SubMap","java.io","Serializable");
	helper.createField(newType,JavaType.class,"java.util","TreeMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"TreeMap$SubMap(java.util.TreeMap, java.lang.Object, java.lang.Object)","TreeMap$SubMap",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"TreeMap$SubMap(java.util.TreeMap, java.lang.Object, boolean)","TreeMap$SubMap",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"TreeMap$SubMap(java.util.TreeMap, boolean, java.lang.Object, boolean, java.lang.Object)","TreeMap$SubMap",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsKey(java.lang.Object)","containsKey",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"get(java.lang.Object)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"put(java.lang.Object, java.lang.Object)","put",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"comparator()","comparator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Comparator",false,0);
    method = helper.createMethod(newType,"firstKey()","firstKey",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"lastKey()","lastKey",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"entrySet()","entrySet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"subMap(java.lang.Object, java.lang.Object)","subMap",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedMap",false,0);
    method = helper.createMethod(newType,"headMap(java.lang.Object)","headMap",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedMap",false,0);
    method = helper.createMethod(newType,"tailMap(java.lang.Object)","tailMap",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedMap",false,0);
    method = helper.createMethod(newType,"access$1700(java.util.TreeMap$SubMap, java.lang.Object)","access$1700",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"access$1800(java.util.TreeMap$SubMap)","access$1800",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"access$1900(java.util.TreeMap$SubMap)","access$1900",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"access$2000(java.util.TreeMap$SubMap)","access$2000",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"access$2100(java.util.TreeMap$SubMap)","access$2100",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeMap$SubMapEntryIterator",32);
    helper.addExtendsLinks("java.util", "TreeMap$SubMapEntryIterator","java.util","TreeMap$PrivateEntryIterator");
	helper.createField(newType,JavaType.class,"java.util","TreeMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"TreeMap$SubMapEntryIterator(java.util.TreeMap, java.util.TreeMap$Entry, java.util.TreeMap$Entry)","TreeMap$SubMapEntryIterator",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Map$Entry",false,0);
    method = helper.createMethod(newType,"next()","next",false,4161);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeMap$ValueIterator",32);
    helper.addExtendsLinks("java.util", "TreeMap$ValueIterator","java.util","TreeMap$PrivateEntryIterator");
	helper.createField(newType,JavaType.class,"java.util","TreeMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"TreeMap$ValueIterator(java.util.TreeMap, java.util.TreeMap$1)","TreeMap$ValueIterator",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeMap",33);
    helper.addExtendsLinks("java.util", "TreeMap","java.util","AbstractMap");
    helper.addImplementsLinks("java.util", "TreeMap","java.util","SortedMap");
    helper.addImplementsLinks("java.util", "TreeMap","java.lang","Cloneable");
    helper.addImplementsLinks("java.util", "TreeMap","java.io","Serializable");
    method = helper.createMethod(newType,"TreeMap()","TreeMap",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"TreeMap(java.util.Comparator)","TreeMap",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"TreeMap(java.util.Map)","TreeMap",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"TreeMap(java.util.SortedMap)","TreeMap",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"containsKey(java.lang.Object)","containsKey",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsValue(java.lang.Object)","containsValue",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"get(java.lang.Object)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"comparator()","comparator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Comparator",false,0);
    method = helper.createMethod(newType,"firstKey()","firstKey",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"lastKey()","lastKey",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"putAll(java.util.Map)","putAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"put(java.lang.Object, java.lang.Object)","put",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"keySet()","keySet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"values()","values",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Collection",false,0);
    method = helper.createMethod(newType,"entrySet()","entrySet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"subMap(java.lang.Object, java.lang.Object)","subMap",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedMap",false,0);
    method = helper.createMethod(newType,"headMap(java.lang.Object)","headMap",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedMap",false,0);
    method = helper.createMethod(newType,"tailMap(java.lang.Object)","tailMap",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedMap",false,0);
    method = helper.createMethod(newType,"readTreeSet(int, java.io.ObjectInputStream, java.lang.Object)","readTreeSet",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.io","IOException");
        helper.addThrowsOnMethod(method, "java.lang","ClassNotFoundException");
    method = helper.createMethod(newType,"addAllForTreeSet(java.util.SortedSet, java.lang.Object)","addAllForTreeSet",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"access$100(java.util.TreeMap)","access$100",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"access$300(java.util.TreeMap)","access$300",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.util","TreeMap$Entry",false,0);
    method = helper.createMethod(newType,"access$400(java.util.TreeMap, java.util.TreeMap$Entry)","access$400",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.util","TreeMap$Entry",false,0);
    method = helper.createMethod(newType,"access$500(java.lang.Object, java.lang.Object)","access$500",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"access$600(java.util.TreeMap, java.util.TreeMap$Entry)","access$600",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"access$800(java.util.TreeMap, java.lang.Object)","access$800",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.util","TreeMap$Entry",false,0);
    method = helper.createMethod(newType,"access$900(java.util.TreeMap, java.lang.Object, java.lang.Object)","access$900",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"access$1000(java.util.TreeMap)","access$1000",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Comparator",false,0);
    method = helper.createMethod(newType,"access$1100(java.util.TreeMap, java.lang.Object)","access$1100",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.util","TreeMap$Entry",false,0);
    method = helper.createMethod(newType,"access$1200(java.util.TreeMap$Entry)","access$1200",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"access$1300(java.util.TreeMap)","access$1300",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.util","TreeMap$Entry",false,0);
    method = helper.createMethod(newType,"access$1400(java.util.TreeMap, java.lang.Object)","access$1400",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.util","TreeMap$Entry",false,0);
    method = helper.createMethod(newType,"access$1600(java.util.TreeMap)","access$1600",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeSet",33);
    helper.addExtendsLinks("java.util", "TreeSet","java.util","AbstractSet");
    helper.addImplementsLinks("java.util", "TreeSet","java.util","SortedSet");
    helper.addImplementsLinks("java.util", "TreeSet","java.lang","Cloneable");
    helper.addImplementsLinks("java.util", "TreeSet","java.io","Serializable");
    method = helper.createMethod(newType,"TreeSet()","TreeSet",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"TreeSet(java.util.Comparator)","TreeSet",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"TreeSet(java.util.Collection)","TreeSet",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"TreeSet(java.util.SortedSet)","TreeSet",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"addAll(java.util.Collection)","addAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"subSet(java.lang.Object, java.lang.Object)","subSet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedSet",false,0);
    method = helper.createMethod(newType,"headSet(java.lang.Object)","headSet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedSet",false,0);
    method = helper.createMethod(newType,"tailSet(java.lang.Object)","tailSet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedSet",false,0);
    method = helper.createMethod(newType,"comparator()","comparator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Comparator",false,0);
    method = helper.createMethod(newType,"first()","first",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"last()","last",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "UnknownFormatConversionException",33);
    helper.addExtendsLinks("java.util", "UnknownFormatConversionException","java.util","IllegalFormatException");
    method = helper.createMethod(newType,"UnknownFormatConversionException(java.lang.String)","UnknownFormatConversionException",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getConversion()","getConversion",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getMessage()","getMessage",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "UnknownFormatFlagsException",33);
    helper.addExtendsLinks("java.util", "UnknownFormatFlagsException","java.util","IllegalFormatException");
    method = helper.createMethod(newType,"UnknownFormatFlagsException(java.lang.String)","UnknownFormatFlagsException",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getFlags()","getFlags",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getMessage()","getMessage",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "UUID",49);
    helper.addExtendsLinks("java.util", "UUID","java.lang","Object");
    helper.addImplementsLinks("java.util", "UUID","java.io","Serializable");
    helper.addImplementsLinks("java.util", "UUID","java.lang","Comparable");
    helper.createField(newType,JavaTypePrimitive.class,"","boolean","$assertionsDisabled",4120,false,0);
    method = helper.createMethod(newType,"UUID(long, long)","UUID",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"randomUUID()","randomUUID",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","UUID",false,0);
    method = helper.createMethod(newType,"nameUUIDFromBytes(byte[])","nameUUIDFromBytes",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","UUID",false,0);
    method = helper.createMethod(newType,"fromString(java.lang.String)","fromString",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","UUID",false,0);
    method = helper.createMethod(newType,"getLeastSignificantBits()","getLeastSignificantBits",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "long",false,0);
    method = helper.createMethod(newType,"getMostSignificantBits()","getMostSignificantBits",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "long",false,0);
    method = helper.createMethod(newType,"version()","version",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"variant()","variant",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"timestamp()","timestamp",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "long",false,0);
    method = helper.createMethod(newType,"clockSequence()","clockSequence",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"node()","node",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "long",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"compareTo(java.util.UUID)","compareTo",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"compareTo(java.lang.Object)","compareTo",false,4161);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Vector$1",32);
    helper.addExtendsLinks("java.util", "Vector$1","java.lang","Object");
    helper.addImplementsLinks("java.util", "Vector$1","java.util","Enumeration");
    helper.createField(newType,JavaTypePrimitive.class,"","int","count",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","Vector","this$0",4112,false,0);
    method = helper.createMethod(newType,"Vector$1(java.util.Vector)","Vector$1",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasMoreElements()","hasMoreElements",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"nextElement()","nextElement",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Vector",33);
    helper.addExtendsLinks("java.util", "Vector","java.util","AbstractList");
    helper.addImplementsLinks("java.util", "Vector","java.util","List");
    helper.addImplementsLinks("java.util", "Vector","java.util","RandomAccess");
    helper.addImplementsLinks("java.util", "Vector","java.lang","Cloneable");
    helper.addImplementsLinks("java.util", "Vector","java.io","Serializable");
    helper.createField(newType,JavaTypePrimitive.class,"","int","elementCount",4,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","capacityIncrement",4,false,0);
    method = helper.createMethod(newType,"Vector(int, int)","Vector",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Vector(int)","Vector",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Vector()","Vector",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Vector(java.util.Collection)","Vector",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"copyInto(java.lang.Object[])","copyInto",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"trimToSize()","trimToSize",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"ensureCapacity(int)","ensureCapacity",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"setSize(int)","setSize",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"capacity()","capacity",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"size()","size",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"elements()","elements",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Enumeration",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"indexOf(java.lang.Object)","indexOf",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"indexOf(java.lang.Object, int)","indexOf",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"lastIndexOf(java.lang.Object)","lastIndexOf",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"lastIndexOf(java.lang.Object, int)","lastIndexOf",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"elementAt(int)","elementAt",false,33);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"firstElement()","firstElement",false,33);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"lastElement()","lastElement",false,33);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"setElementAt(java.lang.Object, int)","setElementAt",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"removeElementAt(int)","removeElementAt",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"insertElementAt(java.lang.Object, int)","insertElementAt",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"addElement(java.lang.Object)","addElement",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"removeElement(java.lang.Object)","removeElement",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"removeAllElements()","removeAllElements",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,33);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"toArray()","toArray",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"toArray(java.lang.Object[])","toArray",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"get(int)","get",false,33);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"set(int, java.lang.Object)","set",false,33);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"add(int, java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"remove(int)","remove",false,33);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"containsAll(java.util.Collection)","containsAll",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"addAll(java.util.Collection)","addAll",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"removeAll(java.util.Collection)","removeAll",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"retainAll(java.util.Collection)","retainAll",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"addAll(int, java.util.Collection)","addAll",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,33);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"subList(int, int)","subList",false,33);
    helper.createMethodReturnType(method,JavaType.class,"java.util","List",false,0);
    method = helper.createMethod(newType,"removeRange(int, int)","removeRange",false,36);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "WeakHashMap$1",32);
    helper.addExtendsLinks("java.util", "WeakHashMap$1","java.lang","Object");
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "WeakHashMap$Entry",32);
    helper.addExtendsLinks("java.util", "WeakHashMap$Entry","java.lang.ref","WeakReference");
    helper.addImplementsLinks("java.util", "WeakHashMap$Entry","java.util","Map$Entry");
    method = helper.createMethod(newType,"WeakHashMap$Entry(java.lang.Object, java.lang.Object, java.lang.ref.ReferenceQueue, int, java.util.WeakHashMap$Entry)","WeakHashMap$Entry",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getKey()","getKey",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"getValue()","getValue",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"setValue(java.lang.Object)","setValue",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"access$000(java.util.WeakHashMap$Entry)","access$000",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"access$100(java.util.WeakHashMap$Entry)","access$100",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.util","WeakHashMap$Entry",false,0);
    method = helper.createMethod(newType,"access$102(java.util.WeakHashMap$Entry, java.util.WeakHashMap$Entry)","access$102",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.util","WeakHashMap$Entry",false,0);
    method = helper.createMethod(newType,"access$202(java.util.WeakHashMap$Entry, java.lang.Object)","access$202",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"access$200(java.util.WeakHashMap$Entry)","access$200",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "WeakHashMap$EntryIterator",32);
    helper.addExtendsLinks("java.util", "WeakHashMap$EntryIterator","java.util","WeakHashMap$HashIterator");
	helper.createField(newType,JavaType.class,"java.util","WeakHashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Map$Entry",false,0);
    method = helper.createMethod(newType,"next()","next",false,4161);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"WeakHashMap$EntryIterator(java.util.WeakHashMap, java.util.WeakHashMap$1)","WeakHashMap$EntryIterator",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "WeakHashMap$EntrySet",32);
    helper.addExtendsLinks("java.util", "WeakHashMap$EntrySet","java.util","AbstractSet");
	helper.createField(newType,JavaType.class,"java.util","WeakHashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"toArray()","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"toArray(java.lang.Object[])","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"WeakHashMap$EntrySet(java.util.WeakHashMap, java.util.WeakHashMap$1)","WeakHashMap$EntrySet",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "WeakHashMap$HashIterator",1056);
    helper.addExtendsLinks("java.util", "WeakHashMap$HashIterator","java.lang","Object");
    helper.addImplementsLinks("java.util", "WeakHashMap$HashIterator","java.util","Iterator");
    helper.createField(newType,JavaTypePrimitive.class,"","int","index",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","WeakHashMap$Entry","entry",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","WeakHashMap$Entry","lastReturned",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","expectedModCount",0,false,0);
	helper.createField(newType,JavaType.class,"java.lang","Object","nextKey",0,false,0);
	helper.createField(newType,JavaType.class,"java.lang","Object","currentKey",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","WeakHashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"WeakHashMap$HashIterator(java.util.WeakHashMap)","WeakHashMap$HashIterator",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"nextEntry()","nextEntry",false,4);
    helper.createMethodReturnType(method,JavaType.class,"java.util","WeakHashMap$Entry",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "WeakHashMap$KeyIterator",32);
    helper.addExtendsLinks("java.util", "WeakHashMap$KeyIterator","java.util","WeakHashMap$HashIterator");
	helper.createField(newType,JavaType.class,"java.util","WeakHashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"WeakHashMap$KeyIterator(java.util.WeakHashMap, java.util.WeakHashMap$1)","WeakHashMap$KeyIterator",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "WeakHashMap$KeySet",32);
    helper.addExtendsLinks("java.util", "WeakHashMap$KeySet","java.util","AbstractSet");
	helper.createField(newType,JavaType.class,"java.util","WeakHashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"toArray()","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"toArray(java.lang.Object[])","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"WeakHashMap$KeySet(java.util.WeakHashMap, java.util.WeakHashMap$1)","WeakHashMap$KeySet",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "WeakHashMap$ValueIterator",32);
    helper.addExtendsLinks("java.util", "WeakHashMap$ValueIterator","java.util","WeakHashMap$HashIterator");
	helper.createField(newType,JavaType.class,"java.util","WeakHashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"WeakHashMap$ValueIterator(java.util.WeakHashMap, java.util.WeakHashMap$1)","WeakHashMap$ValueIterator",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "WeakHashMap$Values",32);
    helper.addExtendsLinks("java.util", "WeakHashMap$Values","java.util","AbstractCollection");
	helper.createField(newType,JavaType.class,"java.util","WeakHashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"toArray()","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"toArray(java.lang.Object[])","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"WeakHashMap$Values(java.util.WeakHashMap, java.util.WeakHashMap$1)","WeakHashMap$Values",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "WeakHashMap",33);
    helper.addExtendsLinks("java.util", "WeakHashMap","java.util","AbstractMap");
    helper.addImplementsLinks("java.util", "WeakHashMap","java.util","Map");
    method = helper.createMethod(newType,"WeakHashMap(int, float)","WeakHashMap",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"WeakHashMap(int)","WeakHashMap",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"WeakHashMap()","WeakHashMap",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"WeakHashMap(java.util.Map)","WeakHashMap",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"eq(java.lang.Object, java.lang.Object)","eq",false,8);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"indexFor(int, int)","indexFor",false,8);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"get(java.lang.Object)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"containsKey(java.lang.Object)","containsKey",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"getEntry(java.lang.Object)","getEntry",false,0);
    helper.createMethodReturnType(method,JavaType.class,"java.util","WeakHashMap$Entry",false,0);
    method = helper.createMethod(newType,"put(java.lang.Object, java.lang.Object)","put",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"resize(int)","resize",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"putAll(java.util.Map)","putAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"removeMapping(java.lang.Object)","removeMapping",false,0);
    helper.createMethodReturnType(method,JavaType.class,"java.util","WeakHashMap$Entry",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"containsValue(java.lang.Object)","containsValue",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"keySet()","keySet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"values()","values",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Collection",false,0);
    method = helper.createMethod(newType,"entrySet()","entrySet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"access$300(java.lang.Object)","access$300",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"access$400(java.util.WeakHashMap)","access$400",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"access$500(java.util.WeakHashMap)","access$500",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.util","WeakHashMap$Entry",true,1);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "XMLUtils$1",32);
    helper.addExtendsLinks("java.util", "XMLUtils$1","java.lang","Object");
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "XMLUtils$EH",32);
    helper.addExtendsLinks("java.util", "XMLUtils$EH","java.lang","Object");
    helper.addImplementsLinks("java.util", "XMLUtils$EH","org.xml.sax","ErrorHandler");
    method = helper.createMethod(newType,"error(org.xml.sax.SAXParseException)","error",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "org.xml.sax","SAXException");
    method = helper.createMethod(newType,"fatalError(org.xml.sax.SAXParseException)","fatalError",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "org.xml.sax","SAXException");
    method = helper.createMethod(newType,"warning(org.xml.sax.SAXParseException)","warning",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "org.xml.sax","SAXException");
    method = helper.createMethod(newType,"XMLUtils$EH(java.util.XMLUtils$1)","XMLUtils$EH",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "XMLUtils$Resolver",32);
    helper.addExtendsLinks("java.util", "XMLUtils$Resolver","java.lang","Object");
    helper.addImplementsLinks("java.util", "XMLUtils$Resolver","org.xml.sax","EntityResolver");
    method = helper.createMethod(newType,"resolveEntity(java.lang.String, java.lang.String)","resolveEntity",false,1);
    helper.createMethodReturnType(method,JavaType.class,"org.xml.sax","InputSource",false,0);
        helper.addThrowsOnMethod(method, "org.xml.sax","SAXException");
    method = helper.createMethod(newType,"XMLUtils$Resolver(java.util.XMLUtils$1)","XMLUtils$Resolver",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "XMLUtils",32);
    helper.addExtendsLinks("java.util", "XMLUtils","java.lang","Object");
    helper.createField(newType,JavaTypePrimitive.class,"","boolean","$assertionsDisabled",4120,false,0);
    method = helper.createMethod(newType,"XMLUtils()","XMLUtils",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"load(java.util.Properties, java.io.InputStream)","load",false,8);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.io","IOException");
        helper.addThrowsOnMethod(method, "java.util","InvalidPropertiesFormatException");
    method = helper.createMethod(newType,"getLoadingDoc(java.io.InputStream)","getLoadingDoc",false,8);
    helper.createMethodReturnType(method,JavaType.class,"org.w3c.dom","Document",false,0);
        helper.addThrowsOnMethod(method, "org.xml.sax","SAXException");
        helper.addThrowsOnMethod(method, "java.io","IOException");
    method = helper.createMethod(newType,"importProperties(java.util.Properties, org.w3c.dom.Element)","importProperties",false,8);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"save(java.util.Properties, java.io.OutputStream, java.lang.String, java.lang.String)","save",false,8);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.io","IOException");
    method = helper.createMethod(newType,"emitDocument(org.w3c.dom.Document, java.io.OutputStream, java.lang.String)","emitDocument",false,8);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.io","IOException");
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractCollection",1057);
    helper.addExtendsLinks("java.util", "AbstractCollection","java.lang","Object");
    helper.addImplementsLinks("java.util", "AbstractCollection","java.util","Collection");
    method = helper.createMethod(newType,"AbstractCollection()","AbstractCollection",true,4);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"size()","size",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"toArray()","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"toArray(java.lang.Object[])","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsAll(java.util.Collection)","containsAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"addAll(java.util.Collection)","addAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"removeAll(java.util.Collection)","removeAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"retainAll(java.util.Collection)","retainAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractList$1",32);
    helper.addExtendsLinks("java.util", "AbstractList$1","java.lang","Object");
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractList$Itr",32);
    helper.addExtendsLinks("java.util", "AbstractList$Itr","java.lang","Object");
    helper.addImplementsLinks("java.util", "AbstractList$Itr","java.util","Iterator");
    helper.createField(newType,JavaTypePrimitive.class,"","int","cursor",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","lastRet",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","expectedModCount",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","AbstractList","this$0",4112,false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"checkForComodification()","checkForComodification",false,16);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"AbstractList$Itr(java.util.AbstractList, java.util.AbstractList$1)","AbstractList$Itr",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractList$ListItr",32);
    helper.addExtendsLinks("java.util", "AbstractList$ListItr","java.util","AbstractList$Itr");
    helper.addImplementsLinks("java.util", "AbstractList$ListItr","java.util","ListIterator");
	helper.createField(newType,JavaType.class,"java.util","AbstractList","this$0",4112,false,0);
    method = helper.createMethod(newType,"AbstractList$ListItr(java.util.AbstractList, int)","AbstractList$ListItr",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasPrevious()","hasPrevious",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"previous()","previous",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"nextIndex()","nextIndex",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"previousIndex()","previousIndex",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"set(java.lang.Object)","set",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractList",1057);
    helper.addExtendsLinks("java.util", "AbstractList","java.util","AbstractCollection");
    helper.addImplementsLinks("java.util", "AbstractList","java.util","List");
    helper.createField(newType,JavaTypePrimitive.class,"","int","modCount",132,false,0);
    method = helper.createMethod(newType,"AbstractList()","AbstractList",true,4);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"get(int)","get",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"set(int, java.lang.Object)","set",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"add(int, java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"remove(int)","remove",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"indexOf(java.lang.Object)","indexOf",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"lastIndexOf(java.lang.Object)","lastIndexOf",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"addAll(int, java.util.Collection)","addAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"listIterator()","listIterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","ListIterator",false,0);
    method = helper.createMethod(newType,"listIterator(int)","listIterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","ListIterator",false,0);
    method = helper.createMethod(newType,"subList(int, int)","subList",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","List",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"removeRange(int, int)","removeRange",false,4);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractMap$1$1",32);
    helper.addExtendsLinks("java.util", "AbstractMap$1$1","java.lang","Object");
    helper.addImplementsLinks("java.util", "AbstractMap$1$1","java.util","Iterator");
	helper.createField(newType,JavaType.class,"java.util","AbstractMap$1","this$1",4112,false,0);
    method = helper.createMethod(newType,"AbstractMap$1$1(java.util.AbstractMap$1)","AbstractMap$1$1",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractMap$1",32);
    helper.addExtendsLinks("java.util", "AbstractMap$1","java.util","AbstractSet");
	helper.createField(newType,JavaType.class,"java.util","AbstractMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"AbstractMap$1(java.util.AbstractMap)","AbstractMap$1",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractMap$2$1",32);
    helper.addExtendsLinks("java.util", "AbstractMap$2$1","java.lang","Object");
    helper.addImplementsLinks("java.util", "AbstractMap$2$1","java.util","Iterator");
	helper.createField(newType,JavaType.class,"java.util","AbstractMap$2","this$1",4112,false,0);
    method = helper.createMethod(newType,"AbstractMap$2$1(java.util.AbstractMap$2)","AbstractMap$2$1",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractMap$2",32);
    helper.addExtendsLinks("java.util", "AbstractMap$2","java.util","AbstractCollection");
	helper.createField(newType,JavaType.class,"java.util","AbstractMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"AbstractMap$2(java.util.AbstractMap)","AbstractMap$2",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractMap$SimpleEntry",32);
    helper.addExtendsLinks("java.util", "AbstractMap$SimpleEntry","java.lang","Object");
    helper.addImplementsLinks("java.util", "AbstractMap$SimpleEntry","java.util","Map$Entry");
	helper.createField(newType,JavaType.class,"java.lang","Object","key",0,false,0);
	helper.createField(newType,JavaType.class,"java.lang","Object","value",0,false,0);
    method = helper.createMethod(newType,"AbstractMap$SimpleEntry(java.lang.Object, java.lang.Object)","AbstractMap$SimpleEntry",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"AbstractMap$SimpleEntry(java.util.Map$Entry)","AbstractMap$SimpleEntry",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getKey()","getKey",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"getValue()","getValue",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"setValue(java.lang.Object)","setValue",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractMap",1057);
    helper.addExtendsLinks("java.util", "AbstractMap","java.lang","Object");
    helper.addImplementsLinks("java.util", "AbstractMap","java.util","Map");
	helper.createField(newType,JavaType.class,"java.util","Set","keySet",192,false,0);
	helper.createField(newType,JavaType.class,"java.util","Collection","values",192,false,0);
    method = helper.createMethod(newType,"AbstractMap()","AbstractMap",true,4);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsValue(java.lang.Object)","containsValue",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsKey(java.lang.Object)","containsKey",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"get(java.lang.Object)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"put(java.lang.Object, java.lang.Object)","put",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"putAll(java.util.Map)","putAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"keySet()","keySet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"values()","values",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Collection",false,0);
    method = helper.createMethod(newType,"entrySet()","entrySet",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,4);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
        helper.addThrowsOnMethod(method, "java.lang","CloneNotSupportedException");
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractQueue",1057);
    helper.addExtendsLinks("java.util", "AbstractQueue","java.util","AbstractCollection");
    helper.addImplementsLinks("java.util", "AbstractQueue","java.util","Queue");
    method = helper.createMethod(newType,"AbstractQueue()","AbstractQueue",true,4);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"element()","element",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"addAll(java.util.Collection)","addAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractSequentialList",1057);
    helper.addExtendsLinks("java.util", "AbstractSequentialList","java.util","AbstractList");
    method = helper.createMethod(newType,"AbstractSequentialList()","AbstractSequentialList",true,4);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"get(int)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"set(int, java.lang.Object)","set",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"add(int, java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"remove(int)","remove",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"addAll(int, java.util.Collection)","addAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"listIterator(int)","listIterator",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.util","ListIterator",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "AbstractSet",1057);
    helper.addExtendsLinks("java.util", "AbstractSet","java.util","AbstractCollection");
    helper.addImplementsLinks("java.util", "AbstractSet","java.util","Set");
    method = helper.createMethod(newType,"AbstractSet()","AbstractSet",true,4);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"removeAll(java.util.Collection)","removeAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "ArrayList",33);
    helper.addExtendsLinks("java.util", "ArrayList","java.util","AbstractList");
    helper.addImplementsLinks("java.util", "ArrayList","java.util","List");
    helper.addImplementsLinks("java.util", "ArrayList","java.util","RandomAccess");
    helper.addImplementsLinks("java.util", "ArrayList","java.lang","Cloneable");
    helper.addImplementsLinks("java.util", "ArrayList","java.io","Serializable");
    method = helper.createMethod(newType,"ArrayList(int)","ArrayList",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"ArrayList()","ArrayList",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"ArrayList(java.util.Collection)","ArrayList",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"trimToSize()","trimToSize",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"ensureCapacity(int)","ensureCapacity",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"indexOf(java.lang.Object)","indexOf",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"lastIndexOf(java.lang.Object)","lastIndexOf",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"toArray()","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"toArray(java.lang.Object[])","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"get(int)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"set(int, java.lang.Object)","set",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"add(int, java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"remove(int)","remove",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"addAll(java.util.Collection)","addAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"addAll(int, java.util.Collection)","addAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"removeRange(int, int)","removeRange",false,4);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Arrays$ArrayList",32);
    helper.addExtendsLinks("java.util", "Arrays$ArrayList","java.util","AbstractList");
    helper.addImplementsLinks("java.util", "Arrays$ArrayList","java.util","RandomAccess");
    helper.addImplementsLinks("java.util", "Arrays$ArrayList","java.io","Serializable");
    method = helper.createMethod(newType,"Arrays$ArrayList(java.lang.Object[])","Arrays$ArrayList",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"toArray()","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"get(int)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"set(int, java.lang.Object)","set",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"indexOf(java.lang.Object)","indexOf",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Arrays",33);
    helper.addExtendsLinks("java.util", "Arrays","java.lang","Object");
    method = helper.createMethod(newType,"sort(long[])","sort",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"sort(long[], int, int)","sort",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"sort(int[])","sort",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"sort(int[], int, int)","sort",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"sort(short[])","sort",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"sort(short[], int, int)","sort",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"sort(char[])","sort",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"sort(char[], int, int)","sort",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"sort(byte[])","sort",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"sort(byte[], int, int)","sort",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"sort(double[])","sort",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"sort(double[], int, int)","sort",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"sort(float[])","sort",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"sort(float[], int, int)","sort",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"sort(java.lang.Object[])","sort",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"sort(java.lang.Object[], int, int)","sort",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"sort(java.lang.Object[], java.util.Comparator)","sort",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"sort(java.lang.Object[], int, int, java.util.Comparator)","sort",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"binarySearch(long[], long)","binarySearch",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"binarySearch(int[], int)","binarySearch",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"binarySearch(short[], short)","binarySearch",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"binarySearch(char[], char)","binarySearch",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"binarySearch(byte[], byte)","binarySearch",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"binarySearch(double[], double)","binarySearch",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"binarySearch(float[], float)","binarySearch",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"binarySearch(java.lang.Object[], java.lang.Object)","binarySearch",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"binarySearch(java.lang.Object[], java.lang.Object, java.util.Comparator)","binarySearch",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"equals(long[], long[])","equals",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"equals(int[], int[])","equals",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"equals(short[], short[])","equals",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"equals(char[], char[])","equals",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"equals(byte[], byte[])","equals",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"equals(boolean[], boolean[])","equals",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"equals(double[], double[])","equals",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"equals(float[], float[])","equals",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object[], java.lang.Object[])","equals",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"fill(long[], long)","fill",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"fill(long[], int, int, long)","fill",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"fill(int[], int)","fill",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"fill(int[], int, int, int)","fill",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"fill(short[], short)","fill",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"fill(short[], int, int, short)","fill",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"fill(char[], char)","fill",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"fill(char[], int, int, char)","fill",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"fill(byte[], byte)","fill",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"fill(byte[], int, int, byte)","fill",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"fill(boolean[], boolean)","fill",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"fill(boolean[], int, int, boolean)","fill",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"fill(double[], double)","fill",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"fill(double[], int, int, double)","fill",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"fill(float[], float)","fill",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"fill(float[], int, int, float)","fill",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"fill(java.lang.Object[], java.lang.Object)","fill",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"fill(java.lang.Object[], int, int, java.lang.Object)","fill",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"asList(java.lang.Object[])","asList",false,137);
    helper.createMethodReturnType(method,JavaType.class,"java.util","List",false,0);
    method = helper.createMethod(newType,"hashCode(long[])","hashCode",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"hashCode(int[])","hashCode",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"hashCode(short[])","hashCode",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"hashCode(char[])","hashCode",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"hashCode(byte[])","hashCode",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"hashCode(boolean[])","hashCode",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"hashCode(float[])","hashCode",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"hashCode(double[])","hashCode",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"hashCode(java.lang.Object[])","hashCode",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"deepHashCode(java.lang.Object[])","deepHashCode",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"deepEquals(java.lang.Object[], java.lang.Object[])","deepEquals",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"toString(long[])","toString",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"toString(int[])","toString",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"toString(short[])","toString",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"toString(char[])","toString",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"toString(byte[])","toString",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"toString(boolean[])","toString",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"toString(float[])","toString",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"toString(double[])","toString",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"toString(java.lang.Object[])","toString",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"deepToString(java.lang.Object[])","deepToString",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "BitSet",33);
    helper.addExtendsLinks("java.util", "BitSet","java.lang","Object");
    helper.addImplementsLinks("java.util", "BitSet","java.lang","Cloneable");
    helper.addImplementsLinks("java.util", "BitSet","java.io","Serializable");
    method = helper.createMethod(newType,"BitSet()","BitSet",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"BitSet(int)","BitSet",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"flip(int)","flip",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"flip(int, int)","flip",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"set(int)","set",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"set(int, boolean)","set",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"set(int, int)","set",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"set(int, int, boolean)","set",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"clear(int)","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"clear(int, int)","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"get(int)","get",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"get(int, int)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","BitSet",false,0);
    method = helper.createMethod(newType,"nextSetBit(int)","nextSetBit",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"nextClearBit(int)","nextClearBit",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"length()","length",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"intersects(java.util.BitSet)","intersects",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"cardinality()","cardinality",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"and(java.util.BitSet)","and",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"or(java.util.BitSet)","or",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"xor(java.util.BitSet)","xor",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"andNot(java.util.BitSet)","andNot",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Calendar$1",32);
    helper.addExtendsLinks("java.util", "Calendar$1","java.lang","Object");
    helper.addImplementsLinks("java.util", "Calendar$1","java.security","PrivilegedExceptionAction");
	helper.createField(newType,JavaType.class,"java.io","ObjectInputStream","val$input",4112,false,0);
	helper.createField(newType,JavaType.class,"java.util","Calendar","this$0",4112,false,0);
    method = helper.createMethod(newType,"Calendar$1(java.util.Calendar, java.io.ObjectInputStream)","Calendar$1",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.lang","ClassNotFoundException");
        helper.addThrowsOnMethod(method, "java.io","IOException");
    method = helper.createMethod(newType,"run()","run",false,1);
    helper.createMethodReturnType(method,JavaType.class,"sun.util.calendar","ZoneInfo",false,0);
        helper.addThrowsOnMethod(method, "java.lang","Exception");
    method = helper.createMethod(newType,"run()","run",false,4161);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
        helper.addThrowsOnMethod(method, "java.lang","Exception");
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Calendar$CalendarAccessControlContext",32);
    helper.addExtendsLinks("java.util", "Calendar$CalendarAccessControlContext","java.lang","Object");
    method = helper.createMethod(newType,"access$000()","access$000",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.security","AccessControlContext",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Calendar",1057);
    helper.addExtendsLinks("java.util", "Calendar","java.lang","Object");
    helper.addImplementsLinks("java.util", "Calendar","java.io","Serializable");
    helper.addImplementsLinks("java.util", "Calendar","java.lang","Cloneable");
    helper.addImplementsLinks("java.util", "Calendar","java.lang","Comparable");
    helper.createField(newType,JavaTypePrimitive.class,"","int","ERA",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","YEAR",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","MONTH",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","WEEK_OF_YEAR",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","WEEK_OF_MONTH",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","DATE",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","DAY_OF_MONTH",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","DAY_OF_YEAR",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","DAY_OF_WEEK",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","DAY_OF_WEEK_IN_MONTH",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","AM_PM",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","HOUR",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","HOUR_OF_DAY",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","MINUTE",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","SECOND",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","MILLISECOND",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","ZONE_OFFSET",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","DST_OFFSET",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","FIELD_COUNT",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","SUNDAY",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","MONDAY",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","TUESDAY",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","WEDNESDAY",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","THURSDAY",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","FRIDAY",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","SATURDAY",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","JANUARY",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","FEBRUARY",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","MARCH",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","APRIL",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","MAY",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","JUNE",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","JULY",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","AUGUST",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","SEPTEMBER",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","OCTOBER",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","NOVEMBER",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","DECEMBER",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","UNDECIMBER",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","AM",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","PM",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","long","time",4,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","boolean","isTimeSet",4,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","boolean","areFieldsSet",4,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","boolean","areAllFieldsSet",128,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","ALL_FIELDS",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","currentSerialVersion",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","long","serialVersionUID",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","ERA_MASK",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","YEAR_MASK",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","MONTH_MASK",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","WEEK_OF_YEAR_MASK",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","WEEK_OF_MONTH_MASK",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","DAY_OF_MONTH_MASK",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","DATE_MASK",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","DAY_OF_YEAR_MASK",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","DAY_OF_WEEK_MASK",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","DAY_OF_WEEK_IN_MONTH_MASK",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","AM_PM_MASK",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","HOUR_MASK",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","HOUR_OF_DAY_MASK",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","MINUTE_MASK",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","SECOND_MASK",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","MILLISECOND_MASK",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","ZONE_OFFSET_MASK",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","DST_OFFSET_MASK",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","boolean","$assertionsDisabled",4120,false,0);
    method = helper.createMethod(newType,"Calendar()","Calendar",true,4);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Calendar(java.util.TimeZone, java.util.Locale)","Calendar",true,4);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getInstance()","getInstance",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Calendar",false,0);
    method = helper.createMethod(newType,"getInstance(java.util.TimeZone)","getInstance",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Calendar",false,0);
    method = helper.createMethod(newType,"getInstance(java.util.Locale)","getInstance",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Calendar",false,0);
    method = helper.createMethod(newType,"getInstance(java.util.TimeZone, java.util.Locale)","getInstance",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Calendar",false,0);
    method = helper.createMethod(newType,"getAvailableLocales()","getAvailableLocales",false,41);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.util","Locale",true,1);
    method = helper.createMethod(newType,"computeTime()","computeTime",false,1028);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"computeFields()","computeFields",false,1028);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getTime()","getTime",false,17);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Date",false,0);
    method = helper.createMethod(newType,"setTime(java.util.Date)","setTime",false,17);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getTimeInMillis()","getTimeInMillis",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "long",false,0);
    method = helper.createMethod(newType,"setTimeInMillis(long)","setTimeInMillis",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"get(int)","get",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"internalGet(int)","internalGet",false,20);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"internalSet(int, int)","internalSet",false,16);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"set(int, int)","set",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"set(int, int, int)","set",false,17);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"set(int, int, int, int, int)","set",false,17);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"set(int, int, int, int, int, int)","set",false,17);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,17);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"clear(int)","clear",false,17);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"isSet(int)","isSet",false,17);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"complete()","complete",false,4);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"isExternallySet(int)","isExternallySet",false,16);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"getSetStateFields()","getSetStateFields",false,16);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"setFieldsComputed(int)","setFieldsComputed",false,16);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"setFieldsNormalized(int)","setFieldsNormalized",false,16);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"isPartiallyNormalized()","isPartiallyNormalized",false,16);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"isFullyNormalized()","isFullyNormalized",false,16);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"setUnnormalized()","setUnnormalized",false,16);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"isFieldSet(int, int)","isFieldSet",false,24);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"selectFields()","selectFields",false,16);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"before(java.lang.Object)","before",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"after(java.lang.Object)","after",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"compareTo(java.util.Calendar)","compareTo",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"add(int, int)","add",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"roll(int, boolean)","roll",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"roll(int, int)","roll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"setTimeZone(java.util.TimeZone)","setTimeZone",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getTimeZone()","getTimeZone",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","TimeZone",false,0);
    method = helper.createMethod(newType,"getZone()","getZone",false,0);
    helper.createMethodReturnType(method,JavaType.class,"java.util","TimeZone",false,0);
    method = helper.createMethod(newType,"setZoneShared(boolean)","setZoneShared",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"setLenient(boolean)","setLenient",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"isLenient()","isLenient",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"setFirstDayOfWeek(int)","setFirstDayOfWeek",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getFirstDayOfWeek()","getFirstDayOfWeek",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"setMinimalDaysInFirstWeek(int)","setMinimalDaysInFirstWeek",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getMinimalDaysInFirstWeek()","getMinimalDaysInFirstWeek",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"getMinimum(int)","getMinimum",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"getMaximum(int)","getMaximum",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"getGreatestMinimum(int)","getGreatestMinimum",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"getLeastMaximum(int)","getLeastMaximum",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"getActualMinimum(int)","getActualMinimum",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"getActualMaximum(int)","getActualMaximum",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"getFieldName(int)","getFieldName",false,24);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"compareTo(java.lang.Object)","compareTo",false,4161);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "Collection",1537);
    helper.addExtendsLinks("java.util", "Collection","java.lang","Object");
    helper.addImplementsLinks("java.util", "Collection","java.lang","Iterable");
    method = helper.createMethod(newType,"size()","size",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"toArray()","toArray",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"toArray(java.lang.Object[])","toArray",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsAll(java.util.Collection)","containsAll",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"addAll(java.util.Collection)","addAll",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"removeAll(java.util.Collection)","removeAll",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"retainAll(java.util.Collection)","retainAll",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$1",32);
    helper.addExtendsLinks("java.util", "Collections$1","java.lang","Object");
    helper.addImplementsLinks("java.util", "Collections$1","java.util","Enumeration");
	helper.createField(newType,JavaType.class,"java.util","Iterator","i",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","Collection","val$c",4112,false,0);
    method = helper.createMethod(newType,"Collections$1(java.util.Collection)","Collections$1",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasMoreElements()","hasMoreElements",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"nextElement()","nextElement",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CheckedCollection$1",32);
    helper.addExtendsLinks("java.util", "Collections$CheckedCollection$1","java.lang","Object");
    helper.addImplementsLinks("java.util", "Collections$CheckedCollection$1","java.util","Iterator");
	helper.createField(newType,JavaType.class,"java.util","Collections$CheckedCollection","this$0",4112,false,0);
    method = helper.createMethod(newType,"Collections$CheckedCollection$1(java.util.Collections$CheckedCollection)","Collections$CheckedCollection$1",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CheckedCollection",32);
    helper.addExtendsLinks("java.util", "Collections$CheckedCollection","java.lang","Object");
    helper.addImplementsLinks("java.util", "Collections$CheckedCollection","java.util","Collection");
    helper.addImplementsLinks("java.util", "Collections$CheckedCollection","java.io","Serializable");
	helper.createField(newType,JavaType.class,"java.util","Collection","c",16,false,0);
	helper.createField(newType,JavaType.class,"java.lang","Class","type",16,false,0);
    method = helper.createMethod(newType,"typeCheck(java.lang.Object)","typeCheck",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Collections$CheckedCollection(java.util.Collection, java.lang.Class)","Collections$CheckedCollection",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"toArray()","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"toArray(java.lang.Object[])","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsAll(java.util.Collection)","containsAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"removeAll(java.util.Collection)","removeAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"retainAll(java.util.Collection)","retainAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"addAll(java.util.Collection)","addAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"zeroLengthElementArray()","zeroLengthElementArray",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CheckedList$1",32);
    helper.addExtendsLinks("java.util", "Collections$CheckedList$1","java.lang","Object");
    helper.addImplementsLinks("java.util", "Collections$CheckedList$1","java.util","ListIterator");
	helper.createField(newType,JavaType.class,"java.util","ListIterator","i",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","val$index",4112,false,0);
	helper.createField(newType,JavaType.class,"java.util","Collections$CheckedList","this$0",4112,false,0);
    method = helper.createMethod(newType,"Collections$CheckedList$1(java.util.Collections$CheckedList, int)","Collections$CheckedList$1",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"hasPrevious()","hasPrevious",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"previous()","previous",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"nextIndex()","nextIndex",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"previousIndex()","previousIndex",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"set(java.lang.Object)","set",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CheckedList",32);
    helper.addExtendsLinks("java.util", "Collections$CheckedList","java.util","Collections$CheckedCollection");
    helper.addImplementsLinks("java.util", "Collections$CheckedList","java.util","List");
    helper.createField(newType,JavaTypePrimitive.class,"","long","serialVersionUID",24,false,0);
	helper.createField(newType,JavaType.class,"java.util","List","list",16,false,0);
    method = helper.createMethod(newType,"Collections$CheckedList(java.util.List, java.lang.Class)","Collections$CheckedList",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"get(int)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"remove(int)","remove",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"indexOf(java.lang.Object)","indexOf",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"lastIndexOf(java.lang.Object)","lastIndexOf",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"set(int, java.lang.Object)","set",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"add(int, java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"addAll(int, java.util.Collection)","addAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"listIterator()","listIterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","ListIterator",false,0);
    method = helper.createMethod(newType,"listIterator(int)","listIterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","ListIterator",false,0);
    method = helper.createMethod(newType,"subList(int, int)","subList",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","List",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CheckedMap$CheckedEntrySet$1",32);
    helper.addExtendsLinks("java.util", "Collections$CheckedMap$CheckedEntrySet$1","java.lang","Object");
    helper.addImplementsLinks("java.util", "Collections$CheckedMap$CheckedEntrySet$1","java.util","Iterator");
	helper.createField(newType,JavaType.class,"java.util","Iterator","i",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","Collections$CheckedMap$CheckedEntrySet","this$0",4112,false,0);
    method = helper.createMethod(newType,"Collections$CheckedMap$CheckedEntrySet$1(java.util.Collections$CheckedMap$CheckedEntrySet)","Collections$CheckedMap$CheckedEntrySet$1",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Map$Entry",false,0);
    method = helper.createMethod(newType,"next()","next",false,4161);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CheckedMap$CheckedEntrySet$CheckedEntry",32);
    helper.addExtendsLinks("java.util", "Collections$CheckedMap$CheckedEntrySet$CheckedEntry","java.lang","Object");
    helper.addImplementsLinks("java.util", "Collections$CheckedMap$CheckedEntrySet$CheckedEntry","java.util","Map$Entry");
    method = helper.createMethod(newType,"Collections$CheckedMap$CheckedEntrySet$CheckedEntry(java.util.Map$Entry, java.lang.Class)","Collections$CheckedMap$CheckedEntrySet$CheckedEntry",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getKey()","getKey",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"getValue()","getValue",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"setValue(java.lang.Object)","setValue",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CheckedMap$CheckedEntrySet",32);
    helper.addExtendsLinks("java.util", "Collections$CheckedMap$CheckedEntrySet","java.lang","Object");
    helper.addImplementsLinks("java.util", "Collections$CheckedMap$CheckedEntrySet","java.util","Set");
	helper.createField(newType,JavaType.class,"java.util","Set","s",0,false,0);
	helper.createField(newType,JavaType.class,"java.lang","Class","valueType",0,false,0);
    method = helper.createMethod(newType,"Collections$CheckedMap$CheckedEntrySet(java.util.Set, java.lang.Class)","Collections$CheckedMap$CheckedEntrySet",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"removeAll(java.util.Collection)","removeAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"retainAll(java.util.Collection)","retainAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"add(java.util.Map$Entry)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"addAll(java.util.Collection)","addAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"toArray()","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"toArray(java.lang.Object[])","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsAll(java.util.Collection)","containsAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,4161);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CheckedMap",32);
    helper.addExtendsLinks("java.util", "Collections$CheckedMap","java.lang","Object");
    helper.addImplementsLinks("java.util", "Collections$CheckedMap","java.util","Map");
    helper.addImplementsLinks("java.util", "Collections$CheckedMap","java.io","Serializable");
	helper.createField(newType,JavaType.class,"java.lang","Class","keyType",16,false,0);
	helper.createField(newType,JavaType.class,"java.lang","Class","valueType",16,false,0);
    method = helper.createMethod(newType,"Collections$CheckedMap(java.util.Map, java.lang.Class, java.lang.Class)","Collections$CheckedMap",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsKey(java.lang.Object)","containsKey",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsValue(java.lang.Object)","containsValue",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"get(java.lang.Object)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"keySet()","keySet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"values()","values",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Collection",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"put(java.lang.Object, java.lang.Object)","put",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"putAll(java.util.Map)","putAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"entrySet()","entrySet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CheckedRandomAccessList",32);
    helper.addExtendsLinks("java.util", "Collections$CheckedRandomAccessList","java.util","Collections$CheckedList");
    helper.addImplementsLinks("java.util", "Collections$CheckedRandomAccessList","java.util","RandomAccess");
    method = helper.createMethod(newType,"Collections$CheckedRandomAccessList(java.util.List, java.lang.Class)","Collections$CheckedRandomAccessList",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"subList(int, int)","subList",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","List",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CheckedSet",32);
    helper.addExtendsLinks("java.util", "Collections$CheckedSet","java.util","Collections$CheckedCollection");
    helper.addImplementsLinks("java.util", "Collections$CheckedSet","java.util","Set");
    helper.addImplementsLinks("java.util", "Collections$CheckedSet","java.io","Serializable");
    method = helper.createMethod(newType,"Collections$CheckedSet(java.util.Set, java.lang.Class)","Collections$CheckedSet",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CheckedSortedMap",32);
    helper.addExtendsLinks("java.util", "Collections$CheckedSortedMap","java.util","Collections$CheckedMap");
    helper.addImplementsLinks("java.util", "Collections$CheckedSortedMap","java.util","SortedMap");
    helper.addImplementsLinks("java.util", "Collections$CheckedSortedMap","java.io","Serializable");
    method = helper.createMethod(newType,"Collections$CheckedSortedMap(java.util.SortedMap, java.lang.Class, java.lang.Class)","Collections$CheckedSortedMap",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"comparator()","comparator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Comparator",false,0);
    method = helper.createMethod(newType,"firstKey()","firstKey",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"lastKey()","lastKey",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"subMap(java.lang.Object, java.lang.Object)","subMap",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedMap",false,0);
    method = helper.createMethod(newType,"headMap(java.lang.Object)","headMap",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedMap",false,0);
    method = helper.createMethod(newType,"tailMap(java.lang.Object)","tailMap",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedMap",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CheckedSortedSet",32);
    helper.addExtendsLinks("java.util", "Collections$CheckedSortedSet","java.util","Collections$CheckedSet");
    helper.addImplementsLinks("java.util", "Collections$CheckedSortedSet","java.util","SortedSet");
    helper.addImplementsLinks("java.util", "Collections$CheckedSortedSet","java.io","Serializable");
    method = helper.createMethod(newType,"Collections$CheckedSortedSet(java.util.SortedSet, java.lang.Class)","Collections$CheckedSortedSet",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"comparator()","comparator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Comparator",false,0);
    method = helper.createMethod(newType,"first()","first",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"last()","last",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"subSet(java.lang.Object, java.lang.Object)","subSet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedSet",false,0);
    method = helper.createMethod(newType,"headSet(java.lang.Object)","headSet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedSet",false,0);
    method = helper.createMethod(newType,"tailSet(java.lang.Object)","tailSet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedSet",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$CopiesList",32);
    helper.addExtendsLinks("java.util", "Collections$CopiesList","java.util","AbstractList");
    helper.addImplementsLinks("java.util", "Collections$CopiesList","java.util","RandomAccess");
    helper.addImplementsLinks("java.util", "Collections$CopiesList","java.io","Serializable");
    helper.createField(newType,JavaTypePrimitive.class,"","long","serialVersionUID",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","n",0,false,0);
	helper.createField(newType,JavaType.class,"java.lang","Object","element",0,false,0);
    method = helper.createMethod(newType,"Collections$CopiesList(int, java.lang.Object)","Collections$CopiesList",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"get(int)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$EmptyList",32);
    helper.addExtendsLinks("java.util", "Collections$EmptyList","java.util","AbstractList");
    helper.addImplementsLinks("java.util", "Collections$EmptyList","java.util","RandomAccess");
    helper.addImplementsLinks("java.util", "Collections$EmptyList","java.io","Serializable");
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"get(int)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"Collections$EmptyList(java.util.Collections$1)","Collections$EmptyList",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$EmptyMap",32);
    helper.addExtendsLinks("java.util", "Collections$EmptyMap","java.util","AbstractMap");
    helper.addImplementsLinks("java.util", "Collections$EmptyMap","java.io","Serializable");
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsKey(java.lang.Object)","containsKey",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsValue(java.lang.Object)","containsValue",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"get(java.lang.Object)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"keySet()","keySet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"values()","values",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Collection",false,0);
    method = helper.createMethod(newType,"entrySet()","entrySet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"Collections$EmptyMap(java.util.Collections$1)","Collections$EmptyMap",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$EmptySet$1",32);
    helper.addExtendsLinks("java.util", "Collections$EmptySet$1","java.lang","Object");
    helper.addImplementsLinks("java.util", "Collections$EmptySet$1","java.util","Iterator");
	helper.createField(newType,JavaType.class,"java.util","Collections$EmptySet","this$0",4112,false,0);
    method = helper.createMethod(newType,"Collections$EmptySet$1(java.util.Collections$EmptySet)","Collections$EmptySet$1",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$EmptySet",32);
    helper.addExtendsLinks("java.util", "Collections$EmptySet","java.util","AbstractSet");
    helper.addImplementsLinks("java.util", "Collections$EmptySet","java.io","Serializable");
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"Collections$EmptySet(java.util.Collections$1)","Collections$EmptySet",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$ReverseComparator",32);
    helper.addExtendsLinks("java.util", "Collections$ReverseComparator","java.lang","Object");
    helper.addImplementsLinks("java.util", "Collections$ReverseComparator","java.util","Comparator");
    helper.addImplementsLinks("java.util", "Collections$ReverseComparator","java.io","Serializable");
    method = helper.createMethod(newType,"compare(java.lang.Comparable, java.lang.Comparable)","compare",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"compare(java.lang.Object, java.lang.Object)","compare",false,4161);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"Collections$ReverseComparator(java.util.Collections$1)","Collections$ReverseComparator",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$ReverseComparator2",32);
    helper.addExtendsLinks("java.util", "Collections$ReverseComparator2","java.lang","Object");
    helper.addImplementsLinks("java.util", "Collections$ReverseComparator2","java.util","Comparator");
    helper.addImplementsLinks("java.util", "Collections$ReverseComparator2","java.io","Serializable");
    helper.createField(newType,JavaTypePrimitive.class,"","boolean","$assertionsDisabled",4120,false,0);
    method = helper.createMethod(newType,"Collections$ReverseComparator2(java.util.Comparator)","Collections$ReverseComparator2",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"compare(java.lang.Object, java.lang.Object)","compare",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "Collections$SelfComparable",1536);
    helper.addExtendsLinks("java.util", "Collections$SelfComparable","java.lang","Object");
    helper.addImplementsLinks("java.util", "Collections$SelfComparable","java.lang","Comparable");
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$SingletonList",32);
    helper.addExtendsLinks("java.util", "Collections$SingletonList","java.util","AbstractList");
    helper.addImplementsLinks("java.util", "Collections$SingletonList","java.util","RandomAccess");
    helper.addImplementsLinks("java.util", "Collections$SingletonList","java.io","Serializable");
    helper.createField(newType,JavaTypePrimitive.class,"","long","serialVersionUID",24,false,0);
    method = helper.createMethod(newType,"Collections$SingletonList(java.lang.Object)","Collections$SingletonList",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"get(int)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$SingletonMap$ImmutableEntry",32);
    helper.addExtendsLinks("java.util", "Collections$SingletonMap$ImmutableEntry","java.lang","Object");
    helper.addImplementsLinks("java.util", "Collections$SingletonMap$ImmutableEntry","java.util","Map$Entry");
	helper.createField(newType,JavaType.class,"java.lang","Object","k",16,false,0);
	helper.createField(newType,JavaType.class,"java.lang","Object","v",16,false,0);
    method = helper.createMethod(newType,"Collections$SingletonMap$ImmutableEntry(java.lang.Object, java.lang.Object)","Collections$SingletonMap$ImmutableEntry",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getKey()","getKey",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"getValue()","getValue",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"setValue(java.lang.Object)","setValue",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$SingletonMap",32);
    helper.addExtendsLinks("java.util", "Collections$SingletonMap","java.util","AbstractMap");
    helper.addImplementsLinks("java.util", "Collections$SingletonMap","java.io","Serializable");
    method = helper.createMethod(newType,"Collections$SingletonMap(java.lang.Object, java.lang.Object)","Collections$SingletonMap",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsKey(java.lang.Object)","containsKey",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsValue(java.lang.Object)","containsValue",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"get(java.lang.Object)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"keySet()","keySet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"entrySet()","entrySet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"values()","values",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Collection",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$SingletonSet$1",32);
    helper.addExtendsLinks("java.util", "Collections$SingletonSet$1","java.lang","Object");
    helper.addImplementsLinks("java.util", "Collections$SingletonSet$1","java.util","Iterator");
	helper.createField(newType,JavaType.class,"java.util","Collections$SingletonSet","this$0",4112,false,0);
    method = helper.createMethod(newType,"Collections$SingletonSet$1(java.util.Collections$SingletonSet)","Collections$SingletonSet$1",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$SingletonSet",32);
    helper.addExtendsLinks("java.util", "Collections$SingletonSet","java.util","AbstractSet");
    helper.addImplementsLinks("java.util", "Collections$SingletonSet","java.io","Serializable");
    method = helper.createMethod(newType,"Collections$SingletonSet(java.lang.Object)","Collections$SingletonSet",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"access$400(java.util.Collections$SingletonSet)","access$400",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$SynchronizedCollection",32);
    helper.addExtendsLinks("java.util", "Collections$SynchronizedCollection","java.lang","Object");
    helper.addImplementsLinks("java.util", "Collections$SynchronizedCollection","java.util","Collection");
    helper.addImplementsLinks("java.util", "Collections$SynchronizedCollection","java.io","Serializable");
	helper.createField(newType,JavaType.class,"java.util","Collection","c",0,false,0);
	helper.createField(newType,JavaType.class,"java.lang","Object","mutex",0,false,0);
    method = helper.createMethod(newType,"Collections$SynchronizedCollection(java.util.Collection)","Collections$SynchronizedCollection",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Collections$SynchronizedCollection(java.util.Collection, java.lang.Object)","Collections$SynchronizedCollection",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"toArray()","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"toArray(java.lang.Object[])","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsAll(java.util.Collection)","containsAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"addAll(java.util.Collection)","addAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"removeAll(java.util.Collection)","removeAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"retainAll(java.util.Collection)","retainAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$SynchronizedList",32);
    helper.addExtendsLinks("java.util", "Collections$SynchronizedList","java.util","Collections$SynchronizedCollection");
    helper.addImplementsLinks("java.util", "Collections$SynchronizedList","java.util","List");
    helper.createField(newType,JavaTypePrimitive.class,"","long","serialVersionUID",24,false,0);
	helper.createField(newType,JavaType.class,"java.util","List","list",0,false,0);
    method = helper.createMethod(newType,"Collections$SynchronizedList(java.util.List)","Collections$SynchronizedList",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Collections$SynchronizedList(java.util.List, java.lang.Object)","Collections$SynchronizedList",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"get(int)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"set(int, java.lang.Object)","set",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"add(int, java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"remove(int)","remove",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"indexOf(java.lang.Object)","indexOf",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"lastIndexOf(java.lang.Object)","lastIndexOf",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"addAll(int, java.util.Collection)","addAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"listIterator()","listIterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","ListIterator",false,0);
    method = helper.createMethod(newType,"listIterator(int)","listIterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","ListIterator",false,0);
    method = helper.createMethod(newType,"subList(int, int)","subList",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","List",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$SynchronizedMap",32);
    helper.addExtendsLinks("java.util", "Collections$SynchronizedMap","java.lang","Object");
    helper.addImplementsLinks("java.util", "Collections$SynchronizedMap","java.util","Map");
    helper.addImplementsLinks("java.util", "Collections$SynchronizedMap","java.io","Serializable");
	helper.createField(newType,JavaType.class,"java.lang","Object","mutex",0,false,0);
    method = helper.createMethod(newType,"Collections$SynchronizedMap(java.util.Map)","Collections$SynchronizedMap",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Collections$SynchronizedMap(java.util.Map, java.lang.Object)","Collections$SynchronizedMap",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsKey(java.lang.Object)","containsKey",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsValue(java.lang.Object)","containsValue",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"get(java.lang.Object)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"put(java.lang.Object, java.lang.Object)","put",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"putAll(java.util.Map)","putAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"keySet()","keySet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"entrySet()","entrySet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"values()","values",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Collection",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$SynchronizedRandomAccessList",32);
    helper.addExtendsLinks("java.util", "Collections$SynchronizedRandomAccessList","java.util","Collections$SynchronizedList");
    helper.addImplementsLinks("java.util", "Collections$SynchronizedRandomAccessList","java.util","RandomAccess");
    helper.createField(newType,JavaTypePrimitive.class,"","long","serialVersionUID",24,false,0);
    method = helper.createMethod(newType,"Collections$SynchronizedRandomAccessList(java.util.List)","Collections$SynchronizedRandomAccessList",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Collections$SynchronizedRandomAccessList(java.util.List, java.lang.Object)","Collections$SynchronizedRandomAccessList",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"subList(int, int)","subList",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","List",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$SynchronizedSet",32);
    helper.addExtendsLinks("java.util", "Collections$SynchronizedSet","java.util","Collections$SynchronizedCollection");
    helper.addImplementsLinks("java.util", "Collections$SynchronizedSet","java.util","Set");
    method = helper.createMethod(newType,"Collections$SynchronizedSet(java.util.Set)","Collections$SynchronizedSet",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Collections$SynchronizedSet(java.util.Set, java.lang.Object)","Collections$SynchronizedSet",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$SynchronizedSortedMap",32);
    helper.addExtendsLinks("java.util", "Collections$SynchronizedSortedMap","java.util","Collections$SynchronizedMap");
    helper.addImplementsLinks("java.util", "Collections$SynchronizedSortedMap","java.util","SortedMap");
    method = helper.createMethod(newType,"Collections$SynchronizedSortedMap(java.util.SortedMap)","Collections$SynchronizedSortedMap",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Collections$SynchronizedSortedMap(java.util.SortedMap, java.lang.Object)","Collections$SynchronizedSortedMap",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"comparator()","comparator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Comparator",false,0);
    method = helper.createMethod(newType,"subMap(java.lang.Object, java.lang.Object)","subMap",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedMap",false,0);
    method = helper.createMethod(newType,"headMap(java.lang.Object)","headMap",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedMap",false,0);
    method = helper.createMethod(newType,"tailMap(java.lang.Object)","tailMap",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedMap",false,0);
    method = helper.createMethod(newType,"firstKey()","firstKey",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"lastKey()","lastKey",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$SynchronizedSortedSet",32);
    helper.addExtendsLinks("java.util", "Collections$SynchronizedSortedSet","java.util","Collections$SynchronizedSet");
    helper.addImplementsLinks("java.util", "Collections$SynchronizedSortedSet","java.util","SortedSet");
    method = helper.createMethod(newType,"Collections$SynchronizedSortedSet(java.util.SortedSet)","Collections$SynchronizedSortedSet",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Collections$SynchronizedSortedSet(java.util.SortedSet, java.lang.Object)","Collections$SynchronizedSortedSet",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"comparator()","comparator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Comparator",false,0);
    method = helper.createMethod(newType,"subSet(java.lang.Object, java.lang.Object)","subSet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedSet",false,0);
    method = helper.createMethod(newType,"headSet(java.lang.Object)","headSet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedSet",false,0);
    method = helper.createMethod(newType,"tailSet(java.lang.Object)","tailSet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedSet",false,0);
    method = helper.createMethod(newType,"first()","first",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"last()","last",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$UnmodifiableCollection$1",32);
    helper.addExtendsLinks("java.util", "Collections$UnmodifiableCollection$1","java.lang","Object");
    helper.addImplementsLinks("java.util", "Collections$UnmodifiableCollection$1","java.util","Iterator");
	helper.createField(newType,JavaType.class,"java.util","Iterator","i",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","Collections$UnmodifiableCollection","this$0",4112,false,0);
    method = helper.createMethod(newType,"Collections$UnmodifiableCollection$1(java.util.Collections$UnmodifiableCollection)","Collections$UnmodifiableCollection$1",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$UnmodifiableCollection",32);
    helper.addExtendsLinks("java.util", "Collections$UnmodifiableCollection","java.lang","Object");
    helper.addImplementsLinks("java.util", "Collections$UnmodifiableCollection","java.util","Collection");
    helper.addImplementsLinks("java.util", "Collections$UnmodifiableCollection","java.io","Serializable");
	helper.createField(newType,JavaType.class,"java.util","Collection","c",0,false,0);
    method = helper.createMethod(newType,"Collections$UnmodifiableCollection(java.util.Collection)","Collections$UnmodifiableCollection",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"toArray()","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"toArray(java.lang.Object[])","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsAll(java.util.Collection)","containsAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"addAll(java.util.Collection)","addAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"removeAll(java.util.Collection)","removeAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"retainAll(java.util.Collection)","retainAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$UnmodifiableList$1",32);
    helper.addExtendsLinks("java.util", "Collections$UnmodifiableList$1","java.lang","Object");
    helper.addImplementsLinks("java.util", "Collections$UnmodifiableList$1","java.util","ListIterator");
	helper.createField(newType,JavaType.class,"java.util","ListIterator","i",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","val$index",4112,false,0);
	helper.createField(newType,JavaType.class,"java.util","Collections$UnmodifiableList","this$0",4112,false,0);
    method = helper.createMethod(newType,"Collections$UnmodifiableList$1(java.util.Collections$UnmodifiableList, int)","Collections$UnmodifiableList$1",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"hasPrevious()","hasPrevious",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"previous()","previous",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"nextIndex()","nextIndex",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"previousIndex()","previousIndex",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"set(java.lang.Object)","set",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$UnmodifiableList",32);
    helper.addExtendsLinks("java.util", "Collections$UnmodifiableList","java.util","Collections$UnmodifiableCollection");
    helper.addImplementsLinks("java.util", "Collections$UnmodifiableList","java.util","List");
    helper.createField(newType,JavaTypePrimitive.class,"","long","serialVersionUID",24,false,0);
	helper.createField(newType,JavaType.class,"java.util","List","list",0,false,0);
    method = helper.createMethod(newType,"Collections$UnmodifiableList(java.util.List)","Collections$UnmodifiableList",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"get(int)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"set(int, java.lang.Object)","set",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"add(int, java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"remove(int)","remove",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"indexOf(java.lang.Object)","indexOf",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"lastIndexOf(java.lang.Object)","lastIndexOf",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"addAll(int, java.util.Collection)","addAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"listIterator()","listIterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","ListIterator",false,0);
    method = helper.createMethod(newType,"listIterator(int)","listIterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","ListIterator",false,0);
    method = helper.createMethod(newType,"subList(int, int)","subList",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","List",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$UnmodifiableMap$UnmodifiableEntrySet$1",32);
    helper.addExtendsLinks("java.util", "Collections$UnmodifiableMap$UnmodifiableEntrySet$1","java.lang","Object");
    helper.addImplementsLinks("java.util", "Collections$UnmodifiableMap$UnmodifiableEntrySet$1","java.util","Iterator");
	helper.createField(newType,JavaType.class,"java.util","Iterator","i",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","Collections$UnmodifiableMap$UnmodifiableEntrySet","this$0",4112,false,0);
    method = helper.createMethod(newType,"Collections$UnmodifiableMap$UnmodifiableEntrySet$1(java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet)","Collections$UnmodifiableMap$UnmodifiableEntrySet$1",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Map$Entry",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"next()","next",false,4161);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry",32);
    helper.addExtendsLinks("java.util", "Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry","java.lang","Object");
    helper.addImplementsLinks("java.util", "Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry","java.util","Map$Entry");
    method = helper.createMethod(newType,"Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry(java.util.Map$Entry)","Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getKey()","getKey",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"getValue()","getValue",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"setValue(java.lang.Object)","setValue",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$UnmodifiableMap$UnmodifiableEntrySet",32);
    helper.addExtendsLinks("java.util", "Collections$UnmodifiableMap$UnmodifiableEntrySet","java.util","Collections$UnmodifiableSet");
    method = helper.createMethod(newType,"Collections$UnmodifiableMap$UnmodifiableEntrySet(java.util.Set)","Collections$UnmodifiableMap$UnmodifiableEntrySet",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"toArray()","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"toArray(java.lang.Object[])","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsAll(java.util.Collection)","containsAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$UnmodifiableMap",32);
    helper.addExtendsLinks("java.util", "Collections$UnmodifiableMap","java.lang","Object");
    helper.addImplementsLinks("java.util", "Collections$UnmodifiableMap","java.util","Map");
    helper.addImplementsLinks("java.util", "Collections$UnmodifiableMap","java.io","Serializable");
    method = helper.createMethod(newType,"Collections$UnmodifiableMap(java.util.Map)","Collections$UnmodifiableMap",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsKey(java.lang.Object)","containsKey",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsValue(java.lang.Object)","containsValue",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"get(java.lang.Object)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"put(java.lang.Object, java.lang.Object)","put",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"putAll(java.util.Map)","putAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"keySet()","keySet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"entrySet()","entrySet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"values()","values",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Collection",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$UnmodifiableRandomAccessList",32);
    helper.addExtendsLinks("java.util", "Collections$UnmodifiableRandomAccessList","java.util","Collections$UnmodifiableList");
    helper.addImplementsLinks("java.util", "Collections$UnmodifiableRandomAccessList","java.util","RandomAccess");
    method = helper.createMethod(newType,"Collections$UnmodifiableRandomAccessList(java.util.List)","Collections$UnmodifiableRandomAccessList",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"subList(int, int)","subList",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","List",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$UnmodifiableSet",32);
    helper.addExtendsLinks("java.util", "Collections$UnmodifiableSet","java.util","Collections$UnmodifiableCollection");
    helper.addImplementsLinks("java.util", "Collections$UnmodifiableSet","java.util","Set");
    helper.addImplementsLinks("java.util", "Collections$UnmodifiableSet","java.io","Serializable");
    method = helper.createMethod(newType,"Collections$UnmodifiableSet(java.util.Set)","Collections$UnmodifiableSet",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$UnmodifiableSortedMap",32);
    helper.addExtendsLinks("java.util", "Collections$UnmodifiableSortedMap","java.util","Collections$UnmodifiableMap");
    helper.addImplementsLinks("java.util", "Collections$UnmodifiableSortedMap","java.util","SortedMap");
    helper.addImplementsLinks("java.util", "Collections$UnmodifiableSortedMap","java.io","Serializable");
    method = helper.createMethod(newType,"Collections$UnmodifiableSortedMap(java.util.SortedMap)","Collections$UnmodifiableSortedMap",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"comparator()","comparator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Comparator",false,0);
    method = helper.createMethod(newType,"subMap(java.lang.Object, java.lang.Object)","subMap",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedMap",false,0);
    method = helper.createMethod(newType,"headMap(java.lang.Object)","headMap",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedMap",false,0);
    method = helper.createMethod(newType,"tailMap(java.lang.Object)","tailMap",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedMap",false,0);
    method = helper.createMethod(newType,"firstKey()","firstKey",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"lastKey()","lastKey",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections$UnmodifiableSortedSet",32);
    helper.addExtendsLinks("java.util", "Collections$UnmodifiableSortedSet","java.util","Collections$UnmodifiableSet");
    helper.addImplementsLinks("java.util", "Collections$UnmodifiableSortedSet","java.util","SortedSet");
    helper.addImplementsLinks("java.util", "Collections$UnmodifiableSortedSet","java.io","Serializable");
    method = helper.createMethod(newType,"Collections$UnmodifiableSortedSet(java.util.SortedSet)","Collections$UnmodifiableSortedSet",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"comparator()","comparator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Comparator",false,0);
    method = helper.createMethod(newType,"subSet(java.lang.Object, java.lang.Object)","subSet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedSet",false,0);
    method = helper.createMethod(newType,"headSet(java.lang.Object)","headSet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedSet",false,0);
    method = helper.createMethod(newType,"tailSet(java.lang.Object)","tailSet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedSet",false,0);
    method = helper.createMethod(newType,"first()","first",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"last()","last",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Collections",33);
    helper.addExtendsLinks("java.util", "Collections","java.lang","Object");
	helper.createField(newType,JavaType.class,"java.util","Set","EMPTY_SET",25,false,0);
	helper.createField(newType,JavaType.class,"java.util","List","EMPTY_LIST",25,false,0);
	helper.createField(newType,JavaType.class,"java.util","Map","EMPTY_MAP",25,false,0);
    method = helper.createMethod(newType,"sort(java.util.List)","sort",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"sort(java.util.List, java.util.Comparator)","sort",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"binarySearch(java.util.List, java.lang.Object)","binarySearch",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"binarySearch(java.util.List, java.lang.Object, java.util.Comparator)","binarySearch",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"reverse(java.util.List)","reverse",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"shuffle(java.util.List)","shuffle",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"shuffle(java.util.List, java.util.Random)","shuffle",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"swap(java.util.List, int, int)","swap",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"fill(java.util.List, java.lang.Object)","fill",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"copy(java.util.List, java.util.List)","copy",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"min(java.util.Collection)","min",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"min(java.util.Collection, java.util.Comparator)","min",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"max(java.util.Collection)","max",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"max(java.util.Collection, java.util.Comparator)","max",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"rotate(java.util.List, int)","rotate",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"replaceAll(java.util.List, java.lang.Object, java.lang.Object)","replaceAll",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"indexOfSubList(java.util.List, java.util.List)","indexOfSubList",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"lastIndexOfSubList(java.util.List, java.util.List)","lastIndexOfSubList",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"unmodifiableCollection(java.util.Collection)","unmodifiableCollection",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Collection",false,0);
    method = helper.createMethod(newType,"unmodifiableSet(java.util.Set)","unmodifiableSet",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"unmodifiableSortedSet(java.util.SortedSet)","unmodifiableSortedSet",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedSet",false,0);
    method = helper.createMethod(newType,"unmodifiableList(java.util.List)","unmodifiableList",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","List",false,0);
    method = helper.createMethod(newType,"unmodifiableMap(java.util.Map)","unmodifiableMap",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Map",false,0);
    method = helper.createMethod(newType,"unmodifiableSortedMap(java.util.SortedMap)","unmodifiableSortedMap",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedMap",false,0);
    method = helper.createMethod(newType,"synchronizedCollection(java.util.Collection)","synchronizedCollection",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Collection",false,0);
    method = helper.createMethod(newType,"synchronizedCollection(java.util.Collection, java.lang.Object)","synchronizedCollection",false,8);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Collection",false,0);
    method = helper.createMethod(newType,"synchronizedSet(java.util.Set)","synchronizedSet",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"synchronizedSet(java.util.Set, java.lang.Object)","synchronizedSet",false,8);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"synchronizedSortedSet(java.util.SortedSet)","synchronizedSortedSet",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedSet",false,0);
    method = helper.createMethod(newType,"synchronizedList(java.util.List)","synchronizedList",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","List",false,0);
    method = helper.createMethod(newType,"synchronizedList(java.util.List, java.lang.Object)","synchronizedList",false,8);
    helper.createMethodReturnType(method,JavaType.class,"java.util","List",false,0);
    method = helper.createMethod(newType,"synchronizedMap(java.util.Map)","synchronizedMap",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Map",false,0);
    method = helper.createMethod(newType,"synchronizedSortedMap(java.util.SortedMap)","synchronizedSortedMap",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedMap",false,0);
    method = helper.createMethod(newType,"checkedCollection(java.util.Collection, java.lang.Class)","checkedCollection",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Collection",false,0);
    method = helper.createMethod(newType,"checkedSet(java.util.Set, java.lang.Class)","checkedSet",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"checkedSortedSet(java.util.SortedSet, java.lang.Class)","checkedSortedSet",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedSet",false,0);
    method = helper.createMethod(newType,"checkedList(java.util.List, java.lang.Class)","checkedList",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","List",false,0);
    method = helper.createMethod(newType,"checkedMap(java.util.Map, java.lang.Class, java.lang.Class)","checkedMap",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Map",false,0);
    method = helper.createMethod(newType,"checkedSortedMap(java.util.SortedMap, java.lang.Class, java.lang.Class)","checkedSortedMap",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedMap",false,0);
    method = helper.createMethod(newType,"emptySet()","emptySet",false,25);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"emptyList()","emptyList",false,25);
    helper.createMethodReturnType(method,JavaType.class,"java.util","List",false,0);
    method = helper.createMethod(newType,"emptyMap()","emptyMap",false,25);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Map",false,0);
    method = helper.createMethod(newType,"singleton(java.lang.Object)","singleton",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"singletonList(java.lang.Object)","singletonList",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","List",false,0);
    method = helper.createMethod(newType,"singletonMap(java.lang.Object, java.lang.Object)","singletonMap",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Map",false,0);
    method = helper.createMethod(newType,"nCopies(int, java.lang.Object)","nCopies",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","List",false,0);
    method = helper.createMethod(newType,"reverseOrder()","reverseOrder",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Comparator",false,0);
    method = helper.createMethod(newType,"reverseOrder(java.util.Comparator)","reverseOrder",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Comparator",false,0);
    method = helper.createMethod(newType,"enumeration(java.util.Collection)","enumeration",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Enumeration",false,0);
    method = helper.createMethod(newType,"list(java.util.Enumeration)","list",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","ArrayList",false,0);
    method = helper.createMethod(newType,"frequency(java.util.Collection, java.lang.Object)","frequency",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"disjoint(java.util.Collection, java.util.Collection)","disjoint",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"addAll(java.util.Collection, java.lang.Object[])","addAll",false,137);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"access$000(java.lang.Object, java.lang.Object)","access$000",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "Comparator",1537);
    helper.addExtendsLinks("java.util", "Comparator","java.lang","Object");
    method = helper.createMethod(newType,"compare(java.lang.Object, java.lang.Object)","compare",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "ConcurrentModificationException",33);
    helper.addExtendsLinks("java.util", "ConcurrentModificationException","java.lang","RuntimeException");
    method = helper.createMethod(newType,"ConcurrentModificationException()","ConcurrentModificationException",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"ConcurrentModificationException(java.lang.String)","ConcurrentModificationException",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Currency$1",32);
    helper.addExtendsLinks("java.util", "Currency$1","java.lang","Object");
    helper.addImplementsLinks("java.util", "Currency$1","java.security","PrivilegedAction");
    method = helper.createMethod(newType,"Currency$1()","Currency$1",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"run()","run",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Currency",49);
    helper.addExtendsLinks("java.util", "Currency","java.lang","Object");
    helper.addImplementsLinks("java.util", "Currency","java.io","Serializable");
	helper.createField(newType,JavaType.class,"java.lang","String","mainTable",8,false,0);
	helper.createField(newType,JavaType.class,"java.lang","String","otherCurrencies",8,false,0);
    method = helper.createMethod(newType,"getInstance(java.lang.String)","getInstance",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Currency",false,0);
    method = helper.createMethod(newType,"getInstance(java.util.Locale)","getInstance",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Currency",false,0);
    method = helper.createMethod(newType,"getCurrencyCode()","getCurrencyCode",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getSymbol()","getSymbol",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getSymbol(java.util.Locale)","getSymbol",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getDefaultFractionDigits()","getDefaultFractionDigits",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "CurrencyData",32);
    helper.addExtendsLinks("java.util", "CurrencyData","java.lang","Object");
	helper.createField(newType,JavaType.class,"java.lang","String","mainTable",24,false,0);
	helper.createField(newType,JavaType.class,"java.lang","String","otherCurrencies",24,false,0);
    method = helper.createMethod(newType,"CurrencyData()","CurrencyData",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Date",33);
    helper.addExtendsLinks("java.util", "Date","java.lang","Object");
    helper.addImplementsLinks("java.util", "Date","java.io","Serializable");
    helper.addImplementsLinks("java.util", "Date","java.lang","Cloneable");
    helper.addImplementsLinks("java.util", "Date","java.lang","Comparable");
    method = helper.createMethod(newType,"Date()","Date",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Date(long)","Date",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Date(int, int, int)","Date",true,131073);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Date(int, int, int, int, int)","Date",true,131073);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Date(int, int, int, int, int, int)","Date",true,131073);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Date(java.lang.String)","Date",true,131073);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"UTC(int, int, int, int, int, int)","UTC",false,131081);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "long",false,0);
    method = helper.createMethod(newType,"parse(java.lang.String)","parse",false,131081);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "long",false,0);
    method = helper.createMethod(newType,"getYear()","getYear",false,131073);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"setYear(int)","setYear",false,131073);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getMonth()","getMonth",false,131073);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"setMonth(int)","setMonth",false,131073);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getDate()","getDate",false,131073);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"setDate(int)","setDate",false,131073);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getDay()","getDay",false,131073);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"getHours()","getHours",false,131073);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"setHours(int)","setHours",false,131073);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getMinutes()","getMinutes",false,131073);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"setMinutes(int)","setMinutes",false,131073);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getSeconds()","getSeconds",false,131073);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"setSeconds(int)","setSeconds",false,131073);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getTime()","getTime",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "long",false,0);
    method = helper.createMethod(newType,"setTime(long)","setTime",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"before(java.util.Date)","before",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"after(java.util.Date)","after",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"getMillisOf(java.util.Date)","getMillisOf",false,24);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "long",false,0);
    method = helper.createMethod(newType,"compareTo(java.util.Date)","compareTo",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"toLocaleString()","toLocaleString",false,131073);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"toGMTString()","toGMTString",false,131073);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getTimezoneOffset()","getTimezoneOffset",false,131073);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"compareTo(java.lang.Object)","compareTo",false,4161);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Dictionary",1057);
    helper.addExtendsLinks("java.util", "Dictionary","java.lang","Object");
    method = helper.createMethod(newType,"Dictionary()","Dictionary",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"size()","size",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"keys()","keys",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Enumeration",false,0);
    method = helper.createMethod(newType,"elements()","elements",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Enumeration",false,0);
    method = helper.createMethod(newType,"get(java.lang.Object)","get",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"put(java.lang.Object, java.lang.Object)","put",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "DuplicateFormatFlagsException",33);
    helper.addExtendsLinks("java.util", "DuplicateFormatFlagsException","java.util","IllegalFormatException");
    method = helper.createMethod(newType,"DuplicateFormatFlagsException(java.lang.String)","DuplicateFormatFlagsException",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getFlags()","getFlags",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getMessage()","getMessage",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EmptyStackException",33);
    helper.addExtendsLinks("java.util", "EmptyStackException","java.lang","RuntimeException");
    method = helper.createMethod(newType,"EmptyStackException()","EmptyStackException",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "Enumeration",1537);
    helper.addExtendsLinks("java.util", "Enumeration","java.lang","Object");
    method = helper.createMethod(newType,"hasMoreElements()","hasMoreElements",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"nextElement()","nextElement",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EnumMap$1",32);
    helper.addExtendsLinks("java.util", "EnumMap$1","java.lang","Object");
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EnumMap$EntryIterator",32);
    helper.addExtendsLinks("java.util", "EnumMap$EntryIterator","java.util","EnumMap$EnumMapIterator");
    helper.addImplementsLinks("java.util", "EnumMap$EntryIterator","java.util","Map$Entry");
	helper.createField(newType,JavaType.class,"java.util","EnumMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Map$Entry",false,0);
    method = helper.createMethod(newType,"getKey()","getKey",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Enum",false,0);
    method = helper.createMethod(newType,"getValue()","getValue",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"setValue(java.lang.Object)","setValue",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"next()","next",false,4161);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"getKey()","getKey",false,4161);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"EnumMap$EntryIterator(java.util.EnumMap, java.util.EnumMap$1)","EnumMap$EntryIterator",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EnumMap$EntrySet",32);
    helper.addExtendsLinks("java.util", "EnumMap$EntrySet","java.util","AbstractSet");
	helper.createField(newType,JavaType.class,"java.util","EnumMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"toArray()","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"toArray(java.lang.Object[])","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"EnumMap$EntrySet(java.util.EnumMap, java.util.EnumMap$1)","EnumMap$EntrySet",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EnumMap$EnumMapIterator",1056);
    helper.addExtendsLinks("java.util", "EnumMap$EnumMapIterator","java.lang","Object");
    helper.addImplementsLinks("java.util", "EnumMap$EnumMapIterator","java.util","Iterator");
    helper.createField(newType,JavaTypePrimitive.class,"","int","index",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","lastReturnedIndex",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","EnumMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"EnumMap$EnumMapIterator(java.util.EnumMap, java.util.EnumMap$1)","EnumMap$EnumMapIterator",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EnumMap$KeyIterator",32);
    helper.addExtendsLinks("java.util", "EnumMap$KeyIterator","java.util","EnumMap$EnumMapIterator");
	helper.createField(newType,JavaType.class,"java.util","EnumMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Enum",false,0);
    method = helper.createMethod(newType,"next()","next",false,4161);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"EnumMap$KeyIterator(java.util.EnumMap, java.util.EnumMap$1)","EnumMap$KeyIterator",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EnumMap$KeySet",32);
    helper.addExtendsLinks("java.util", "EnumMap$KeySet","java.util","AbstractSet");
	helper.createField(newType,JavaType.class,"java.util","EnumMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"EnumMap$KeySet(java.util.EnumMap, java.util.EnumMap$1)","EnumMap$KeySet",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EnumMap$ValueIterator",32);
    helper.addExtendsLinks("java.util", "EnumMap$ValueIterator","java.util","EnumMap$EnumMapIterator");
	helper.createField(newType,JavaType.class,"java.util","EnumMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"EnumMap$ValueIterator(java.util.EnumMap, java.util.EnumMap$1)","EnumMap$ValueIterator",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EnumMap$Values",32);
    helper.addExtendsLinks("java.util", "EnumMap$Values","java.util","AbstractCollection");
	helper.createField(newType,JavaType.class,"java.util","EnumMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"EnumMap$Values(java.util.EnumMap, java.util.EnumMap$1)","EnumMap$Values",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EnumMap",33);
    helper.addExtendsLinks("java.util", "EnumMap","java.util","AbstractMap");
    helper.addImplementsLinks("java.util", "EnumMap","java.io","Serializable");
    helper.addImplementsLinks("java.util", "EnumMap","java.lang","Cloneable");
    method = helper.createMethod(newType,"EnumMap(java.lang.Class)","EnumMap",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"EnumMap(java.util.EnumMap)","EnumMap",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"EnumMap(java.util.Map)","EnumMap",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"containsValue(java.lang.Object)","containsValue",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsKey(java.lang.Object)","containsKey",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"get(java.lang.Object)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"put(java.lang.Enum, java.lang.Object)","put",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"putAll(java.util.Map)","putAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"keySet()","keySet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"values()","values",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Collection",false,0);
    method = helper.createMethod(newType,"entrySet()","entrySet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","EnumMap",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,4161);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
        helper.addThrowsOnMethod(method, "java.lang","CloneNotSupportedException");
    method = helper.createMethod(newType,"put(java.lang.Object, java.lang.Object)","put",false,4161);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"access$200(java.util.EnumMap)","access$200",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"access$500(java.util.EnumMap, java.lang.Object)","access$500",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"access$600(java.util.EnumMap)","access$600",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"access$210(java.util.EnumMap)","access$210",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"access$900(java.util.EnumMap, java.lang.Object, java.lang.Object)","access$900",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"access$1000(java.util.EnumMap, java.lang.Object, java.lang.Object)","access$1000",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"access$1100(java.util.EnumMap)","access$1100",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Enum",true,1);
    method = helper.createMethod(newType,"access$1200(java.util.EnumMap, java.lang.Object)","access$1200",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"access$1400()","access$1400",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EnumSet$SerializationProxy",32);
    helper.addExtendsLinks("java.util", "EnumSet$SerializationProxy","java.lang","Object");
    helper.addImplementsLinks("java.util", "EnumSet$SerializationProxy","java.io","Serializable");
    method = helper.createMethod(newType,"EnumSet$SerializationProxy(java.util.EnumSet)","EnumSet$SerializationProxy",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EnumSet",1057);
    helper.addExtendsLinks("java.util", "EnumSet","java.util","AbstractSet");
    helper.addImplementsLinks("java.util", "EnumSet","java.lang","Cloneable");
    helper.addImplementsLinks("java.util", "EnumSet","java.io","Serializable");
	helper.createField(newType,JavaType.class,"java.lang","Class","elementType",16,false,0);
    method = helper.createMethod(newType,"EnumSet(java.lang.Class, java.lang.Enum[])","EnumSet",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"noneOf(java.lang.Class)","noneOf",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","EnumSet",false,0);
    method = helper.createMethod(newType,"allOf(java.lang.Class)","allOf",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","EnumSet",false,0);
    method = helper.createMethod(newType,"addAll()","addAll",false,1024);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"copyOf(java.util.EnumSet)","copyOf",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","EnumSet",false,0);
    method = helper.createMethod(newType,"copyOf(java.util.Collection)","copyOf",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","EnumSet",false,0);
    method = helper.createMethod(newType,"complementOf(java.util.EnumSet)","complementOf",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","EnumSet",false,0);
    method = helper.createMethod(newType,"of(java.lang.Enum)","of",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","EnumSet",false,0);
    method = helper.createMethod(newType,"of(java.lang.Enum, java.lang.Enum)","of",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","EnumSet",false,0);
    method = helper.createMethod(newType,"of(java.lang.Enum, java.lang.Enum, java.lang.Enum)","of",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","EnumSet",false,0);
    method = helper.createMethod(newType,"of(java.lang.Enum, java.lang.Enum, java.lang.Enum, java.lang.Enum)","of",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","EnumSet",false,0);
    method = helper.createMethod(newType,"of(java.lang.Enum, java.lang.Enum, java.lang.Enum, java.lang.Enum, java.lang.Enum)","of",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","EnumSet",false,0);
    method = helper.createMethod(newType,"of(java.lang.Enum, java.lang.Enum[])","of",false,137);
    helper.createMethodReturnType(method,JavaType.class,"java.util","EnumSet",false,0);
    method = helper.createMethod(newType,"range(java.lang.Enum, java.lang.Enum)","range",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","EnumSet",false,0);
    method = helper.createMethod(newType,"addRange(java.lang.Enum, java.lang.Enum)","addRange",false,1024);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","EnumSet",false,0);
    method = helper.createMethod(newType,"complement()","complement",false,1024);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"typeCheck(java.lang.Enum)","typeCheck",false,16);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"writeReplace()","writeReplace",false,0);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,4161);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
        helper.addThrowsOnMethod(method, "java.lang","CloneNotSupportedException");
    method = helper.createMethod(newType,"access$000()","access$000",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Enum",true,1);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "EventListener",1537);
    helper.addExtendsLinks("java.util", "EventListener","java.lang","Object");
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EventListenerProxy",1057);
    helper.addExtendsLinks("java.util", "EventListenerProxy","java.lang","Object");
    helper.addImplementsLinks("java.util", "EventListenerProxy","java.util","EventListener");
    method = helper.createMethod(newType,"EventListenerProxy(java.util.EventListener)","EventListenerProxy",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getListener()","getListener",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","EventListener",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "EventObject",33);
    helper.addExtendsLinks("java.util", "EventObject","java.lang","Object");
    helper.addImplementsLinks("java.util", "EventObject","java.io","Serializable");
	helper.createField(newType,JavaType.class,"java.lang","Object","source",132,false,0);
    method = helper.createMethod(newType,"EventObject(java.lang.Object)","EventObject",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getSource()","getSource",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "FormatFlagsConversionMismatchException",33);
    helper.addExtendsLinks("java.util", "FormatFlagsConversionMismatchException","java.util","IllegalFormatException");
    method = helper.createMethod(newType,"FormatFlagsConversionMismatchException(java.lang.String, char)","FormatFlagsConversionMismatchException",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getFlags()","getFlags",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getConversion()","getConversion",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "char",false,0);
    method = helper.createMethod(newType,"getMessage()","getMessage",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "Formattable",1537);
    helper.addExtendsLinks("java.util", "Formattable","java.lang","Object");
    method = helper.createMethod(newType,"formatTo(java.util.Formatter, int, int, int)","formatTo",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "FormattableFlags",33);
    helper.addExtendsLinks("java.util", "FormattableFlags","java.lang","Object");
    helper.createField(newType,JavaTypePrimitive.class,"","int","LEFT_JUSTIFY",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","UPPERCASE",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","ALTERNATE",25,false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeEnum.class,"java.util", "Formatter$BigDecimalLayoutForm",16433);
    helper.addExtendsLinks("java.util", "Formatter$BigDecimalLayoutForm","java.lang","Enum");
	helper.createField(newType,JavaType.class,"java.util","Formatter$BigDecimalLayoutForm","SCIENTIFIC",16409,false,0);
	helper.createField(newType,JavaType.class,"java.util","Formatter$BigDecimalLayoutForm","DECIMAL_FLOAT",16409,false,0);
    method = helper.createMethod(newType,"values()","values",false,25);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.util","Formatter$BigDecimalLayoutForm",true,1);
    method = helper.createMethod(newType,"valueOf(java.lang.String)","valueOf",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Formatter$BigDecimalLayoutForm",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Formatter$Conversion",32);
    helper.addExtendsLinks("java.util", "Formatter$Conversion","java.lang","Object");
    helper.createField(newType,JavaTypePrimitive.class,"","char","DECIMAL_INTEGER",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","OCTAL_INTEGER",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","HEXADECIMAL_INTEGER",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","HEXADECIMAL_INTEGER_UPPER",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","SCIENTIFIC",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","SCIENTIFIC_UPPER",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","GENERAL",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","GENERAL_UPPER",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","DECIMAL_FLOAT",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","HEXADECIMAL_FLOAT",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","HEXADECIMAL_FLOAT_UPPER",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","CHARACTER",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","CHARACTER_UPPER",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","DATE_TIME",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","DATE_TIME_UPPER",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","BOOLEAN",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","BOOLEAN_UPPER",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","STRING",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","STRING_UPPER",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","HASHCODE",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","HASHCODE_UPPER",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","LINE_SEPARATOR",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","PERCENT_SIGN",24,false,0);
    method = helper.createMethod(newType,"isValid(char)","isValid",false,8);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"isGeneral(char)","isGeneral",false,8);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"isInteger(char)","isInteger",false,8);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"isFloat(char)","isFloat",false,8);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"isText(char)","isText",false,8);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Formatter$DateTime",32);
    helper.addExtendsLinks("java.util", "Formatter$DateTime","java.lang","Object");
    helper.createField(newType,JavaTypePrimitive.class,"","char","HOUR_OF_DAY_0",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","HOUR_0",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","HOUR_OF_DAY",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","HOUR",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","MINUTE",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","NANOSECOND",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","MILLISECOND",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","MILLISECOND_SINCE_EPOCH",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","AM_PM",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","SECONDS_SINCE_EPOCH",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","SECOND",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","TIME",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","ZONE_NUMERIC",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","ZONE",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","NAME_OF_DAY_ABBREV",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","NAME_OF_DAY",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","NAME_OF_MONTH_ABBREV",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","NAME_OF_MONTH",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","CENTURY",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","DAY_OF_MONTH_0",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","DAY_OF_MONTH",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","NAME_OF_MONTH_ABBREV_X",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","DAY_OF_YEAR",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","MONTH",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","YEAR_2",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","YEAR_4",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","TIME_12_HOUR",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","TIME_24_HOUR",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","DATE_TIME",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","DATE",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","char","ISO_STANDARD_DATE",24,false,0);
    method = helper.createMethod(newType,"isValid(char)","isValid",false,8);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Formatter$FixedString",32);
    helper.addExtendsLinks("java.util", "Formatter$FixedString","java.lang","Object");
    helper.addImplementsLinks("java.util", "Formatter$FixedString","java.util","Formatter$FormatString");
	helper.createField(newType,JavaType.class,"java.util","Formatter","this$0",4112,false,0);
    method = helper.createMethod(newType,"Formatter$FixedString(java.util.Formatter, java.lang.String)","Formatter$FixedString",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"index()","index",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"print(java.lang.Object, java.util.Locale)","print",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.io","IOException");
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Formatter$Flags",32);
    helper.addExtendsLinks("java.util", "Formatter$Flags","java.lang","Object");
	helper.createField(newType,JavaType.class,"java.util","Formatter$Flags","NONE",24,false,0);
	helper.createField(newType,JavaType.class,"java.util","Formatter$Flags","LEFT_JUSTIFY",24,false,0);
	helper.createField(newType,JavaType.class,"java.util","Formatter$Flags","UPPERCASE",24,false,0);
	helper.createField(newType,JavaType.class,"java.util","Formatter$Flags","ALTERNATE",24,false,0);
	helper.createField(newType,JavaType.class,"java.util","Formatter$Flags","PLUS",24,false,0);
	helper.createField(newType,JavaType.class,"java.util","Formatter$Flags","LEADING_SPACE",24,false,0);
	helper.createField(newType,JavaType.class,"java.util","Formatter$Flags","ZERO_PAD",24,false,0);
	helper.createField(newType,JavaType.class,"java.util","Formatter$Flags","GROUP",24,false,0);
	helper.createField(newType,JavaType.class,"java.util","Formatter$Flags","PARENTHESES",24,false,0);
	helper.createField(newType,JavaType.class,"java.util","Formatter$Flags","PREVIOUS",24,false,0);
    method = helper.createMethod(newType,"valueOf()","valueOf",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"contains(java.util.Formatter$Flags)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"dup()","dup",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Formatter$Flags",false,0);
    method = helper.createMethod(newType,"remove(java.util.Formatter$Flags)","remove",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Formatter$Flags",false,0);
    method = helper.createMethod(newType,"parse(java.lang.String)","parse",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Formatter$Flags",false,0);
    method = helper.createMethod(newType,"toString(java.util.Formatter$Flags)","toString",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"access$100(java.util.Formatter$Flags, java.util.Formatter$Flags)","access$100",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Formatter$Flags",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Formatter$FormatSpecifier$BigDecimalLayout",32);
    helper.addExtendsLinks("java.util", "Formatter$FormatSpecifier$BigDecimalLayout","java.lang","Object");
	helper.createField(newType,JavaType.class,"java.util","Formatter$FormatSpecifier","this$1",4112,false,0);
    method = helper.createMethod(newType,"Formatter$FormatSpecifier$BigDecimalLayout(java.util.Formatter$FormatSpecifier, java.math.BigInteger, int, java.util.Formatter$BigDecimalLayoutForm)","Formatter$FormatSpecifier$BigDecimalLayout",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasDot()","hasDot",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"layoutChars()","layoutChars",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "char",true,1);
    method = helper.createMethod(newType,"mantissa()","mantissa",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "char",true,1);
    method = helper.createMethod(newType,"exponent()","exponent",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "char",true,1);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Formatter$FormatSpecifier",32);
    helper.addExtendsLinks("java.util", "Formatter$FormatSpecifier","java.lang","Object");
    helper.addImplementsLinks("java.util", "Formatter$FormatSpecifier","java.util","Formatter$FormatString");
    helper.createField(newType,JavaTypePrimitive.class,"","boolean","$assertionsDisabled",4120,false,0);
	helper.createField(newType,JavaType.class,"java.util","Formatter","this$0",4112,false,0);
    method = helper.createMethod(newType,"index()","index",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"flags()","flags",false,0);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Formatter$Flags",false,0);
    method = helper.createMethod(newType,"width()","width",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"precision()","precision",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"Formatter$FormatSpecifier(java.util.Formatter, java.util.Formatter, java.lang.String[])","Formatter$FormatSpecifier",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"print(java.lang.Object, java.util.Locale)","print",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.io","IOException");
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "Formatter$FormatString",1536);
    helper.addExtendsLinks("java.util", "Formatter$FormatString","java.lang","Object");
    method = helper.createMethod(newType,"index()","index",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"print(java.lang.Object, java.util.Locale)","print",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.io","IOException");
    method = helper.createMethod(newType,"toString()","toString",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Formatter",49);
    helper.addExtendsLinks("java.util", "Formatter","java.lang","Object");
    helper.addImplementsLinks("java.util", "Formatter","java.io","Closeable");
    helper.addImplementsLinks("java.util", "Formatter","java.io","Flushable");
    method = helper.createMethod(newType,"Formatter()","Formatter",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Formatter(java.lang.Appendable)","Formatter",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Formatter(java.util.Locale)","Formatter",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Formatter(java.lang.Appendable, java.util.Locale)","Formatter",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Formatter(java.lang.String)","Formatter",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.io","FileNotFoundException");
    method = helper.createMethod(newType,"Formatter(java.lang.String, java.lang.String)","Formatter",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.io","FileNotFoundException");
        helper.addThrowsOnMethod(method, "java.io","UnsupportedEncodingException");
    method = helper.createMethod(newType,"Formatter(java.lang.String, java.lang.String, java.util.Locale)","Formatter",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.io","FileNotFoundException");
        helper.addThrowsOnMethod(method, "java.io","UnsupportedEncodingException");
    method = helper.createMethod(newType,"Formatter(java.io.File)","Formatter",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.io","FileNotFoundException");
    method = helper.createMethod(newType,"Formatter(java.io.File, java.lang.String)","Formatter",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.io","FileNotFoundException");
        helper.addThrowsOnMethod(method, "java.io","UnsupportedEncodingException");
    method = helper.createMethod(newType,"Formatter(java.io.File, java.lang.String, java.util.Locale)","Formatter",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.io","FileNotFoundException");
        helper.addThrowsOnMethod(method, "java.io","UnsupportedEncodingException");
    method = helper.createMethod(newType,"Formatter(java.io.PrintStream)","Formatter",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Formatter(java.io.OutputStream)","Formatter",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Formatter(java.io.OutputStream, java.lang.String)","Formatter",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.io","UnsupportedEncodingException");
    method = helper.createMethod(newType,"Formatter(java.io.OutputStream, java.lang.String, java.util.Locale)","Formatter",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.io","UnsupportedEncodingException");
    method = helper.createMethod(newType,"locale()","locale",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Locale",false,0);
    method = helper.createMethod(newType,"out()","out",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Appendable",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"flush()","flush",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"close()","close",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"ioException()","ioException",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.io","IOException",false,0);
    method = helper.createMethod(newType,"format(java.lang.String, java.lang.Object[])","format",false,129);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Formatter",false,0);
    method = helper.createMethod(newType,"format(java.util.Locale, java.lang.String, java.lang.Object[])","format",false,129);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Formatter",false,0);
    method = helper.createMethod(newType,"access$000(java.util.Formatter)","access$000",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Appendable",false,0);
    method = helper.createMethod(newType,"access$202(double)","access$202",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "double",false,0);
    method = helper.createMethod(newType,"access$200()","access$200",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "double",false,0);
    method = helper.createMethod(newType,"access$300(java.util.Formatter)","access$300",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "char",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "FormatterClosedException",33);
    helper.addExtendsLinks("java.util", "FormatterClosedException","java.lang","IllegalStateException");
    method = helper.createMethod(newType,"FormatterClosedException()","FormatterClosedException",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "GregorianCalendar",33);
    helper.addExtendsLinks("java.util", "GregorianCalendar","java.util","Calendar");
    helper.createField(newType,JavaTypePrimitive.class,"","int","BC",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","BCE",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","AD",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","CE",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","long","serialVersionUID",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","long","DEFAULT_GREGORIAN_CUTOVER",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","boolean","$assertionsDisabled",4120,false,0);
    method = helper.createMethod(newType,"GregorianCalendar()","GregorianCalendar",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"GregorianCalendar(java.util.TimeZone)","GregorianCalendar",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"GregorianCalendar(java.util.Locale)","GregorianCalendar",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"GregorianCalendar(java.util.TimeZone, java.util.Locale)","GregorianCalendar",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"GregorianCalendar(int, int, int)","GregorianCalendar",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"GregorianCalendar(int, int, int, int, int)","GregorianCalendar",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"GregorianCalendar(int, int, int, int, int, int)","GregorianCalendar",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"GregorianCalendar(int, int, int, int, int, int, int)","GregorianCalendar",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"setGregorianChange(java.util.Date)","setGregorianChange",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getGregorianChange()","getGregorianChange",false,17);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Date",false,0);
    method = helper.createMethod(newType,"isLeapYear(int)","isLeapYear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"add(int, int)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"roll(int, boolean)","roll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"roll(int, int)","roll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getMinimum(int)","getMinimum",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"getMaximum(int)","getMaximum",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"getGreatestMinimum(int)","getGreatestMinimum",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"getLeastMaximum(int)","getLeastMaximum",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"getActualMinimum(int)","getActualMinimum",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"getActualMaximum(int)","getActualMaximum",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"getTimeZone()","getTimeZone",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","TimeZone",false,0);
    method = helper.createMethod(newType,"setTimeZone(java.util.TimeZone)","setTimeZone",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"computeFields()","computeFields",false,4);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"computeTime()","computeTime",false,4);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "HashMap$1",32);
    helper.addExtendsLinks("java.util", "HashMap$1","java.lang","Object");
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "HashMap$Entry",32);
    helper.addExtendsLinks("java.util", "HashMap$Entry","java.lang","Object");
    helper.addImplementsLinks("java.util", "HashMap$Entry","java.util","Map$Entry");
	helper.createField(newType,JavaType.class,"java.lang","Object","key",16,false,0);
	helper.createField(newType,JavaType.class,"java.lang","Object","value",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","hash",16,false,0);
	helper.createField(newType,JavaType.class,"java.util","HashMap$Entry","next",0,false,0);
    method = helper.createMethod(newType,"HashMap$Entry(int, java.lang.Object, java.lang.Object, java.util.HashMap$Entry)","HashMap$Entry",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getKey()","getKey",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"getValue()","getValue",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"setValue(java.lang.Object)","setValue",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"recordAccess(java.util.HashMap)","recordAccess",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"recordRemoval(java.util.HashMap)","recordRemoval",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "HashMap$EntryIterator",32);
    helper.addExtendsLinks("java.util", "HashMap$EntryIterator","java.util","HashMap$HashIterator");
	helper.createField(newType,JavaType.class,"java.util","HashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Map$Entry",false,0);
    method = helper.createMethod(newType,"next()","next",false,4161);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"HashMap$EntryIterator(java.util.HashMap, java.util.HashMap$1)","HashMap$EntryIterator",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "HashMap$EntrySet",32);
    helper.addExtendsLinks("java.util", "HashMap$EntrySet","java.util","AbstractSet");
	helper.createField(newType,JavaType.class,"java.util","HashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"HashMap$EntrySet(java.util.HashMap, java.util.HashMap$1)","HashMap$EntrySet",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "HashMap$HashIterator",1056);
    helper.addExtendsLinks("java.util", "HashMap$HashIterator","java.lang","Object");
    helper.addImplementsLinks("java.util", "HashMap$HashIterator","java.util","Iterator");
	helper.createField(newType,JavaType.class,"java.util","HashMap$Entry","next",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","expectedModCount",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","index",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","HashMap$Entry","current",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","HashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"HashMap$HashIterator(java.util.HashMap)","HashMap$HashIterator",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"nextEntry()","nextEntry",false,0);
    helper.createMethodReturnType(method,JavaType.class,"java.util","HashMap$Entry",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "HashMap$KeyIterator",32);
    helper.addExtendsLinks("java.util", "HashMap$KeyIterator","java.util","HashMap$HashIterator");
	helper.createField(newType,JavaType.class,"java.util","HashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"HashMap$KeyIterator(java.util.HashMap, java.util.HashMap$1)","HashMap$KeyIterator",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "HashMap$KeySet",32);
    helper.addExtendsLinks("java.util", "HashMap$KeySet","java.util","AbstractSet");
	helper.createField(newType,JavaType.class,"java.util","HashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"HashMap$KeySet(java.util.HashMap, java.util.HashMap$1)","HashMap$KeySet",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "HashMap$ValueIterator",32);
    helper.addExtendsLinks("java.util", "HashMap$ValueIterator","java.util","HashMap$HashIterator");
	helper.createField(newType,JavaType.class,"java.util","HashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"HashMap$ValueIterator(java.util.HashMap, java.util.HashMap$1)","HashMap$ValueIterator",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "HashMap$Values",32);
    helper.addExtendsLinks("java.util", "HashMap$Values","java.util","AbstractCollection");
	helper.createField(newType,JavaType.class,"java.util","HashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"HashMap$Values(java.util.HashMap, java.util.HashMap$1)","HashMap$Values",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "HashMap",33);
    helper.addExtendsLinks("java.util", "HashMap","java.util","AbstractMap");
    helper.addImplementsLinks("java.util", "HashMap","java.util","Map");
    helper.addImplementsLinks("java.util", "HashMap","java.lang","Cloneable");
    helper.addImplementsLinks("java.util", "HashMap","java.io","Serializable");
    helper.createField(newType,JavaTypePrimitive.class,"","int","DEFAULT_INITIAL_CAPACITY",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","MAXIMUM_CAPACITY",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","float","DEFAULT_LOAD_FACTOR",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","size",128,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","threshold",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","float","loadFactor",16,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","modCount",192,false,0);
	helper.createField(newType,JavaType.class,"java.lang","Object","NULL_KEY",24,false,0);
    method = helper.createMethod(newType,"HashMap(int, float)","HashMap",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"HashMap(int)","HashMap",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"HashMap()","HashMap",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"HashMap(java.util.Map)","HashMap",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"init()","init",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"maskNull(java.lang.Object)","maskNull",false,8);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"unmaskNull(java.lang.Object)","unmaskNull",false,8);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"hash(int)","hash",false,8);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"hash(java.lang.Object)","hash",false,8);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"eq(java.lang.Object, java.lang.Object)","eq",false,8);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"indexFor(int, int)","indexFor",false,8);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"get(java.lang.Object)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"containsKey(java.lang.Object)","containsKey",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"getEntry(java.lang.Object)","getEntry",false,0);
    helper.createMethodReturnType(method,JavaType.class,"java.util","HashMap$Entry",false,0);
    method = helper.createMethod(newType,"put(java.lang.Object, java.lang.Object)","put",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"putAllForCreate(java.util.Map)","putAllForCreate",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"resize(int)","resize",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"transfer(java.util.HashMap$Entry[])","transfer",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"putAll(java.util.Map)","putAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"removeEntryForKey(java.lang.Object)","removeEntryForKey",false,0);
    helper.createMethodReturnType(method,JavaType.class,"java.util","HashMap$Entry",false,0);
    method = helper.createMethod(newType,"removeMapping(java.lang.Object)","removeMapping",false,0);
    helper.createMethodReturnType(method,JavaType.class,"java.util","HashMap$Entry",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"containsValue(java.lang.Object)","containsValue",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"addEntry(int, java.lang.Object, java.lang.Object, int)","addEntry",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"createEntry(int, java.lang.Object, java.lang.Object, int)","createEntry",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"newKeyIterator()","newKeyIterator",false,0);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"newValueIterator()","newValueIterator",false,0);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"newEntryIterator()","newEntryIterator",false,0);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"keySet()","keySet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"values()","values",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Collection",false,0);
    method = helper.createMethod(newType,"entrySet()","entrySet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"capacity()","capacity",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"loadFactor()","loadFactor",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "float",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "HashSet",33);
    helper.addExtendsLinks("java.util", "HashSet","java.util","AbstractSet");
    helper.addImplementsLinks("java.util", "HashSet","java.util","Set");
    helper.addImplementsLinks("java.util", "HashSet","java.lang","Cloneable");
    helper.addImplementsLinks("java.util", "HashSet","java.io","Serializable");
    helper.createField(newType,JavaTypePrimitive.class,"","long","serialVersionUID",24,false,0);
    method = helper.createMethod(newType,"HashSet()","HashSet",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"HashSet(java.util.Collection)","HashSet",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"HashSet(int, float)","HashSet",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"HashSet(int)","HashSet",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"HashSet(int, float, boolean)","HashSet",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Hashtable$1",32);
    helper.addExtendsLinks("java.util", "Hashtable$1","java.lang","Object");
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Hashtable$EmptyEnumerator",32);
    helper.addExtendsLinks("java.util", "Hashtable$EmptyEnumerator","java.lang","Object");
    helper.addImplementsLinks("java.util", "Hashtable$EmptyEnumerator","java.util","Enumeration");
    method = helper.createMethod(newType,"Hashtable$EmptyEnumerator()","Hashtable$EmptyEnumerator",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasMoreElements()","hasMoreElements",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"nextElement()","nextElement",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Hashtable$EmptyIterator",32);
    helper.addExtendsLinks("java.util", "Hashtable$EmptyIterator","java.lang","Object");
    helper.addImplementsLinks("java.util", "Hashtable$EmptyIterator","java.util","Iterator");
    method = helper.createMethod(newType,"Hashtable$EmptyIterator()","Hashtable$EmptyIterator",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Hashtable$Entry",32);
    helper.addExtendsLinks("java.util", "Hashtable$Entry","java.lang","Object");
    helper.addImplementsLinks("java.util", "Hashtable$Entry","java.util","Map$Entry");
    helper.createField(newType,JavaTypePrimitive.class,"","int","hash",0,false,0);
	helper.createField(newType,JavaType.class,"java.lang","Object","key",0,false,0);
	helper.createField(newType,JavaType.class,"java.lang","Object","value",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","Hashtable$Entry","next",0,false,0);
    method = helper.createMethod(newType,"Hashtable$Entry(int, java.lang.Object, java.lang.Object, java.util.Hashtable$Entry)","Hashtable$Entry",true,4);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,4);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"getKey()","getKey",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"getValue()","getValue",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"setValue(java.lang.Object)","setValue",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Hashtable$EntrySet",32);
    helper.addExtendsLinks("java.util", "Hashtable$EntrySet","java.util","AbstractSet");
	helper.createField(newType,JavaType.class,"java.util","Hashtable","this$0",4112,false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Hashtable$EntrySet(java.util.Hashtable, java.util.Hashtable$1)","Hashtable$EntrySet",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Hashtable$Enumerator",32);
    helper.addExtendsLinks("java.util", "Hashtable$Enumerator","java.lang","Object");
    helper.addImplementsLinks("java.util", "Hashtable$Enumerator","java.util","Enumeration");
    helper.addImplementsLinks("java.util", "Hashtable$Enumerator","java.util","Iterator");
    helper.createField(newType,JavaTypePrimitive.class,"","int","index",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","Hashtable$Entry","entry",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","Hashtable$Entry","lastReturned",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","type",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","boolean","iterator",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","expectedModCount",4,false,0);
	helper.createField(newType,JavaType.class,"java.util","Hashtable","this$0",4112,false,0);
    method = helper.createMethod(newType,"Hashtable$Enumerator(java.util.Hashtable, int, boolean)","Hashtable$Enumerator",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasMoreElements()","hasMoreElements",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"nextElement()","nextElement",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Hashtable$KeySet",32);
    helper.addExtendsLinks("java.util", "Hashtable$KeySet","java.util","AbstractSet");
	helper.createField(newType,JavaType.class,"java.util","Hashtable","this$0",4112,false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Hashtable$KeySet(java.util.Hashtable, java.util.Hashtable$1)","Hashtable$KeySet",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Hashtable$ValueCollection",32);
    helper.addExtendsLinks("java.util", "Hashtable$ValueCollection","java.util","AbstractCollection");
	helper.createField(newType,JavaType.class,"java.util","Hashtable","this$0",4112,false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Hashtable$ValueCollection(java.util.Hashtable, java.util.Hashtable$1)","Hashtable$ValueCollection",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Hashtable",33);
    helper.addExtendsLinks("java.util", "Hashtable","java.util","Dictionary");
    helper.addImplementsLinks("java.util", "Hashtable","java.util","Map");
    helper.addImplementsLinks("java.util", "Hashtable","java.lang","Cloneable");
    helper.addImplementsLinks("java.util", "Hashtable","java.io","Serializable");
    method = helper.createMethod(newType,"Hashtable(int, float)","Hashtable",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Hashtable(int)","Hashtable",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Hashtable()","Hashtable",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Hashtable(java.util.Map)","Hashtable",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"size()","size",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"keys()","keys",false,33);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Enumeration",false,0);
    method = helper.createMethod(newType,"elements()","elements",false,33);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Enumeration",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsValue(java.lang.Object)","containsValue",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsKey(java.lang.Object)","containsKey",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"get(java.lang.Object)","get",false,33);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"rehash()","rehash",false,4);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"put(java.lang.Object, java.lang.Object)","put",false,33);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,33);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"putAll(java.util.Map)","putAll",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,33);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,33);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"keySet()","keySet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"entrySet()","entrySet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"values()","values",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Collection",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"access$100(java.util.Hashtable, int)","access$100",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"access$200(java.util.Hashtable)","access$200",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"access$400(java.util.Hashtable)","access$400",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.util","Hashtable$Entry",true,1);
    method = helper.createMethod(newType,"access$508(java.util.Hashtable)","access$508",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"access$210(java.util.Hashtable)","access$210",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"access$500(java.util.Hashtable)","access$500",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IdentityHashMap$1",32);
    helper.addExtendsLinks("java.util", "IdentityHashMap$1","java.lang","Object");
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IdentityHashMap$EntryIterator",32);
    helper.addExtendsLinks("java.util", "IdentityHashMap$EntryIterator","java.util","IdentityHashMap$IdentityHashMapIterator");
    helper.addImplementsLinks("java.util", "IdentityHashMap$EntryIterator","java.util","Map$Entry");
	helper.createField(newType,JavaType.class,"java.util","IdentityHashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Map$Entry",false,0);
    method = helper.createMethod(newType,"getKey()","getKey",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"getValue()","getValue",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"setValue(java.lang.Object)","setValue",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"next()","next",false,4161);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"IdentityHashMap$EntryIterator(java.util.IdentityHashMap, java.util.IdentityHashMap$1)","IdentityHashMap$EntryIterator",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IdentityHashMap$EntrySet",32);
    helper.addExtendsLinks("java.util", "IdentityHashMap$EntrySet","java.util","AbstractSet");
	helper.createField(newType,JavaType.class,"java.util","IdentityHashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"removeAll(java.util.Collection)","removeAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"toArray()","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"toArray(java.lang.Object[])","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"IdentityHashMap$EntrySet(java.util.IdentityHashMap, java.util.IdentityHashMap$1)","IdentityHashMap$EntrySet",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IdentityHashMap$IdentityHashMapIterator",1056);
    helper.addExtendsLinks("java.util", "IdentityHashMap$IdentityHashMapIterator","java.lang","Object");
    helper.addImplementsLinks("java.util", "IdentityHashMap$IdentityHashMapIterator","java.util","Iterator");
    helper.createField(newType,JavaTypePrimitive.class,"","int","index",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","expectedModCount",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","lastReturnedIndex",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","boolean","indexValid",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","IdentityHashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"nextIndex()","nextIndex",false,4);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"IdentityHashMap$IdentityHashMapIterator(java.util.IdentityHashMap, java.util.IdentityHashMap$1)","IdentityHashMap$IdentityHashMapIterator",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IdentityHashMap$KeyIterator",32);
    helper.addExtendsLinks("java.util", "IdentityHashMap$KeyIterator","java.util","IdentityHashMap$IdentityHashMapIterator");
	helper.createField(newType,JavaType.class,"java.util","IdentityHashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"IdentityHashMap$KeyIterator(java.util.IdentityHashMap, java.util.IdentityHashMap$1)","IdentityHashMap$KeyIterator",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IdentityHashMap$KeySet",32);
    helper.addExtendsLinks("java.util", "IdentityHashMap$KeySet","java.util","AbstractSet");
	helper.createField(newType,JavaType.class,"java.util","IdentityHashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"removeAll(java.util.Collection)","removeAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"IdentityHashMap$KeySet(java.util.IdentityHashMap, java.util.IdentityHashMap$1)","IdentityHashMap$KeySet",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IdentityHashMap$ValueIterator",32);
    helper.addExtendsLinks("java.util", "IdentityHashMap$ValueIterator","java.util","IdentityHashMap$IdentityHashMapIterator");
	helper.createField(newType,JavaType.class,"java.util","IdentityHashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"IdentityHashMap$ValueIterator(java.util.IdentityHashMap, java.util.IdentityHashMap$1)","IdentityHashMap$ValueIterator",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IdentityHashMap$Values",32);
    helper.addExtendsLinks("java.util", "IdentityHashMap$Values","java.util","AbstractCollection");
	helper.createField(newType,JavaType.class,"java.util","IdentityHashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"IdentityHashMap$Values(java.util.IdentityHashMap, java.util.IdentityHashMap$1)","IdentityHashMap$Values",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IdentityHashMap",33);
    helper.addExtendsLinks("java.util", "IdentityHashMap","java.util","AbstractMap");
    helper.addImplementsLinks("java.util", "IdentityHashMap","java.util","Map");
    helper.addImplementsLinks("java.util", "IdentityHashMap","java.io","Serializable");
    helper.addImplementsLinks("java.util", "IdentityHashMap","java.lang","Cloneable");
    method = helper.createMethod(newType,"IdentityHashMap()","IdentityHashMap",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"IdentityHashMap(int)","IdentityHashMap",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"IdentityHashMap(java.util.Map)","IdentityHashMap",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"get(java.lang.Object)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"containsKey(java.lang.Object)","containsKey",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsValue(java.lang.Object)","containsValue",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"put(java.lang.Object, java.lang.Object)","put",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"putAll(java.util.Map)","putAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"keySet()","keySet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"values()","values",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Collection",false,0);
    method = helper.createMethod(newType,"entrySet()","entrySet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"access$000(java.util.IdentityHashMap)","access$000",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"access$100(java.util.IdentityHashMap)","access$100",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"access$200(java.util.IdentityHashMap)","access$200",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"access$204(java.util.IdentityHashMap)","access$204",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"access$010(java.util.IdentityHashMap)","access$010",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"access$300(int, int)","access$300",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"access$400(java.lang.Object, int)","access$400",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"access$600(java.lang.Object)","access$600",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"access$1300(java.util.IdentityHashMap, java.lang.Object, java.lang.Object)","access$1300",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"access$1400(java.util.IdentityHashMap, java.lang.Object, java.lang.Object)","access$1400",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IllegalFormatCodePointException",33);
    helper.addExtendsLinks("java.util", "IllegalFormatCodePointException","java.util","IllegalFormatException");
    method = helper.createMethod(newType,"IllegalFormatCodePointException(int)","IllegalFormatCodePointException",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getCodePoint()","getCodePoint",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"getMessage()","getMessage",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IllegalFormatConversionException",33);
    helper.addExtendsLinks("java.util", "IllegalFormatConversionException","java.util","IllegalFormatException");
    method = helper.createMethod(newType,"IllegalFormatConversionException(char, java.lang.Class)","IllegalFormatConversionException",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getConversion()","getConversion",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "char",false,0);
    method = helper.createMethod(newType,"getArgumentClass()","getArgumentClass",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Class",false,0);
    method = helper.createMethod(newType,"getMessage()","getMessage",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IllegalFormatException",33);
    helper.addExtendsLinks("java.util", "IllegalFormatException","java.lang","IllegalArgumentException");
    method = helper.createMethod(newType,"IllegalFormatException()","IllegalFormatException",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IllegalFormatFlagsException",33);
    helper.addExtendsLinks("java.util", "IllegalFormatFlagsException","java.util","IllegalFormatException");
    method = helper.createMethod(newType,"IllegalFormatFlagsException(java.lang.String)","IllegalFormatFlagsException",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getFlags()","getFlags",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getMessage()","getMessage",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IllegalFormatPrecisionException",33);
    helper.addExtendsLinks("java.util", "IllegalFormatPrecisionException","java.util","IllegalFormatException");
    method = helper.createMethod(newType,"IllegalFormatPrecisionException(int)","IllegalFormatPrecisionException",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getPrecision()","getPrecision",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"getMessage()","getMessage",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "IllegalFormatWidthException",33);
    helper.addExtendsLinks("java.util", "IllegalFormatWidthException","java.util","IllegalFormatException");
    method = helper.createMethod(newType,"IllegalFormatWidthException(int)","IllegalFormatWidthException",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getWidth()","getWidth",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"getMessage()","getMessage",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "InputMismatchException",33);
    helper.addExtendsLinks("java.util", "InputMismatchException","java.util","NoSuchElementException");
    method = helper.createMethod(newType,"InputMismatchException()","InputMismatchException",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"InputMismatchException(java.lang.String)","InputMismatchException",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "InvalidPropertiesFormatException",33);
    helper.addExtendsLinks("java.util", "InvalidPropertiesFormatException","java.io","IOException");
    method = helper.createMethod(newType,"InvalidPropertiesFormatException(java.lang.Throwable)","InvalidPropertiesFormatException",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"InvalidPropertiesFormatException(java.lang.String)","InvalidPropertiesFormatException",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "Iterator",1537);
    helper.addExtendsLinks("java.util", "Iterator","java.lang","Object");
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"next()","next",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "JumboEnumSet$EnumSetIterator",32);
    helper.addExtendsLinks("java.util", "JumboEnumSet$EnumSetIterator","java.lang","Object");
    helper.addImplementsLinks("java.util", "JumboEnumSet$EnumSetIterator","java.util","Iterator");
    helper.createField(newType,JavaTypePrimitive.class,"","long","unseen",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","unseenIndex",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","long","lastReturned",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","lastReturnedIndex",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","JumboEnumSet","this$0",4112,false,0);
    method = helper.createMethod(newType,"JumboEnumSet$EnumSetIterator(java.util.JumboEnumSet)","JumboEnumSet$EnumSetIterator",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Enum",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"next()","next",false,4161);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "JumboEnumSet",32);
    helper.addExtendsLinks("java.util", "JumboEnumSet","java.util","EnumSet");
    method = helper.createMethod(newType,"JumboEnumSet(java.lang.Class, java.lang.Enum[])","JumboEnumSet",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"addRange(java.lang.Enum, java.lang.Enum)","addRange",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"addAll()","addAll",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"complement()","complement",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"add(java.lang.Enum)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsAll(java.util.Collection)","containsAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"addAll(java.util.Collection)","addAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"removeAll(java.util.Collection)","removeAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"retainAll(java.util.Collection)","retainAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","EnumSet",false,0);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,4161);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,4161);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
        helper.addThrowsOnMethod(method, "java.lang","CloneNotSupportedException");
    method = helper.createMethod(newType,"access$000(java.util.JumboEnumSet)","access$000",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "long",true,1);
    method = helper.createMethod(newType,"access$110(java.util.JumboEnumSet)","access$110",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "LinkedHashMap$1",32);
    helper.addExtendsLinks("java.util", "LinkedHashMap$1","java.lang","Object");
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "LinkedHashMap$Entry",32);
    helper.addExtendsLinks("java.util", "LinkedHashMap$Entry","java.util","HashMap$Entry");
	helper.createField(newType,JavaType.class,"java.util","LinkedHashMap$Entry","before",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","LinkedHashMap$Entry","after",0,false,0);
    method = helper.createMethod(newType,"LinkedHashMap$Entry(int, java.lang.Object, java.lang.Object, java.util.HashMap$Entry)","LinkedHashMap$Entry",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"recordAccess(java.util.HashMap)","recordAccess",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"recordRemoval(java.util.HashMap)","recordRemoval",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"access$600(java.util.LinkedHashMap$Entry, java.util.LinkedHashMap$Entry)","access$600",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "LinkedHashMap$EntryIterator",32);
    helper.addExtendsLinks("java.util", "LinkedHashMap$EntryIterator","java.util","LinkedHashMap$LinkedHashIterator");
	helper.createField(newType,JavaType.class,"java.util","LinkedHashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Map$Entry",false,0);
    method = helper.createMethod(newType,"next()","next",false,4161);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"LinkedHashMap$EntryIterator(java.util.LinkedHashMap, java.util.LinkedHashMap$1)","LinkedHashMap$EntryIterator",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "LinkedHashMap$KeyIterator",32);
    helper.addExtendsLinks("java.util", "LinkedHashMap$KeyIterator","java.util","LinkedHashMap$LinkedHashIterator");
	helper.createField(newType,JavaType.class,"java.util","LinkedHashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"LinkedHashMap$KeyIterator(java.util.LinkedHashMap, java.util.LinkedHashMap$1)","LinkedHashMap$KeyIterator",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "LinkedHashMap$LinkedHashIterator",1056);
    helper.addExtendsLinks("java.util", "LinkedHashMap$LinkedHashIterator","java.lang","Object");
    helper.addImplementsLinks("java.util", "LinkedHashMap$LinkedHashIterator","java.util","Iterator");
	helper.createField(newType,JavaType.class,"java.util","LinkedHashMap$Entry","nextEntry",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","LinkedHashMap$Entry","lastReturned",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","expectedModCount",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","LinkedHashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"nextEntry()","nextEntry",false,0);
    helper.createMethodReturnType(method,JavaType.class,"java.util","LinkedHashMap$Entry",false,0);
    method = helper.createMethod(newType,"LinkedHashMap$LinkedHashIterator(java.util.LinkedHashMap, java.util.LinkedHashMap$1)","LinkedHashMap$LinkedHashIterator",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "LinkedHashMap$ValueIterator",32);
    helper.addExtendsLinks("java.util", "LinkedHashMap$ValueIterator","java.util","LinkedHashMap$LinkedHashIterator");
	helper.createField(newType,JavaType.class,"java.util","LinkedHashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"LinkedHashMap$ValueIterator(java.util.LinkedHashMap, java.util.LinkedHashMap$1)","LinkedHashMap$ValueIterator",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "LinkedHashMap",33);
    helper.addExtendsLinks("java.util", "LinkedHashMap","java.util","HashMap");
    helper.addImplementsLinks("java.util", "LinkedHashMap","java.util","Map");
    method = helper.createMethod(newType,"LinkedHashMap(int, float)","LinkedHashMap",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"LinkedHashMap(int)","LinkedHashMap",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"LinkedHashMap()","LinkedHashMap",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"LinkedHashMap(java.util.Map)","LinkedHashMap",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"LinkedHashMap(int, float, boolean)","LinkedHashMap",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"init()","init",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"transfer(java.util.HashMap$Entry[])","transfer",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"containsValue(java.lang.Object)","containsValue",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"get(java.lang.Object)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"newKeyIterator()","newKeyIterator",false,0);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"newValueIterator()","newValueIterator",false,0);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"newEntryIterator()","newEntryIterator",false,0);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"addEntry(int, java.lang.Object, java.lang.Object, int)","addEntry",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"createEntry(int, java.lang.Object, java.lang.Object, int)","createEntry",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"removeEldestEntry(java.util.Map$Entry)","removeEldestEntry",false,4);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"access$000(java.util.LinkedHashMap)","access$000",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"access$100(java.util.LinkedHashMap)","access$100",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.util","LinkedHashMap$Entry",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "LinkedHashSet",33);
    helper.addExtendsLinks("java.util", "LinkedHashSet","java.util","HashSet");
    helper.addImplementsLinks("java.util", "LinkedHashSet","java.util","Set");
    helper.addImplementsLinks("java.util", "LinkedHashSet","java.lang","Cloneable");
    helper.addImplementsLinks("java.util", "LinkedHashSet","java.io","Serializable");
    method = helper.createMethod(newType,"LinkedHashSet(int, float)","LinkedHashSet",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"LinkedHashSet(int)","LinkedHashSet",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"LinkedHashSet()","LinkedHashSet",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"LinkedHashSet(java.util.Collection)","LinkedHashSet",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "LinkedList$Entry",32);
    helper.addExtendsLinks("java.util", "LinkedList$Entry","java.lang","Object");
	helper.createField(newType,JavaType.class,"java.lang","Object","element",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","LinkedList$Entry","next",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","LinkedList$Entry","previous",0,false,0);
    method = helper.createMethod(newType,"LinkedList$Entry(java.lang.Object, java.util.LinkedList$Entry, java.util.LinkedList$Entry)","LinkedList$Entry",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "LinkedList$ListItr",32);
    helper.addExtendsLinks("java.util", "LinkedList$ListItr","java.lang","Object");
    helper.addImplementsLinks("java.util", "LinkedList$ListItr","java.util","ListIterator");
	helper.createField(newType,JavaType.class,"java.util","LinkedList","this$0",4112,false,0);
    method = helper.createMethod(newType,"LinkedList$ListItr(java.util.LinkedList, int)","LinkedList$ListItr",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"hasPrevious()","hasPrevious",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"previous()","previous",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"nextIndex()","nextIndex",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"previousIndex()","previousIndex",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"set(java.lang.Object)","set",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"checkForComodification()","checkForComodification",false,16);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "LinkedList",33);
    helper.addExtendsLinks("java.util", "LinkedList","java.util","AbstractSequentialList");
    helper.addImplementsLinks("java.util", "LinkedList","java.util","List");
    helper.addImplementsLinks("java.util", "LinkedList","java.util","Queue");
    helper.addImplementsLinks("java.util", "LinkedList","java.lang","Cloneable");
    helper.addImplementsLinks("java.util", "LinkedList","java.io","Serializable");
    method = helper.createMethod(newType,"LinkedList()","LinkedList",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"LinkedList(java.util.Collection)","LinkedList",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getFirst()","getFirst",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"getLast()","getLast",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"removeFirst()","removeFirst",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"removeLast()","removeLast",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"addFirst(java.lang.Object)","addFirst",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"addLast(java.lang.Object)","addLast",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"addAll(java.util.Collection)","addAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"addAll(int, java.util.Collection)","addAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"get(int)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"set(int, java.lang.Object)","set",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"add(int, java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"remove(int)","remove",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"indexOf(java.lang.Object)","indexOf",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"lastIndexOf(java.lang.Object)","lastIndexOf",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"peek()","peek",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"element()","element",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"poll()","poll",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"offer(java.lang.Object)","offer",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"listIterator(int)","listIterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","ListIterator",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"toArray()","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"toArray(java.lang.Object[])","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"access$000(java.util.LinkedList)","access$000",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.util","LinkedList$Entry",false,0);
    method = helper.createMethod(newType,"access$100(java.util.LinkedList)","access$100",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"access$200(java.util.LinkedList, java.util.LinkedList$Entry)","access$200",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"access$300(java.util.LinkedList, java.lang.Object, java.util.LinkedList$Entry)","access$300",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.util","LinkedList$Entry",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "List",1537);
    helper.addExtendsLinks("java.util", "List","java.lang","Object");
    helper.addImplementsLinks("java.util", "List","java.util","Collection");
    method = helper.createMethod(newType,"size()","size",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"toArray()","toArray",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"toArray(java.lang.Object[])","toArray",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsAll(java.util.Collection)","containsAll",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"addAll(java.util.Collection)","addAll",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"addAll(int, java.util.Collection)","addAll",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"removeAll(java.util.Collection)","removeAll",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"retainAll(java.util.Collection)","retainAll",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"get(int)","get",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"set(int, java.lang.Object)","set",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"add(int, java.lang.Object)","add",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"remove(int)","remove",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"indexOf(java.lang.Object)","indexOf",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"lastIndexOf(java.lang.Object)","lastIndexOf",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"listIterator()","listIterator",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.util","ListIterator",false,0);
    method = helper.createMethod(newType,"listIterator(int)","listIterator",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.util","ListIterator",false,0);
    method = helper.createMethod(newType,"subList(int, int)","subList",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.util","List",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "ListIterator",1537);
    helper.addExtendsLinks("java.util", "ListIterator","java.lang","Object");
    helper.addImplementsLinks("java.util", "ListIterator","java.util","Iterator");
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"next()","next",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"hasPrevious()","hasPrevious",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"previous()","previous",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"nextIndex()","nextIndex",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"previousIndex()","previousIndex",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"set(java.lang.Object)","set",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "ListResourceBundle",1057);
    helper.addExtendsLinks("java.util", "ListResourceBundle","java.util","ResourceBundle");
    method = helper.createMethod(newType,"ListResourceBundle()","ListResourceBundle",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"handleGetObject(java.lang.String)","handleGetObject",false,17);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"getKeys()","getKeys",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Enumeration",false,0);
    method = helper.createMethod(newType,"getContents()","getContents",false,1028);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,2);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Locale",49);
    helper.addExtendsLinks("java.util", "Locale","java.lang","Object");
    helper.addImplementsLinks("java.util", "Locale","java.lang","Cloneable");
    helper.addImplementsLinks("java.util", "Locale","java.io","Serializable");
	helper.createField(newType,JavaType.class,"java.util","Locale","ENGLISH",25,false,0);
	helper.createField(newType,JavaType.class,"java.util","Locale","FRENCH",25,false,0);
	helper.createField(newType,JavaType.class,"java.util","Locale","GERMAN",25,false,0);
	helper.createField(newType,JavaType.class,"java.util","Locale","ITALIAN",25,false,0);
	helper.createField(newType,JavaType.class,"java.util","Locale","JAPANESE",25,false,0);
	helper.createField(newType,JavaType.class,"java.util","Locale","KOREAN",25,false,0);
	helper.createField(newType,JavaType.class,"java.util","Locale","CHINESE",25,false,0);
	helper.createField(newType,JavaType.class,"java.util","Locale","SIMPLIFIED_CHINESE",25,false,0);
	helper.createField(newType,JavaType.class,"java.util","Locale","TRADITIONAL_CHINESE",25,false,0);
	helper.createField(newType,JavaType.class,"java.util","Locale","FRANCE",25,false,0);
	helper.createField(newType,JavaType.class,"java.util","Locale","GERMANY",25,false,0);
	helper.createField(newType,JavaType.class,"java.util","Locale","ITALY",25,false,0);
	helper.createField(newType,JavaType.class,"java.util","Locale","JAPAN",25,false,0);
	helper.createField(newType,JavaType.class,"java.util","Locale","KOREA",25,false,0);
	helper.createField(newType,JavaType.class,"java.util","Locale","CHINA",25,false,0);
	helper.createField(newType,JavaType.class,"java.util","Locale","PRC",25,false,0);
	helper.createField(newType,JavaType.class,"java.util","Locale","TAIWAN",25,false,0);
	helper.createField(newType,JavaType.class,"java.util","Locale","UK",25,false,0);
	helper.createField(newType,JavaType.class,"java.util","Locale","US",25,false,0);
	helper.createField(newType,JavaType.class,"java.util","Locale","CANADA",25,false,0);
	helper.createField(newType,JavaType.class,"java.util","Locale","CANADA_FRENCH",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","long","serialVersionUID",24,false,0);
    method = helper.createMethod(newType,"Locale(java.lang.String, java.lang.String, java.lang.String)","Locale",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Locale(java.lang.String, java.lang.String)","Locale",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Locale(java.lang.String)","Locale",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getDefault()","getDefault",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Locale",false,0);
    method = helper.createMethod(newType,"setDefault(java.util.Locale)","setDefault",false,41);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getAvailableLocales()","getAvailableLocales",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.util","Locale",true,1);
    method = helper.createMethod(newType,"getISOCountries()","getISOCountries",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","String",true,1);
    method = helper.createMethod(newType,"getISOLanguages()","getISOLanguages",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","String",true,1);
    method = helper.createMethod(newType,"getLanguage()","getLanguage",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getCountry()","getCountry",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getVariant()","getVariant",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,17);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getISO3Language()","getISO3Language",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
        helper.addThrowsOnMethod(method, "java.util","MissingResourceException");
    method = helper.createMethod(newType,"getISO3Country()","getISO3Country",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
        helper.addThrowsOnMethod(method, "java.util","MissingResourceException");
    method = helper.createMethod(newType,"getDisplayLanguage()","getDisplayLanguage",false,17);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getDisplayLanguage(java.util.Locale)","getDisplayLanguage",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getDisplayCountry()","getDisplayCountry",false,17);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getDisplayCountry(java.util.Locale)","getDisplayCountry",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getDisplayVariant()","getDisplayVariant",false,17);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getDisplayVariant(java.util.Locale)","getDisplayVariant",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getDisplayName()","getDisplayName",false,17);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getDisplayName(java.util.Locale)","getDisplayName",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "Map$Entry",1537);
    helper.addExtendsLinks("java.util", "Map$Entry","java.lang","Object");
    method = helper.createMethod(newType,"getKey()","getKey",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"getValue()","getValue",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"setValue(java.lang.Object)","setValue",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "Map",1537);
    helper.addExtendsLinks("java.util", "Map","java.lang","Object");
    method = helper.createMethod(newType,"size()","size",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsKey(java.lang.Object)","containsKey",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsValue(java.lang.Object)","containsValue",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"get(java.lang.Object)","get",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"put(java.lang.Object, java.lang.Object)","put",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"putAll(java.util.Map)","putAll",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"keySet()","keySet",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"values()","values",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Collection",false,0);
    method = helper.createMethod(newType,"entrySet()","entrySet",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "MissingFormatArgumentException",33);
    helper.addExtendsLinks("java.util", "MissingFormatArgumentException","java.util","IllegalFormatException");
    method = helper.createMethod(newType,"MissingFormatArgumentException(java.lang.String)","MissingFormatArgumentException",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getFormatSpecifier()","getFormatSpecifier",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getMessage()","getMessage",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "MissingFormatWidthException",33);
    helper.addExtendsLinks("java.util", "MissingFormatWidthException","java.util","IllegalFormatException");
    method = helper.createMethod(newType,"MissingFormatWidthException(java.lang.String)","MissingFormatWidthException",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getFormatSpecifier()","getFormatSpecifier",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getMessage()","getMessage",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "MissingResourceException",33);
    helper.addExtendsLinks("java.util", "MissingResourceException","java.lang","RuntimeException");
    method = helper.createMethod(newType,"MissingResourceException(java.lang.String, java.lang.String, java.lang.String)","MissingResourceException",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getClassName()","getClassName",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getKey()","getKey",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "NoSuchElementException",33);
    helper.addExtendsLinks("java.util", "NoSuchElementException","java.lang","RuntimeException");
    method = helper.createMethod(newType,"NoSuchElementException()","NoSuchElementException",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"NoSuchElementException(java.lang.String)","NoSuchElementException",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Observable",33);
    helper.addExtendsLinks("java.util", "Observable","java.lang","Object");
    method = helper.createMethod(newType,"Observable()","Observable",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"addObserver(java.util.Observer)","addObserver",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"deleteObserver(java.util.Observer)","deleteObserver",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"notifyObservers()","notifyObservers",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"notifyObservers(java.lang.Object)","notifyObservers",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"deleteObservers()","deleteObservers",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"setChanged()","setChanged",false,36);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"clearChanged()","clearChanged",false,36);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasChanged()","hasChanged",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"countObservers()","countObservers",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "Observer",1537);
    helper.addExtendsLinks("java.util", "Observer","java.lang","Object");
    method = helper.createMethod(newType,"update(java.util.Observable, java.lang.Object)","update",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "PriorityQueue$1",32);
    helper.addExtendsLinks("java.util", "PriorityQueue$1","java.lang","Object");
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "PriorityQueue$Itr",32);
    helper.addExtendsLinks("java.util", "PriorityQueue$Itr","java.lang","Object");
    helper.addImplementsLinks("java.util", "PriorityQueue$Itr","java.util","Iterator");
	helper.createField(newType,JavaType.class,"java.util","PriorityQueue","this$0",4112,false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"checkForComodification()","checkForComodification",false,16);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"PriorityQueue$Itr(java.util.PriorityQueue, java.util.PriorityQueue$1)","PriorityQueue$Itr",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "PriorityQueue",33);
    helper.addExtendsLinks("java.util", "PriorityQueue","java.util","AbstractQueue");
    helper.addImplementsLinks("java.util", "PriorityQueue","java.io","Serializable");
    helper.createField(newType,JavaTypePrimitive.class,"","boolean","$assertionsDisabled",4120,false,0);
    method = helper.createMethod(newType,"PriorityQueue()","PriorityQueue",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"PriorityQueue(int)","PriorityQueue",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"PriorityQueue(int, java.util.Comparator)","PriorityQueue",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"PriorityQueue(java.util.Collection)","PriorityQueue",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"PriorityQueue(java.util.PriorityQueue)","PriorityQueue",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"PriorityQueue(java.util.SortedSet)","PriorityQueue",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"offer(java.lang.Object)","offer",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"peek()","peek",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"poll()","poll",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"comparator()","comparator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Comparator",false,0);
    method = helper.createMethod(newType,"access$100(java.util.PriorityQueue)","access$100",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"access$200(java.util.PriorityQueue)","access$200",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"access$300(java.util.PriorityQueue)","access$300",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"access$400(java.util.PriorityQueue, int)","access$400",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Properties$LineReader",32);
    helper.addExtendsLinks("java.util", "Properties$LineReader","java.lang","Object");
    helper.createField(newType,JavaTypePrimitive.class,"","int","inLimit",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","inOff",0,false,0);
	helper.createField(newType,JavaType.class,"java.io","InputStream","inStream",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","Properties","this$0",4112,false,0);
    method = helper.createMethod(newType,"Properties$LineReader(java.util.Properties, java.io.InputStream)","Properties$LineReader",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"readLine()","readLine",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
        helper.addThrowsOnMethod(method, "java.io","IOException");
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Properties",33);
    helper.addExtendsLinks("java.util", "Properties","java.util","Hashtable");
	helper.createField(newType,JavaType.class,"java.util","Properties","defaults",4,false,0);
    method = helper.createMethod(newType,"Properties()","Properties",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Properties(java.util.Properties)","Properties",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"setProperty(java.lang.String, java.lang.String)","setProperty",false,33);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"load(java.io.InputStream)","load",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.io","IOException");
    method = helper.createMethod(newType,"save(java.io.OutputStream, java.lang.String)","save",false,131105);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"store(java.io.OutputStream, java.lang.String)","store",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.io","IOException");
    method = helper.createMethod(newType,"loadFromXML(java.io.InputStream)","loadFromXML",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.io","IOException");
        helper.addThrowsOnMethod(method, "java.util","InvalidPropertiesFormatException");
    method = helper.createMethod(newType,"storeToXML(java.io.OutputStream, java.lang.String)","storeToXML",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.io","IOException");
    method = helper.createMethod(newType,"storeToXML(java.io.OutputStream, java.lang.String, java.lang.String)","storeToXML",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.io","IOException");
    method = helper.createMethod(newType,"getProperty(java.lang.String)","getProperty",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getProperty(java.lang.String, java.lang.String)","getProperty",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"propertyNames()","propertyNames",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Enumeration",false,0);
    method = helper.createMethod(newType,"list(java.io.PrintStream)","list",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"list(java.io.PrintWriter)","list",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "PropertyPermission",49);
    helper.addExtendsLinks("java.util", "PropertyPermission","java.security","BasicPermission");
    method = helper.createMethod(newType,"PropertyPermission(java.lang.String, java.lang.String)","PropertyPermission",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"implies(java.security.Permission)","implies",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"getActions(int)","getActions",false,8);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getActions()","getActions",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getMask()","getMask",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"newPermissionCollection()","newPermissionCollection",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.security","PermissionCollection",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "PropertyPermissionCollection",48);
    helper.addExtendsLinks("java.util", "PropertyPermissionCollection","java.security","PermissionCollection");
    helper.addImplementsLinks("java.util", "PropertyPermissionCollection","java.io","Serializable");
    method = helper.createMethod(newType,"PropertyPermissionCollection()","PropertyPermissionCollection",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"add(java.security.Permission)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"implies(java.security.Permission)","implies",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"elements()","elements",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Enumeration",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "PropertyResourceBundle",33);
    helper.addExtendsLinks("java.util", "PropertyResourceBundle","java.util","ResourceBundle");
    method = helper.createMethod(newType,"PropertyResourceBundle(java.io.InputStream)","PropertyResourceBundle",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.io","IOException");
    method = helper.createMethod(newType,"handleGetObject(java.lang.String)","handleGetObject",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"getKeys()","getKeys",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Enumeration",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "Queue",1537);
    helper.addExtendsLinks("java.util", "Queue","java.lang","Object");
    helper.addImplementsLinks("java.util", "Queue","java.util","Collection");
    method = helper.createMethod(newType,"offer(java.lang.Object)","offer",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"poll()","poll",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"peek()","peek",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"element()","element",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Random",33);
    helper.addExtendsLinks("java.util", "Random","java.lang","Object");
    helper.addImplementsLinks("java.util", "Random","java.io","Serializable");
    helper.createField(newType,JavaTypePrimitive.class,"","long","serialVersionUID",24,false,0);
    method = helper.createMethod(newType,"Random()","Random",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Random(long)","Random",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"setSeed(long)","setSeed",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"next(int)","next",false,4);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"nextBytes(byte[])","nextBytes",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"nextInt()","nextInt",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"nextInt(int)","nextInt",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"nextLong()","nextLong",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "long",false,0);
    method = helper.createMethod(newType,"nextBoolean()","nextBoolean",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"nextFloat()","nextFloat",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "float",false,0);
    method = helper.createMethod(newType,"nextDouble()","nextDouble",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "double",false,0);
    method = helper.createMethod(newType,"nextGaussian()","nextGaussian",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "double",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "RandomAccess",1537);
    helper.addExtendsLinks("java.util", "RandomAccess","java.lang","Object");
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "RandomAccessSubList",32);
    helper.addExtendsLinks("java.util", "RandomAccessSubList","java.util","SubList");
    helper.addImplementsLinks("java.util", "RandomAccessSubList","java.util","RandomAccess");
    method = helper.createMethod(newType,"RandomAccessSubList(java.util.AbstractList, int, int)","RandomAccessSubList",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"subList(int, int)","subList",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","List",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "RegularEnumSet$EnumSetIterator",32);
    helper.addExtendsLinks("java.util", "RegularEnumSet$EnumSetIterator","java.lang","Object");
    helper.addImplementsLinks("java.util", "RegularEnumSet$EnumSetIterator","java.util","Iterator");
    helper.createField(newType,JavaTypePrimitive.class,"","long","unseen",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","long","lastReturned",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","RegularEnumSet","this$0",4112,false,0);
    method = helper.createMethod(newType,"RegularEnumSet$EnumSetIterator(java.util.RegularEnumSet)","RegularEnumSet$EnumSetIterator",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Enum",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"next()","next",false,4161);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "RegularEnumSet",32);
    helper.addExtendsLinks("java.util", "RegularEnumSet","java.util","EnumSet");
    method = helper.createMethod(newType,"RegularEnumSet(java.lang.Class, java.lang.Enum[])","RegularEnumSet",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"addRange(java.lang.Enum, java.lang.Enum)","addRange",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"addAll()","addAll",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"complement()","complement",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"add(java.lang.Enum)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsAll(java.util.Collection)","containsAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"addAll(java.util.Collection)","addAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"removeAll(java.util.Collection)","removeAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"retainAll(java.util.Collection)","retainAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,4161);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"access$000(java.util.RegularEnumSet)","access$000",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "long",false,0);
    method = helper.createMethod(newType,"access$022(java.util.RegularEnumSet, long)","access$022",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "long",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "ResourceBundle$1",32);
    helper.addExtendsLinks("java.util", "ResourceBundle$1","java.lang","Object");
    helper.addImplementsLinks("java.util", "ResourceBundle$1","java.security","PrivilegedAction");
	helper.createField(newType,JavaType.class,"java.lang","ClassLoader","val$loader",4112,false,0);
	helper.createField(newType,JavaType.class,"java.lang","String","val$resName",4112,false,0);
    method = helper.createMethod(newType,"ResourceBundle$1(java.lang.ClassLoader, java.lang.String)","ResourceBundle$1",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"run()","run",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "ResourceBundle$LoaderReference",48);
    helper.addExtendsLinks("java.util", "ResourceBundle$LoaderReference","java.lang.ref","WeakReference");
    method = helper.createMethod(newType,"ResourceBundle$LoaderReference(java.lang.Object, java.lang.ref.ReferenceQueue, java.util.ResourceBundle$ResourceCacheKey)","ResourceBundle$LoaderReference",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getCacheKey()","getCacheKey",false,0);
    helper.createMethodReturnType(method,JavaType.class,"java.util","ResourceBundle$ResourceCacheKey",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "ResourceBundle$ResourceCacheKey",48);
    helper.addExtendsLinks("java.util", "ResourceBundle$ResourceCacheKey","java.lang","Object");
    helper.addImplementsLinks("java.util", "ResourceBundle$ResourceCacheKey","java.lang","Cloneable");
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"setKeyValues(java.lang.ClassLoader, java.lang.String, java.util.Locale)","setKeyValues",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"ResourceBundle$ResourceCacheKey(java.util.ResourceBundle$1)","ResourceBundle$ResourceCacheKey",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "ResourceBundle",1057);
    helper.addExtendsLinks("java.util", "ResourceBundle","java.lang","Object");
	helper.createField(newType,JavaType.class,"java.util","ResourceBundle","parent",4,false,0);
    method = helper.createMethod(newType,"ResourceBundle()","ResourceBundle",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getString(java.lang.String)","getString",false,17);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getStringArray(java.lang.String)","getStringArray",false,17);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","String",true,1);
    method = helper.createMethod(newType,"getObject(java.lang.String)","getObject",false,17);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"getLocale()","getLocale",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Locale",false,0);
    method = helper.createMethod(newType,"setParent(java.util.ResourceBundle)","setParent",false,4);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getBundle(java.lang.String)","getBundle",false,25);
    helper.createMethodReturnType(method,JavaType.class,"java.util","ResourceBundle",false,0);
    method = helper.createMethod(newType,"getBundle(java.lang.String, java.util.Locale)","getBundle",false,25);
    helper.createMethodReturnType(method,JavaType.class,"java.util","ResourceBundle",false,0);
    method = helper.createMethod(newType,"getBundle(java.lang.String, java.util.Locale, java.lang.ClassLoader)","getBundle",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","ResourceBundle",false,0);
    method = helper.createMethod(newType,"handleGetObject(java.lang.String)","handleGetObject",false,1028);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"getKeys()","getKeys",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Enumeration",false,0);
    method = helper.createMethod(newType,"access$100()","access$100",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.lang.ref","ReferenceQueue",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "ResourceBundleEnumeration",32);
    helper.addExtendsLinks("java.util", "ResourceBundleEnumeration","java.lang","Object");
    helper.addImplementsLinks("java.util", "ResourceBundleEnumeration","java.util","Enumeration");
	helper.createField(newType,JavaType.class,"java.util","Set","set",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","Iterator","iterator",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","Enumeration","enumeration",0,false,0);
	helper.createField(newType,JavaType.class,"java.lang","String","next",0,false,0);
    method = helper.createMethod(newType,"ResourceBundleEnumeration(java.util.Set, java.util.Enumeration)","ResourceBundleEnumeration",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasMoreElements()","hasMoreElements",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"nextElement()","nextElement",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"nextElement()","nextElement",false,4161);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Scanner$1",32);
    helper.addExtendsLinks("java.util", "Scanner$1","sun.misc","LRUCache");
	helper.createField(newType,JavaType.class,"java.util","Scanner","this$0",4112,false,0);
    method = helper.createMethod(newType,"Scanner$1(java.util.Scanner, int)","Scanner$1",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"create(java.lang.String)","create",false,4);
    helper.createMethodReturnType(method,JavaType.class,"java.util.regex","Pattern",false,0);
    method = helper.createMethod(newType,"hasName(java.util.regex.Pattern, java.lang.String)","hasName",false,4);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hasName(java.lang.Object, java.lang.Object)","hasName",false,4164);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"create(java.lang.Object)","create",false,4164);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Scanner",49);
    helper.addExtendsLinks("java.util", "Scanner","java.lang","Object");
    helper.addImplementsLinks("java.util", "Scanner","java.util","Iterator");
    method = helper.createMethod(newType,"Scanner(java.lang.Readable)","Scanner",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Scanner(java.io.InputStream)","Scanner",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Scanner(java.io.InputStream, java.lang.String)","Scanner",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Scanner(java.io.File)","Scanner",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.io","FileNotFoundException");
    method = helper.createMethod(newType,"Scanner(java.io.File, java.lang.String)","Scanner",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.io","FileNotFoundException");
    method = helper.createMethod(newType,"Scanner(java.lang.String)","Scanner",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Scanner(java.nio.channels.ReadableByteChannel)","Scanner",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Scanner(java.nio.channels.ReadableByteChannel, java.lang.String)","Scanner",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"close()","close",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"ioException()","ioException",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.io","IOException",false,0);
    method = helper.createMethod(newType,"delimiter()","delimiter",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util.regex","Pattern",false,0);
    method = helper.createMethod(newType,"useDelimiter(java.util.regex.Pattern)","useDelimiter",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Scanner",false,0);
    method = helper.createMethod(newType,"useDelimiter(java.lang.String)","useDelimiter",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Scanner",false,0);
    method = helper.createMethod(newType,"locale()","locale",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Locale",false,0);
    method = helper.createMethod(newType,"useLocale(java.util.Locale)","useLocale",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Scanner",false,0);
    method = helper.createMethod(newType,"radix()","radix",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"useRadix(int)","useRadix",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Scanner",false,0);
    method = helper.createMethod(newType,"match()","match",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util.regex","MatchResult",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasNext(java.lang.String)","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"next(java.lang.String)","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"hasNext(java.util.regex.Pattern)","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"next(java.util.regex.Pattern)","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"hasNextLine()","hasNextLine",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"nextLine()","nextLine",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"findInLine(java.lang.String)","findInLine",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"findInLine(java.util.regex.Pattern)","findInLine",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"findWithinHorizon(java.lang.String, int)","findWithinHorizon",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"findWithinHorizon(java.util.regex.Pattern, int)","findWithinHorizon",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"skip(java.util.regex.Pattern)","skip",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Scanner",false,0);
    method = helper.createMethod(newType,"skip(java.lang.String)","skip",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Scanner",false,0);
    method = helper.createMethod(newType,"hasNextBoolean()","hasNextBoolean",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"nextBoolean()","nextBoolean",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hasNextByte()","hasNextByte",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hasNextByte(int)","hasNextByte",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"nextByte()","nextByte",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "byte",false,0);
    method = helper.createMethod(newType,"nextByte(int)","nextByte",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "byte",false,0);
    method = helper.createMethod(newType,"hasNextShort()","hasNextShort",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hasNextShort(int)","hasNextShort",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"nextShort()","nextShort",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "short",false,0);
    method = helper.createMethod(newType,"nextShort(int)","nextShort",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "short",false,0);
    method = helper.createMethod(newType,"hasNextInt()","hasNextInt",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hasNextInt(int)","hasNextInt",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"nextInt()","nextInt",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"nextInt(int)","nextInt",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"hasNextLong()","hasNextLong",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hasNextLong(int)","hasNextLong",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"nextLong()","nextLong",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "long",false,0);
    method = helper.createMethod(newType,"nextLong(int)","nextLong",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "long",false,0);
    method = helper.createMethod(newType,"hasNextFloat()","hasNextFloat",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"nextFloat()","nextFloat",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "float",false,0);
    method = helper.createMethod(newType,"hasNextDouble()","hasNextDouble",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"nextDouble()","nextDouble",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "double",false,0);
    method = helper.createMethod(newType,"hasNextBigInteger()","hasNextBigInteger",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hasNextBigInteger(int)","hasNextBigInteger",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"nextBigInteger()","nextBigInteger",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.math","BigInteger",false,0);
    method = helper.createMethod(newType,"nextBigInteger(int)","nextBigInteger",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.math","BigInteger",false,0);
    method = helper.createMethod(newType,"hasNextBigDecimal()","hasNextBigDecimal",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"nextBigDecimal()","nextBigDecimal",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.math","BigDecimal",false,0);
    method = helper.createMethod(newType,"next()","next",false,4161);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "Set",1537);
    helper.addExtendsLinks("java.util", "Set","java.lang","Object");
    helper.addImplementsLinks("java.util", "Set","java.util","Collection");
    method = helper.createMethod(newType,"size()","size",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"toArray()","toArray",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"toArray(java.lang.Object[])","toArray",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsAll(java.util.Collection)","containsAll",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"addAll(java.util.Collection)","addAll",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"retainAll(java.util.Collection)","retainAll",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"removeAll(java.util.Collection)","removeAll",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "SimpleTimeZone",33);
    helper.addExtendsLinks("java.util", "SimpleTimeZone","java.util","TimeZone");
    helper.createField(newType,JavaTypePrimitive.class,"","int","WALL_TIME",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","STANDARD_TIME",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","UTC_TIME",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","long","serialVersionUID",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","currentSerialVersion",24,false,0);
    method = helper.createMethod(newType,"SimpleTimeZone(int, java.lang.String)","SimpleTimeZone",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"SimpleTimeZone(int, java.lang.String, int, int, int, int, int, int, int, int)","SimpleTimeZone",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"SimpleTimeZone(int, java.lang.String, int, int, int, int, int, int, int, int, int)","SimpleTimeZone",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"SimpleTimeZone(int, java.lang.String, int, int, int, int, int, int, int, int, int, int, int)","SimpleTimeZone",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"setStartYear(int)","setStartYear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"setStartRule(int, int, int, int)","setStartRule",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"setStartRule(int, int, int)","setStartRule",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"setStartRule(int, int, int, int, boolean)","setStartRule",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"setEndRule(int, int, int, int)","setEndRule",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"setEndRule(int, int, int)","setEndRule",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"setEndRule(int, int, int, int, boolean)","setEndRule",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getOffset(long)","getOffset",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"getOffsets(long, int[])","getOffsets",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"getOffset(int, int, int, int, int, int)","getOffset",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"getRawOffset()","getRawOffset",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"setRawOffset(int)","setRawOffset",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"setDSTSavings(int)","setDSTSavings",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getDSTSavings()","getDSTSavings",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"useDaylightTime()","useDaylightTime",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"inDaylightTime(java.util.Date)","inDaylightTime",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hasSameRules(java.util.TimeZone)","hasSameRules",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "SortedMap",1537);
    helper.addExtendsLinks("java.util", "SortedMap","java.lang","Object");
    helper.addImplementsLinks("java.util", "SortedMap","java.util","Map");
    method = helper.createMethod(newType,"comparator()","comparator",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Comparator",false,0);
    method = helper.createMethod(newType,"subMap(java.lang.Object, java.lang.Object)","subMap",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedMap",false,0);
    method = helper.createMethod(newType,"headMap(java.lang.Object)","headMap",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedMap",false,0);
    method = helper.createMethod(newType,"tailMap(java.lang.Object)","tailMap",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedMap",false,0);
    method = helper.createMethod(newType,"firstKey()","firstKey",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"lastKey()","lastKey",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeInterface.class,"java.util", "SortedSet",1537);
    helper.addExtendsLinks("java.util", "SortedSet","java.lang","Object");
    helper.addImplementsLinks("java.util", "SortedSet","java.util","Set");
    method = helper.createMethod(newType,"comparator()","comparator",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Comparator",false,0);
    method = helper.createMethod(newType,"subSet(java.lang.Object, java.lang.Object)","subSet",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedSet",false,0);
    method = helper.createMethod(newType,"headSet(java.lang.Object)","headSet",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedSet",false,0);
    method = helper.createMethod(newType,"tailSet(java.lang.Object)","tailSet",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedSet",false,0);
    method = helper.createMethod(newType,"first()","first",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"last()","last",false,1025);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Stack",33);
    helper.addExtendsLinks("java.util", "Stack","java.util","Vector");
    method = helper.createMethod(newType,"Stack()","Stack",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"push(java.lang.Object)","push",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"pop()","pop",false,33);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"peek()","peek",false,33);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"empty()","empty",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"search(java.lang.Object)","search",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "StringTokenizer",33);
    helper.addExtendsLinks("java.util", "StringTokenizer","java.lang","Object");
    helper.addImplementsLinks("java.util", "StringTokenizer","java.util","Enumeration");
    method = helper.createMethod(newType,"StringTokenizer(java.lang.String, java.lang.String, boolean)","StringTokenizer",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"StringTokenizer(java.lang.String, java.lang.String)","StringTokenizer",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"StringTokenizer(java.lang.String)","StringTokenizer",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasMoreTokens()","hasMoreTokens",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"nextToken()","nextToken",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"nextToken(java.lang.String)","nextToken",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"hasMoreElements()","hasMoreElements",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"nextElement()","nextElement",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"countTokens()","countTokens",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "SubList$1",32);
    helper.addExtendsLinks("java.util", "SubList$1","java.lang","Object");
    helper.addImplementsLinks("java.util", "SubList$1","java.util","ListIterator");
    helper.createField(newType,JavaTypePrimitive.class,"","int","val$index",4112,false,0);
	helper.createField(newType,JavaType.class,"java.util","SubList","this$0",4112,false,0);
    method = helper.createMethod(newType,"SubList$1(java.util.SubList, int)","SubList$1",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"hasPrevious()","hasPrevious",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"previous()","previous",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"nextIndex()","nextIndex",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"previousIndex()","previousIndex",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"set(java.lang.Object)","set",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "SubList",32);
    helper.addExtendsLinks("java.util", "SubList","java.util","AbstractList");
    method = helper.createMethod(newType,"SubList(java.util.AbstractList, int, int)","SubList",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"set(int, java.lang.Object)","set",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"get(int)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"add(int, java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"remove(int)","remove",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"removeRange(int, int)","removeRange",false,4);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"addAll(java.util.Collection)","addAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"addAll(int, java.util.Collection)","addAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"listIterator(int)","listIterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","ListIterator",false,0);
    method = helper.createMethod(newType,"subList(int, int)","subList",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","List",false,0);
    method = helper.createMethod(newType,"access$000(java.util.SubList)","access$000",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"access$100(java.util.SubList)","access$100",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.util","AbstractList",false,0);
    method = helper.createMethod(newType,"access$200(java.util.SubList)","access$200",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"access$302(java.util.SubList, int)","access$302",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"access$210(java.util.SubList)","access$210",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"access$208(java.util.SubList)","access$208",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TaskQueue",32);
    helper.addExtendsLinks("java.util", "TaskQueue","java.lang","Object");
    helper.createField(newType,JavaTypePrimitive.class,"","boolean","$assertionsDisabled",4120,false,0);
    method = helper.createMethod(newType,"TaskQueue()","TaskQueue",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"size()","size",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"add(java.util.TimerTask)","add",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getMin()","getMin",false,0);
    helper.createMethodReturnType(method,JavaType.class,"java.util","TimerTask",false,0);
    method = helper.createMethod(newType,"get(int)","get",false,0);
    helper.createMethodReturnType(method,JavaType.class,"java.util","TimerTask",false,0);
    method = helper.createMethod(newType,"removeMin()","removeMin",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"quickRemove(int)","quickRemove",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"rescheduleMin(long)","rescheduleMin",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"heapify()","heapify",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Timer$1",32);
    helper.addExtendsLinks("java.util", "Timer$1","java.lang","Object");
	helper.createField(newType,JavaType.class,"java.util","Timer","this$0",4112,false,0);
    method = helper.createMethod(newType,"Timer$1(java.util.Timer)","Timer$1",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"finalize()","finalize",false,4);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.lang","Throwable");
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Timer",33);
    helper.addExtendsLinks("java.util", "Timer","java.lang","Object");
    method = helper.createMethod(newType,"Timer()","Timer",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Timer(boolean)","Timer",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Timer(java.lang.String)","Timer",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Timer(java.lang.String, boolean)","Timer",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"schedule(java.util.TimerTask, long)","schedule",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"schedule(java.util.TimerTask, java.util.Date)","schedule",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"schedule(java.util.TimerTask, long, long)","schedule",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"schedule(java.util.TimerTask, java.util.Date, long)","schedule",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"scheduleAtFixedRate(java.util.TimerTask, long, long)","scheduleAtFixedRate",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"scheduleAtFixedRate(java.util.TimerTask, java.util.Date, long)","scheduleAtFixedRate",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"cancel()","cancel",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"purge()","purge",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"access$000(java.util.Timer)","access$000",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.util","TaskQueue",false,0);
    method = helper.createMethod(newType,"access$100(java.util.Timer)","access$100",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.util","TimerThread",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TimerTask",1057);
    helper.addExtendsLinks("java.util", "TimerTask","java.lang","Object");
    helper.addImplementsLinks("java.util", "TimerTask","java.lang","Runnable");
	helper.createField(newType,JavaType.class,"java.lang","Object","lock",16,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","state",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","VIRGIN",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","SCHEDULED",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","EXECUTED",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","CANCELLED",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","long","nextExecutionTime",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","long","period",0,false,0);
    method = helper.createMethod(newType,"TimerTask()","TimerTask",true,4);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"run()","run",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"cancel()","cancel",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"scheduledExecutionTime()","scheduledExecutionTime",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "long",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TimerThread",32);
    helper.addExtendsLinks("java.util", "TimerThread","java.lang","Thread");
    helper.createField(newType,JavaTypePrimitive.class,"","boolean","newTasksMayBeScheduled",0,false,0);
    method = helper.createMethod(newType,"TimerThread(java.util.TaskQueue)","TimerThread",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"run()","run",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TimeZone$1",32);
    helper.addExtendsLinks("java.util", "TimeZone$1","java.lang","Object");
    helper.addImplementsLinks("java.util", "TimeZone$1","java.security","PrivilegedAction");
	helper.createField(newType,JavaType.class,"java.lang","String","val$id",4112,false,0);
    method = helper.createMethod(newType,"TimeZone$1(java.lang.String)","TimeZone$1",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"run()","run",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TimeZone$DisplayNames",32);
    helper.addExtendsLinks("java.util", "TimeZone$DisplayNames","java.lang","Object");
    method = helper.createMethod(newType,"access$000()","access$000",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Map",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TimeZone",1057);
    helper.addExtendsLinks("java.util", "TimeZone","java.lang","Object");
    helper.addImplementsLinks("java.util", "TimeZone","java.io","Serializable");
    helper.addImplementsLinks("java.util", "TimeZone","java.lang","Cloneable");
    helper.createField(newType,JavaTypePrimitive.class,"","int","SHORT",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","LONG",25,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","long","serialVersionUID",24,false,0);
	helper.createField(newType,JavaType.class,"java.util","TimeZone","NO_TIMEZONE",24,false,0);
	helper.createField(newType,JavaType.class,"java.lang","String","GMT_ID",24,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","boolean","$assertionsDisabled",4120,false,0);
    method = helper.createMethod(newType,"TimeZone()","TimeZone",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getOffset(int, int, int, int, int, int)","getOffset",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"getOffset(long)","getOffset",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"getOffsets(long, int[])","getOffsets",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"setRawOffset(int)","setRawOffset",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getRawOffset()","getRawOffset",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"getID()","getID",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"setID(java.lang.String)","setID",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getDisplayName()","getDisplayName",false,17);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getDisplayName(java.util.Locale)","getDisplayName",false,17);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getDisplayName(boolean, int)","getDisplayName",false,17);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getDisplayName(boolean, int, java.util.Locale)","getDisplayName",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getDSTSavings()","getDSTSavings",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"useDaylightTime()","useDaylightTime",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"inDaylightTime(java.util.Date)","inDaylightTime",false,1025);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"getTimeZone(java.lang.String)","getTimeZone",false,41);
    helper.createMethodReturnType(method,JavaType.class,"java.util","TimeZone",false,0);
    method = helper.createMethod(newType,"getAvailableIDs(int)","getAvailableIDs",false,41);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","String",true,1);
    method = helper.createMethod(newType,"getAvailableIDs()","getAvailableIDs",false,41);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","String",true,1);
    method = helper.createMethod(newType,"getDefault()","getDefault",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","TimeZone",false,0);
    method = helper.createMethod(newType,"getDefaultRef()","getDefaultRef",false,8);
    helper.createMethodReturnType(method,JavaType.class,"java.util","TimeZone",false,0);
    method = helper.createMethod(newType,"setDefault(java.util.TimeZone)","setDefault",false,9);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasSameRules(java.util.TimeZone)","hasSameRules",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TooManyListenersException",33);
    helper.addExtendsLinks("java.util", "TooManyListenersException","java.lang","Exception");
    method = helper.createMethod(newType,"TooManyListenersException()","TooManyListenersException",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"TooManyListenersException(java.lang.String)","TooManyListenersException",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeMap$1",32);
    helper.addExtendsLinks("java.util", "TreeMap$1","java.util","AbstractSet");
	helper.createField(newType,JavaType.class,"java.util","TreeMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"TreeMap$1(java.util.TreeMap)","TreeMap$1",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeMap$2",32);
    helper.addExtendsLinks("java.util", "TreeMap$2","java.util","AbstractCollection");
	helper.createField(newType,JavaType.class,"java.util","TreeMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"TreeMap$2(java.util.TreeMap)","TreeMap$2",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeMap$3",32);
    helper.addExtendsLinks("java.util", "TreeMap$3","java.util","AbstractSet");
	helper.createField(newType,JavaType.class,"java.util","TreeMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"TreeMap$3(java.util.TreeMap)","TreeMap$3",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeMap$Entry",32);
    helper.addExtendsLinks("java.util", "TreeMap$Entry","java.lang","Object");
    helper.addImplementsLinks("java.util", "TreeMap$Entry","java.util","Map$Entry");
	helper.createField(newType,JavaType.class,"java.lang","Object","key",0,false,0);
	helper.createField(newType,JavaType.class,"java.lang","Object","value",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","TreeMap$Entry","left",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","TreeMap$Entry","right",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","TreeMap$Entry","parent",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","boolean","color",0,false,0);
    method = helper.createMethod(newType,"TreeMap$Entry(java.lang.Object, java.lang.Object, java.util.TreeMap$Entry)","TreeMap$Entry",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getKey()","getKey",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"getValue()","getValue",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"setValue(java.lang.Object)","setValue",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeMap$EntryIterator",32);
    helper.addExtendsLinks("java.util", "TreeMap$EntryIterator","java.util","TreeMap$PrivateEntryIterator");
	helper.createField(newType,JavaType.class,"java.util","TreeMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Map$Entry",false,0);
    method = helper.createMethod(newType,"next()","next",false,4161);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"TreeMap$EntryIterator(java.util.TreeMap, java.util.TreeMap$1)","TreeMap$EntryIterator",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeMap$KeyIterator",32);
    helper.addExtendsLinks("java.util", "TreeMap$KeyIterator","java.util","TreeMap$PrivateEntryIterator");
	helper.createField(newType,JavaType.class,"java.util","TreeMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"TreeMap$KeyIterator(java.util.TreeMap, java.util.TreeMap$1)","TreeMap$KeyIterator",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeMap$PrivateEntryIterator",1056);
    helper.addExtendsLinks("java.util", "TreeMap$PrivateEntryIterator","java.lang","Object");
    helper.addImplementsLinks("java.util", "TreeMap$PrivateEntryIterator","java.util","Iterator");
	helper.createField(newType,JavaType.class,"java.util","TreeMap$Entry","next",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","TreeMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"TreeMap$PrivateEntryIterator(java.util.TreeMap)","TreeMap$PrivateEntryIterator",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"TreeMap$PrivateEntryIterator(java.util.TreeMap, java.util.TreeMap$Entry)","TreeMap$PrivateEntryIterator",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"nextEntry()","nextEntry",false,16);
    helper.createMethodReturnType(method,JavaType.class,"java.util","TreeMap$Entry",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeMap$SubMap$EntrySetView",32);
    helper.addExtendsLinks("java.util", "TreeMap$SubMap$EntrySetView","java.util","AbstractSet");
	helper.createField(newType,JavaType.class,"java.util","TreeMap$SubMap","this$1",4112,false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"TreeMap$SubMap$EntrySetView(java.util.TreeMap$SubMap, java.util.TreeMap$1)","TreeMap$SubMap$EntrySetView",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeMap$SubMap",32);
    helper.addExtendsLinks("java.util", "TreeMap$SubMap","java.util","AbstractMap");
    helper.addImplementsLinks("java.util", "TreeMap$SubMap","java.util","SortedMap");
    helper.addImplementsLinks("java.util", "TreeMap$SubMap","java.io","Serializable");
	helper.createField(newType,JavaType.class,"java.util","TreeMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"TreeMap$SubMap(java.util.TreeMap, java.lang.Object, java.lang.Object)","TreeMap$SubMap",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"TreeMap$SubMap(java.util.TreeMap, java.lang.Object, boolean)","TreeMap$SubMap",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"TreeMap$SubMap(java.util.TreeMap, boolean, java.lang.Object, boolean, java.lang.Object)","TreeMap$SubMap",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsKey(java.lang.Object)","containsKey",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"get(java.lang.Object)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"put(java.lang.Object, java.lang.Object)","put",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"comparator()","comparator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Comparator",false,0);
    method = helper.createMethod(newType,"firstKey()","firstKey",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"lastKey()","lastKey",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"entrySet()","entrySet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"subMap(java.lang.Object, java.lang.Object)","subMap",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedMap",false,0);
    method = helper.createMethod(newType,"headMap(java.lang.Object)","headMap",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedMap",false,0);
    method = helper.createMethod(newType,"tailMap(java.lang.Object)","tailMap",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedMap",false,0);
    method = helper.createMethod(newType,"access$1700(java.util.TreeMap$SubMap, java.lang.Object)","access$1700",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"access$1800(java.util.TreeMap$SubMap)","access$1800",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"access$1900(java.util.TreeMap$SubMap)","access$1900",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"access$2000(java.util.TreeMap$SubMap)","access$2000",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"access$2100(java.util.TreeMap$SubMap)","access$2100",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeMap$SubMapEntryIterator",32);
    helper.addExtendsLinks("java.util", "TreeMap$SubMapEntryIterator","java.util","TreeMap$PrivateEntryIterator");
	helper.createField(newType,JavaType.class,"java.util","TreeMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"TreeMap$SubMapEntryIterator(java.util.TreeMap, java.util.TreeMap$Entry, java.util.TreeMap$Entry)","TreeMap$SubMapEntryIterator",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Map$Entry",false,0);
    method = helper.createMethod(newType,"next()","next",false,4161);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeMap$ValueIterator",32);
    helper.addExtendsLinks("java.util", "TreeMap$ValueIterator","java.util","TreeMap$PrivateEntryIterator");
	helper.createField(newType,JavaType.class,"java.util","TreeMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"TreeMap$ValueIterator(java.util.TreeMap, java.util.TreeMap$1)","TreeMap$ValueIterator",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeMap",33);
    helper.addExtendsLinks("java.util", "TreeMap","java.util","AbstractMap");
    helper.addImplementsLinks("java.util", "TreeMap","java.util","SortedMap");
    helper.addImplementsLinks("java.util", "TreeMap","java.lang","Cloneable");
    helper.addImplementsLinks("java.util", "TreeMap","java.io","Serializable");
    method = helper.createMethod(newType,"TreeMap()","TreeMap",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"TreeMap(java.util.Comparator)","TreeMap",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"TreeMap(java.util.Map)","TreeMap",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"TreeMap(java.util.SortedMap)","TreeMap",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"containsKey(java.lang.Object)","containsKey",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"containsValue(java.lang.Object)","containsValue",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"get(java.lang.Object)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"comparator()","comparator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Comparator",false,0);
    method = helper.createMethod(newType,"firstKey()","firstKey",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"lastKey()","lastKey",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"putAll(java.util.Map)","putAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"put(java.lang.Object, java.lang.Object)","put",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"keySet()","keySet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"values()","values",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Collection",false,0);
    method = helper.createMethod(newType,"entrySet()","entrySet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"subMap(java.lang.Object, java.lang.Object)","subMap",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedMap",false,0);
    method = helper.createMethod(newType,"headMap(java.lang.Object)","headMap",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedMap",false,0);
    method = helper.createMethod(newType,"tailMap(java.lang.Object)","tailMap",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedMap",false,0);
    method = helper.createMethod(newType,"readTreeSet(int, java.io.ObjectInputStream, java.lang.Object)","readTreeSet",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.io","IOException");
        helper.addThrowsOnMethod(method, "java.lang","ClassNotFoundException");
    method = helper.createMethod(newType,"addAllForTreeSet(java.util.SortedSet, java.lang.Object)","addAllForTreeSet",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"access$100(java.util.TreeMap)","access$100",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"access$300(java.util.TreeMap)","access$300",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.util","TreeMap$Entry",false,0);
    method = helper.createMethod(newType,"access$400(java.util.TreeMap, java.util.TreeMap$Entry)","access$400",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.util","TreeMap$Entry",false,0);
    method = helper.createMethod(newType,"access$500(java.lang.Object, java.lang.Object)","access$500",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"access$600(java.util.TreeMap, java.util.TreeMap$Entry)","access$600",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"access$800(java.util.TreeMap, java.lang.Object)","access$800",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.util","TreeMap$Entry",false,0);
    method = helper.createMethod(newType,"access$900(java.util.TreeMap, java.lang.Object, java.lang.Object)","access$900",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"access$1000(java.util.TreeMap)","access$1000",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Comparator",false,0);
    method = helper.createMethod(newType,"access$1100(java.util.TreeMap, java.lang.Object)","access$1100",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.util","TreeMap$Entry",false,0);
    method = helper.createMethod(newType,"access$1200(java.util.TreeMap$Entry)","access$1200",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"access$1300(java.util.TreeMap)","access$1300",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.util","TreeMap$Entry",false,0);
    method = helper.createMethod(newType,"access$1400(java.util.TreeMap, java.lang.Object)","access$1400",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.util","TreeMap$Entry",false,0);
    method = helper.createMethod(newType,"access$1600(java.util.TreeMap)","access$1600",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "TreeSet",33);
    helper.addExtendsLinks("java.util", "TreeSet","java.util","AbstractSet");
    helper.addImplementsLinks("java.util", "TreeSet","java.util","SortedSet");
    helper.addImplementsLinks("java.util", "TreeSet","java.lang","Cloneable");
    helper.addImplementsLinks("java.util", "TreeSet","java.io","Serializable");
    method = helper.createMethod(newType,"TreeSet()","TreeSet",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"TreeSet(java.util.Comparator)","TreeSet",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"TreeSet(java.util.Collection)","TreeSet",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"TreeSet(java.util.SortedSet)","TreeSet",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"addAll(java.util.Collection)","addAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"subSet(java.lang.Object, java.lang.Object)","subSet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedSet",false,0);
    method = helper.createMethod(newType,"headSet(java.lang.Object)","headSet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedSet",false,0);
    method = helper.createMethod(newType,"tailSet(java.lang.Object)","tailSet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","SortedSet",false,0);
    method = helper.createMethod(newType,"comparator()","comparator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Comparator",false,0);
    method = helper.createMethod(newType,"first()","first",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"last()","last",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "UnknownFormatConversionException",33);
    helper.addExtendsLinks("java.util", "UnknownFormatConversionException","java.util","IllegalFormatException");
    method = helper.createMethod(newType,"UnknownFormatConversionException(java.lang.String)","UnknownFormatConversionException",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getConversion()","getConversion",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getMessage()","getMessage",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "UnknownFormatFlagsException",33);
    helper.addExtendsLinks("java.util", "UnknownFormatFlagsException","java.util","IllegalFormatException");
    method = helper.createMethod(newType,"UnknownFormatFlagsException(java.lang.String)","UnknownFormatFlagsException",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getFlags()","getFlags",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"getMessage()","getMessage",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "UUID",49);
    helper.addExtendsLinks("java.util", "UUID","java.lang","Object");
    helper.addImplementsLinks("java.util", "UUID","java.io","Serializable");
    helper.addImplementsLinks("java.util", "UUID","java.lang","Comparable");
    helper.createField(newType,JavaTypePrimitive.class,"","boolean","$assertionsDisabled",4120,false,0);
    method = helper.createMethod(newType,"UUID(long, long)","UUID",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"randomUUID()","randomUUID",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","UUID",false,0);
    method = helper.createMethod(newType,"nameUUIDFromBytes(byte[])","nameUUIDFromBytes",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","UUID",false,0);
    method = helper.createMethod(newType,"fromString(java.lang.String)","fromString",false,9);
    helper.createMethodReturnType(method,JavaType.class,"java.util","UUID",false,0);
    method = helper.createMethod(newType,"getLeastSignificantBits()","getLeastSignificantBits",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "long",false,0);
    method = helper.createMethod(newType,"getMostSignificantBits()","getMostSignificantBits",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "long",false,0);
    method = helper.createMethod(newType,"version()","version",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"variant()","variant",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"timestamp()","timestamp",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "long",false,0);
    method = helper.createMethod(newType,"clockSequence()","clockSequence",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"node()","node",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "long",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"compareTo(java.util.UUID)","compareTo",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"compareTo(java.lang.Object)","compareTo",false,4161);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Vector$1",32);
    helper.addExtendsLinks("java.util", "Vector$1","java.lang","Object");
    helper.addImplementsLinks("java.util", "Vector$1","java.util","Enumeration");
    helper.createField(newType,JavaTypePrimitive.class,"","int","count",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","Vector","this$0",4112,false,0);
    method = helper.createMethod(newType,"Vector$1(java.util.Vector)","Vector$1",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasMoreElements()","hasMoreElements",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"nextElement()","nextElement",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "Vector",33);
    helper.addExtendsLinks("java.util", "Vector","java.util","AbstractList");
    helper.addImplementsLinks("java.util", "Vector","java.util","List");
    helper.addImplementsLinks("java.util", "Vector","java.util","RandomAccess");
    helper.addImplementsLinks("java.util", "Vector","java.lang","Cloneable");
    helper.addImplementsLinks("java.util", "Vector","java.io","Serializable");
    helper.createField(newType,JavaTypePrimitive.class,"","int","elementCount",4,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","capacityIncrement",4,false,0);
    method = helper.createMethod(newType,"Vector(int, int)","Vector",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Vector(int)","Vector",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Vector()","Vector",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"Vector(java.util.Collection)","Vector",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"copyInto(java.lang.Object[])","copyInto",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"trimToSize()","trimToSize",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"ensureCapacity(int)","ensureCapacity",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"setSize(int)","setSize",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"capacity()","capacity",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"size()","size",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"elements()","elements",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Enumeration",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"indexOf(java.lang.Object)","indexOf",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"indexOf(java.lang.Object, int)","indexOf",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"lastIndexOf(java.lang.Object)","lastIndexOf",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"lastIndexOf(java.lang.Object, int)","lastIndexOf",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"elementAt(int)","elementAt",false,33);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"firstElement()","firstElement",false,33);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"lastElement()","lastElement",false,33);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"setElementAt(java.lang.Object, int)","setElementAt",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"removeElementAt(int)","removeElementAt",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"insertElementAt(java.lang.Object, int)","insertElementAt",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"addElement(java.lang.Object)","addElement",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"removeElement(java.lang.Object)","removeElement",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"removeAllElements()","removeAllElements",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"clone()","clone",false,33);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"toArray()","toArray",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"toArray(java.lang.Object[])","toArray",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"get(int)","get",false,33);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"set(int, java.lang.Object)","set",false,33);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"add(java.lang.Object)","add",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"add(int, java.lang.Object)","add",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"remove(int)","remove",false,33);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"containsAll(java.util.Collection)","containsAll",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"addAll(java.util.Collection)","addAll",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"removeAll(java.util.Collection)","removeAll",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"retainAll(java.util.Collection)","retainAll",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"addAll(int, java.util.Collection)","addAll",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,33);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,33);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"subList(int, int)","subList",false,33);
    helper.createMethodReturnType(method,JavaType.class,"java.util","List",false,0);
    method = helper.createMethod(newType,"removeRange(int, int)","removeRange",false,36);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "WeakHashMap$1",32);
    helper.addExtendsLinks("java.util", "WeakHashMap$1","java.lang","Object");
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "WeakHashMap$Entry",32);
    helper.addExtendsLinks("java.util", "WeakHashMap$Entry","java.lang.ref","WeakReference");
    helper.addImplementsLinks("java.util", "WeakHashMap$Entry","java.util","Map$Entry");
    method = helper.createMethod(newType,"WeakHashMap$Entry(java.lang.Object, java.lang.Object, java.lang.ref.ReferenceQueue, int, java.util.WeakHashMap$Entry)","WeakHashMap$Entry",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"getKey()","getKey",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"getValue()","getValue",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"setValue(java.lang.Object)","setValue",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"equals(java.lang.Object)","equals",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"hashCode()","hashCode",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"toString()","toString",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","String",false,0);
    method = helper.createMethod(newType,"access$000(java.util.WeakHashMap$Entry)","access$000",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"access$100(java.util.WeakHashMap$Entry)","access$100",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.util","WeakHashMap$Entry",false,0);
    method = helper.createMethod(newType,"access$102(java.util.WeakHashMap$Entry, java.util.WeakHashMap$Entry)","access$102",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.util","WeakHashMap$Entry",false,0);
    method = helper.createMethod(newType,"access$202(java.util.WeakHashMap$Entry, java.lang.Object)","access$202",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"access$200(java.util.WeakHashMap$Entry)","access$200",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "WeakHashMap$EntryIterator",32);
    helper.addExtendsLinks("java.util", "WeakHashMap$EntryIterator","java.util","WeakHashMap$HashIterator");
	helper.createField(newType,JavaType.class,"java.util","WeakHashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Map$Entry",false,0);
    method = helper.createMethod(newType,"next()","next",false,4161);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"WeakHashMap$EntryIterator(java.util.WeakHashMap, java.util.WeakHashMap$1)","WeakHashMap$EntryIterator",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "WeakHashMap$EntrySet",32);
    helper.addExtendsLinks("java.util", "WeakHashMap$EntrySet","java.util","AbstractSet");
	helper.createField(newType,JavaType.class,"java.util","WeakHashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"toArray()","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"toArray(java.lang.Object[])","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"WeakHashMap$EntrySet(java.util.WeakHashMap, java.util.WeakHashMap$1)","WeakHashMap$EntrySet",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "WeakHashMap$HashIterator",1056);
    helper.addExtendsLinks("java.util", "WeakHashMap$HashIterator","java.lang","Object");
    helper.addImplementsLinks("java.util", "WeakHashMap$HashIterator","java.util","Iterator");
    helper.createField(newType,JavaTypePrimitive.class,"","int","index",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","WeakHashMap$Entry","entry",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","WeakHashMap$Entry","lastReturned",0,false,0);
    helper.createField(newType,JavaTypePrimitive.class,"","int","expectedModCount",0,false,0);
	helper.createField(newType,JavaType.class,"java.lang","Object","nextKey",0,false,0);
	helper.createField(newType,JavaType.class,"java.lang","Object","currentKey",0,false,0);
	helper.createField(newType,JavaType.class,"java.util","WeakHashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"WeakHashMap$HashIterator(java.util.WeakHashMap)","WeakHashMap$HashIterator",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"hasNext()","hasNext",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"nextEntry()","nextEntry",false,4);
    helper.createMethodReturnType(method,JavaType.class,"java.util","WeakHashMap$Entry",false,0);
    method = helper.createMethod(newType,"remove()","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "WeakHashMap$KeyIterator",32);
    helper.addExtendsLinks("java.util", "WeakHashMap$KeyIterator","java.util","WeakHashMap$HashIterator");
	helper.createField(newType,JavaType.class,"java.util","WeakHashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"WeakHashMap$KeyIterator(java.util.WeakHashMap, java.util.WeakHashMap$1)","WeakHashMap$KeyIterator",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "WeakHashMap$KeySet",32);
    helper.addExtendsLinks("java.util", "WeakHashMap$KeySet","java.util","AbstractSet");
	helper.createField(newType,JavaType.class,"java.util","WeakHashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"toArray()","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"toArray(java.lang.Object[])","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"WeakHashMap$KeySet(java.util.WeakHashMap, java.util.WeakHashMap$1)","WeakHashMap$KeySet",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "WeakHashMap$ValueIterator",32);
    helper.addExtendsLinks("java.util", "WeakHashMap$ValueIterator","java.util","WeakHashMap$HashIterator");
	helper.createField(newType,JavaType.class,"java.util","WeakHashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"next()","next",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"WeakHashMap$ValueIterator(java.util.WeakHashMap, java.util.WeakHashMap$1)","WeakHashMap$ValueIterator",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "WeakHashMap$Values",32);
    helper.addExtendsLinks("java.util", "WeakHashMap$Values","java.util","AbstractCollection");
	helper.createField(newType,JavaType.class,"java.util","WeakHashMap","this$0",4112,false,0);
    method = helper.createMethod(newType,"iterator()","iterator",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Iterator",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"contains(java.lang.Object)","contains",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"toArray()","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"toArray(java.lang.Object[])","toArray",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.lang","Object",true,1);
    method = helper.createMethod(newType,"WeakHashMap$Values(java.util.WeakHashMap, java.util.WeakHashMap$1)","WeakHashMap$Values",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "WeakHashMap",33);
    helper.addExtendsLinks("java.util", "WeakHashMap","java.util","AbstractMap");
    helper.addImplementsLinks("java.util", "WeakHashMap","java.util","Map");
    method = helper.createMethod(newType,"WeakHashMap(int, float)","WeakHashMap",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"WeakHashMap(int)","WeakHashMap",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"WeakHashMap()","WeakHashMap",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"WeakHashMap(java.util.Map)","WeakHashMap",true,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"eq(java.lang.Object, java.lang.Object)","eq",false,8);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"indexFor(int, int)","indexFor",false,8);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"size()","size",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"isEmpty()","isEmpty",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"get(java.lang.Object)","get",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"containsKey(java.lang.Object)","containsKey",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"getEntry(java.lang.Object)","getEntry",false,0);
    helper.createMethodReturnType(method,JavaType.class,"java.util","WeakHashMap$Entry",false,0);
    method = helper.createMethod(newType,"put(java.lang.Object, java.lang.Object)","put",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"resize(int)","resize",false,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"putAll(java.util.Map)","putAll",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"remove(java.lang.Object)","remove",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"removeMapping(java.lang.Object)","removeMapping",false,0);
    helper.createMethodReturnType(method,JavaType.class,"java.util","WeakHashMap$Entry",false,0);
    method = helper.createMethod(newType,"clear()","clear",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"containsValue(java.lang.Object)","containsValue",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "boolean",false,0);
    method = helper.createMethod(newType,"keySet()","keySet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"values()","values",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Collection",false,0);
    method = helper.createMethod(newType,"entrySet()","entrySet",false,1);
    helper.createMethodReturnType(method,JavaType.class,"java.util","Set",false,0);
    method = helper.createMethod(newType,"access$300(java.lang.Object)","access$300",false,4104);
    helper.createMethodReturnType(method,JavaType.class,"java.lang","Object",false,0);
    method = helper.createMethod(newType,"access$400(java.util.WeakHashMap)","access$400",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "int",false,0);
    method = helper.createMethod(newType,"access$500(java.util.WeakHashMap)","access$500",false,4104);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"java.util","WeakHashMap$Entry",true,1);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "XMLUtils$1",32);
    helper.addExtendsLinks("java.util", "XMLUtils$1","java.lang","Object");
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "XMLUtils$EH",32);
    helper.addExtendsLinks("java.util", "XMLUtils$EH","java.lang","Object");
    helper.addImplementsLinks("java.util", "XMLUtils$EH","org.xml.sax","ErrorHandler");
    method = helper.createMethod(newType,"error(org.xml.sax.SAXParseException)","error",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "org.xml.sax","SAXException");
    method = helper.createMethod(newType,"fatalError(org.xml.sax.SAXParseException)","fatalError",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "org.xml.sax","SAXException");
    method = helper.createMethod(newType,"warning(org.xml.sax.SAXParseException)","warning",false,1);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "org.xml.sax","SAXException");
    method = helper.createMethod(newType,"XMLUtils$EH(java.util.XMLUtils$1)","XMLUtils$EH",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "XMLUtils$Resolver",32);
    helper.addExtendsLinks("java.util", "XMLUtils$Resolver","java.lang","Object");
    helper.addImplementsLinks("java.util", "XMLUtils$Resolver","org.xml.sax","EntityResolver");
    method = helper.createMethod(newType,"resolveEntity(java.lang.String, java.lang.String)","resolveEntity",false,1);
    helper.createMethodReturnType(method,JavaType.class,"org.xml.sax","InputSource",false,0);
        helper.addThrowsOnMethod(method, "org.xml.sax","SAXException");
    method = helper.createMethod(newType,"XMLUtils$Resolver(java.util.XMLUtils$1)","XMLUtils$Resolver",true,4096);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
// #########################################################
newType = helper.addTypeOnCurrentContext(JavaTypeClass.class,"java.util", "XMLUtils",32);
    helper.addExtendsLinks("java.util", "XMLUtils","java.lang","Object");
    helper.createField(newType,JavaTypePrimitive.class,"","boolean","$assertionsDisabled",4120,false,0);
    method = helper.createMethod(newType,"XMLUtils()","XMLUtils",true,0);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"load(java.util.Properties, java.io.InputStream)","load",false,8);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.io","IOException");
        helper.addThrowsOnMethod(method, "java.util","InvalidPropertiesFormatException");
    method = helper.createMethod(newType,"getLoadingDoc(java.io.InputStream)","getLoadingDoc",false,8);
    helper.createMethodReturnType(method,JavaType.class,"org.w3c.dom","Document",false,0);
        helper.addThrowsOnMethod(method, "org.xml.sax","SAXException");
        helper.addThrowsOnMethod(method, "java.io","IOException");
    method = helper.createMethod(newType,"importProperties(java.util.Properties, org.w3c.dom.Element)","importProperties",false,8);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
    method = helper.createMethod(newType,"save(java.util.Properties, java.io.OutputStream, java.lang.String, java.lang.String)","save",false,8);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.io","IOException");
    method = helper.createMethod(newType,"emitDocument(org.w3c.dom.Document, java.io.OutputStream, java.lang.String)","emitDocument",false,8);
    helper.createMethodReturnType(method,JavaTypePrimitive.class,"", "void",false,0);
        helper.addThrowsOnMethod(method, "java.io","IOException");
// #########################################################
session.save();
session.close();
graph.shutdown();
        