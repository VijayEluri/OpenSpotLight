gunit SLQLWalker walks SLQL;

@header{
package org.openspotlight.slql.parser;
}


/**
 * test Node Type Name
 */
nodeType walks nodeType:

"test"
	OK

"Test"
	OK

"org.openspotLight.Test"
	OK

"org.openspotLight.Test.*"
	OK

"[Separated Name].*"
	OK

"[Separated Name]"
	OK

"[Separated Name].[Other Name]"
	OK

"[Separated Name].[Other Name].*"
	OK

"[Separated Name].[Other Name].[Last Name].*"
	OK

"org.[test here]"
	OK

"org.[test here].*"
	OK

/**
 * test Link Type Name
 */
linkType walks linkType:

"org.openspotLight.Test"
	OK

"org.openspotLight.LinkTest"
	OK

"[LinkTest with spaces]"
	OK

"[LinkTest with spaces].[teste]"
	OK

"[LinkTest with spaces].teste"
	OK

"[LinkTest with spaces].[teste].[a]"
	OK

"[LinkTest with spaces].teste.any"
	OK

"[LinkTest with spaces].teste.a"
	OK

/**
 * test Collator Level
 */
useCollatorLevel walks useCollatorLevel:

"use collator level identical" 
	OK

"use collator level primary"
	OK

"use collator level secondary"
	OK

"use collator level tertiary"
	OK

"use collator level identical"
	OK

"use collator level primary"
	OK

"use collator level secondary"
	OK

"use collator level tertiary"
	OK

/**
 * test Define Output
 */
defineOutput walks defineOutput:

"define output = generalDiagram;"
	OK

"define output = [composed name];"
	OK

"define output = [composed name].something;"
	OK

"define output = org.something.ClassName;"
	OK

"define output = org.[something].test;"
	OK

"define output = org.[something with space].test;"
	OK

"define output = generalDiagram;"
	OK

"define output = [composed name];"
	OK

"define output = [composed name].something;"
	OK

"define output = org.something.ClassName;"
	OK

"define output = org.[something].test;"
	OK

"define output = org.[something with space].test;"
	OK

/**
 * test Define Target
 */
defineTarget walks defineTarget:

"define target = testeTarget;"
	OK

"define target = testeTarget keep result;"
	OK

"define target = testeTarget;"
	OK

"define target = testeTarget keep result;"
	OK


/**
 * test Define Message
 */
defineMessage walks defineMessage:

"define message $teste = \"entre com um valor\";"
	OK

"define message @teste = \"entre com um valor\";"
	OK

"define message &teste = \"entre com um valor\";"
	OK

"define message #teste = \"entre com um valor\";"
	OK

"define message $teste = \"entre com um valor\";"
	OK

"define message @teste = \"entre com um valor\";"
	OK

"define message &teste = \"entre com um valor\";"
	OK

"define message #teste = \"entre com um valor\";"
	OK

/**
 * test Define Domain Values
 */
defineDominValues walks defineDominValues:

"define domain values $teste = \"teste1\" ;"
	OK

"define domain values $teste = \"1\" ;"
	OK

"define domain values #teste = 1 ;"
	OK

"define domain values &teste = 1 ;"
	OK

"define domain values &teste = 1.1 ;"
	OK

"define domain values $teste = \"1\", \"2\", \"12\" ;"
	OK

"define domain values $teste = \"teste1\", \"teste2\", \"teste3\" ;"
	OK

"define domain values #teste = 1,2,3,14 ;"
	OK

"define domain values &teste = 1.1,2,33.3,4 ;"
	OK

"define domain values $teste = \"teste1\" ;"
	OK

"define domain values #teste = 1 ;"
	OK

"define domain values &teste = 1 ;"
	OK

"define domain values &teste = 1.1 ;"
	OK

"define domain values $teste = \"teste1\", \"teste2\", \"teste3\" ;"
	OK

"define domain values #teste = 1,2,3,14 ;"
	OK

"define domain values &teste = 1.1,2,33.3,4 ;"
	OK

/**
 * test Executing *
 */
executing walks executing:
"executing 1 times"
	OK

"executing 100 times"
	OK

"executing #test times"
	OK

"executing n times"
	OK

"executing 1 times"
	OK

"executing 100 times"
	OK

"executing #test times"
	OK

"executing n times"
	OK

/**
 * test OrderBy
 */
orderBy walks orderBy:
<<order by org.test.JavaType>>
	OK

<<order by 
	org.test.JavaType property myPropertyName, property xxx>>
	OK

<<order by 
	org.test.JavaType property myPropertyName, property otherProperty,
	org.test.JavaPackage property otherProperty, property myProperty>>
	OK

<<order by org.test.JavaType, org.test.JavaPackage >>
	OK

<<order by org.test.JavaType >>
	OK

<<order by 
	org.test.JavaType property myPropertyName, property xxx>>
	OK

<<order by 
	org.test.JavaType property myPropertyName, property otherProperty,
	org.test.JavaPackage property otherProperty, property myProperty>>
	OK

<<order by org.test.JavaType, org.test.JavaPackage >>
	OK

/**
 * test Selects
 */
select walks select:


"select *;"
	OK

"select * keep result;"
	OK

"select * keep result use collator level primary;"
	OK

"select * use collator level primary;"
	OK

<<
select **
where myType property myProperty == "TesteValue"
;>>
	OK

<<
select **
where myType property myProperty == 1
;>>
	OK

<<
select **
where myType property myProperty == 1.1
;>>
	OK

<<
select **
where myType property myProperty == @teste
;>>
	OK

<<
select **
where myType property myProperty == #teste
;>>
	OK

<<
select **
where myType property myProperty == $teste
;>>
	OK

<<
select **
where myType property myProperty == &teste
;>>
	OK

<<
select **
where myType property myProperty == true
;>>
	OK

<<
select **
where myType property myProperty == true
limit 10
;>>
	OK

<<
select **
where myType property myProperty == true
limit 10 offset 11
;>>
	OK

<<
select **
where myType property myProperty == true
limit #test offset #test2
;>>
	OK

<<
select **
where myType property myProperty == true
limit #test2 offset 10
;>>
	OK

<<
select **
where myType property myProperty == false
;>>
	OK

<<
select **
where myType property myProperty == null
;>>
	OK

"select nodeType1;"
	OK

"select nodeType2, nodeType3;"
	OK

//WE WILL NOT CHECK TYPES DURING PARSER
<<
select nodeType2, nodeType3
where nodeType1 property myProperty == 3;>>
	OK

//WE WILL NOT CHECK TYPES DURING PARSER
<<
select nodeType1.*, nodeType3
where nodeType2 property myProperty == 3;>>
	OK

<<
select *
where myType property myProperty == "TesteValue"
;>>
	OK

<<
select org.test.JavaType
where 
	org.test.JavaType 
	(	property myProperty == "TesteValue" &&
		property myOtherProperty == @myBooleanVar ) ||
		link org.test.PackageDeclaresType (b) == 1
;>>
	OK

<<
select **
where 
	org.test.JavaType 
	(	property myProperty == "TesteValue" &&
		property myOtherProperty == @myBooleanVar ) ||
		link org.test.PackageDeclaresType (b) == 1
	org.test.JavaPackage 
	(	property myPropertyOfPackage == "something" &&
		property myOtherPropertyOfPackage == $someOtherValue ) ||
		link org.test.PackageDeclaresType (a) > 10

;>>
	OK


<<
select * by link org.test.PackageDeclaresType (a), org.test.TypeDeclaresMethod (b) 
;>>
	OK

<<
select org.test.JavaType.*, org.test.JavaMethod.* 
	by link org.test.PackageDeclaresType (a), org.test.TypeDeclaresMethod (a,b) 
;>>
	OK

compilationUnit walks compilationUnit:

<<
select org.test.Package;
select * by link org.test.PackageDeclaresType (a);>>
	OK

<<
define target = org.test.Package;
select * by link org.test.PackageDeclaresType (a);>>
	OK

<<
define target = org.test.Package.*;
select * by link org.test.PackageDeclaresType (a);>>
	OK

<<
use collator level primary;
define output = generalDiaram;
define target = org.test.Package.*;
select * by link org.test.PackageDeclaresType (a);>>
	OK

<<
use collator level primary;
define output = generalDiaram;
define target = org.test.Package.*;
select * by link org.test.PackageDeclaresType (a);>>
	OK

<<
use collator level primary;
define output = generalDiaram;
define message $teste = "enter with some data";
define message $teste2 = "enter with some data";
define target = org.test.Package.*;
select * by link org.test.PackageDeclaresType (a);>>
	OK

<<
use collator level primary;
define output = generalDiaram;
define message $teste = "enter with some data";
define domain values $teste = "value1", "value2";
define target = org.test.Package.*;
select * by link org.test.PackageDeclaresType (a);>>
	OK

<<
select org.test.JavaType.* ;>>
	OK

<<
select org.test.JavaType.*
where
	org.test.JavaType.*
		property myPropertyName == "someValue" && 
		link org.test.JavaTypeDeclares (b) > 2
	 ;>>
	OK

<<
select org.test.JavaType.*
where
	org.test.JavaType.*
		property myPropertyName == "someValue" && 
		link org.test.JavaTypeDeclares (b) > 2
order by
	org.test.JavaType.*
		property myPropertyName;>>
	OK

<<
select org.test.JavaType.*
	where
		org.test.JavaType.*
			property myPropertyName == "someValue" && 
			link org.test.JavaTypeDeclares (b) > 2
order by
	org.test.JavaTypeClass, org.test.JavaTypeInterface;>>
	OK

<<
select org.test.JavaType.*
	where
		org.test.JavaType.*
			property myPropertyName == "someValue" && 
			link org.test.JavaTypeDeclares (b) > 2
order by
	org.test.JavaTypeClass, org.test.JavaTypeInterface
use collator level secondary;>>
	OK

<<
select org.test.JavaType.*
	where
		org.test.JavaType.*
			property myPropertyName == "someValue" && 
			link org.test.JavaTypeDeclares (b) > 2
order by
	org.test.JavaTypeClass, org.test.JavaTypeInterface
use collator level secondary;>>
	OK

<<
select org.test.JavaType.*
	where
		org.test.JavaType.*
			property myPropertyName == "someValue" && 
			link org.test.JavaTypeDeclares (b) > 2
limit 10
order by
	org.test.JavaTypeClass, org.test.JavaTypeInterface
use collator level secondary;>>
	OK

<<
select org.test.JavaType.*
	where
		org.test.JavaType.*
			property myPropertyName == "someValue" && 
			link org.test.JavaTypeDeclares (b) > 2
limit 10 offset 11
order by
	org.test.JavaTypeClass, org.test.JavaTypeInterface
use collator level secondary;>>
	OK

<<
select org.test.JavaType.*
	where
		org.test.JavaType.*
			property myPropertyName == "someValue" && 
			link org.test.JavaTypeDeclares (b) > 2
order by
	org.test.JavaTypeClass, org.test.JavaTypeInterface;
select *;	>>
	OK
